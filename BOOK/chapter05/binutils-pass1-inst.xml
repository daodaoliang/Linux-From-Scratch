<sect2><title>&nbsp;</title><para>&nbsp;</para></sect2>

<sect2>
<title>Installation of Binutils</title>

<para>It is important that Binutils be the first package to get compiled,
because both Glibc and GCC perform various tests on the available linker and
assembler to determine which of their own features to enable.</para>

<note><para>Even though Binutils is an important toolchain package, we are not
going to run the test suite at this early stage. First, the test suite framework
is not yet in place and second, the programs from this first pass will soon be
overwritten by those installed in the second pass.</para></note>

<para>This package is known to behave badly when you have changed its default
optimization flags (including the -march and -mcpu options). Therefore, if
you have defined any environment variables that override default
optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting or
modifying them when building Binutils.</para>

<para>The Binutils documentation recommends building Binutils outside of the
source directory in a dedicated build directory:</para>

<para><screen><userinput>mkdir ../binutils-build
cd ../binutils-build</userinput></screen></para>

<para>Next, prepare Binutils to be compiled:</para>

<para><screen><userinput>../binutils-&binutils-version;/configure \
&nbsp;&nbsp;&nbsp;&nbsp;--prefix=/tools --disable-nls</userinput></screen></para>

<para>The meaning of the configure options:</para>

<itemizedlist>
<listitem><para><userinput>--prefix=/tools</userinput>: This tells the
configure script to prepare to install the Binutils programs in the
<filename>/tools</filename> directory.</para></listitem>

<listitem><para><userinput>--disable-nls</userinput>: This disables
internationalization (a word often shortened to i18n). We don't need this
for our static programs and <emphasis>nls</emphasis> often causes problems
when linking statically.</para></listitem>
</itemizedlist>

<para>Continue with compiling the package:</para>

<para><screen><userinput>make configure-host
make LDFLAGS="-all-static"</userinput></screen></para>

<para>The meaning of the make option:</para>

<itemizedlist>
<listitem><para><userinput>LDFLAGS="-all-static"</userinput>: This tells the
linker that all the Binutils programs should be linked statically. However,
strictly speaking, <userinput>"-all-static"</userinput> is first passed on to
the <emphasis>libtool</emphasis> program which then passes
<userinput>"-static"</userinput> on to the linker.</para></listitem>
</itemizedlist>

<para>And install the package:</para>

<para><screen><userinput>make install</userinput></screen></para>

<para>Now prepare the linker for the "locking in" of Glibc later on:</para>

<para><screen><userinput>make -C ld clean
make -C ld LIB_PATH=/tools/lib</userinput></screen></para>

<para>The meaning of the make options:</para>

<itemizedlist>
<listitem><para><userinput>-C ld clean</userinput>: This tells the make program
to remove all the compiled files, but only in the <filename>ld</filename>
subdirectory.</para></listitem>

<listitem><para><userinput>-C ld LIB_PATH=/tools/lib</userinput>: This option
rebuilds everything in the <filename>ld</filename> subdirectory. Specifying the
LIB_PATH makefile variable on the command line allows us to override the default
value and have it point to our temporary tools location. The value of this
variable specifies the linker's default library search path. You'll see how this
preparation is utilised later on in the chapter.</para></listitem>
</itemizedlist>

<caution><para>Do not yet remove the Binutils build and source
directories. You will need them again in their current state a bit further on
in this chapter.</para></caution>

</sect2>

