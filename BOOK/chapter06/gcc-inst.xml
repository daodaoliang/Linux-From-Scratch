<sect2><title>&nbsp;</title><para>&nbsp;</para></sect2>

<sect2>
<title>Installation of GCC</title>

<note><para>The test suite for GCC in this chapter is considered <emphasis>
critical</emphasis>. Do not skip it under any circumstances.</para></note>

<para>This package is known to behave badly when you have changed its
default optimization flags (including the -march and -mcpu options).
Therefore, if you have defined any environment variables that override
default optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting
or modifying them when building GCC.</para>

<para>This time we will build both the C and the C++ compiler, so you'll have
to unpack the GCC-core <emphasis>and</emphasis> the GCC-g++ tarball -- they
will unfold into the same directory. You should likewise extract the
GCC-testsuite package. The full GCC package contains even more
compilers. Instructions for building these can be found at
<ulink url="&blfs-root;view/cvs/general/gcc.html"/>.</para>

<para><screen><userinput>patch -Np1 -i ../gcc-&gcc-version;-no_fixincludes-2.patch
patch -Np1 -i ../gcc-3.3.1-suppress-libiberty.patch</userinput></screen></para>

<para>The second patch here suppresses the installation of libiberty from GCC,
as we will use the one provided by binutils instead.</para>

<para>The GCC documentation recommends building GCC outside of the source
directory in a dedicated build directory:</para>

<para><screen><userinput>mkdir ../gcc-build
cd ../gcc-build</userinput></screen></para>

<para>Now prepare GCC for compilation:</para>

<para><screen><userinput>../gcc-&gcc-version;/configure --prefix=/usr \
&nbsp;&nbsp;&nbsp;&nbsp;--enable-shared --enable-threads=posix \
&nbsp;&nbsp;&nbsp;&nbsp;--enable-__cxa_atexit --enable-clocale=gnu \
&nbsp;&nbsp;&nbsp;&nbsp;--enable-languages=c,c++</userinput></screen></para>

<para>The meaning of the new configure options:</para>

<itemizedlist>
<listitem><para><userinput>--enable-threads=posix</userinput>: This enables
C++ exception handling for multi-threaded code.</para></listitem>

<listitem><para><userinput>--enable-__cxa_atexit</userinput>: This option
will result in C++ shared libraries and C++ programs that are interoperable
with other Linux distributions.</para></listitem>

<listitem><para><userinput>--enable-clocale=gnu</userinput>: There is a risk
that some people will build ABI incompatible C++ libraries if they didn't
install all of the glibc localedata. Using --enable-clocale=gnu ensures that
the "right thing" is done in all cases. If you don't wish to use this option,
then at least build the <emphasis>de_DE</emphasis> locale. When GCC finds
this specific locale, then the correct locale mode (<emphasis>gnu</emphasis>)
is implemented.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<para><screen><userinput>make</userinput></screen></para>

<para>Test the results, but don't stop at errors (you'll remember the few
known ones):</para>

<para><screen><userinput>make -k check</userinput></screen></para>

<para>And install the package:</para>

<para><screen><userinput>make install</userinput></screen></para>

<para>Some packages expect the C PreProcessor to be installed in the
<filename>/lib</filename> directory.
To honor those packages, create this symlink:</para>

<para><screen><userinput>ln -s ../usr/bin/cpp /lib</userinput></screen></para>

<para>Many packages use the name <userinput>cc</userinput> to call the C
compiler. To satisfy those packages, create a symlink:</para>

<para><screen><userinput>ln -s gcc /usr/bin/cc</userinput></screen></para>

</sect2>
