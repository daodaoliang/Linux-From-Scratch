<sect2><title>&nbsp;</title><para>&nbsp;</para></sect2>

<sect2>
<title>Glibc installation</title>

<para>Before starting to install Glibc, you must <userinput>cd</userinput>
into the <filename>glibc-&glibc-version;</filename> directory and unpack
Glibc-linuxthreads in that directory, not in <filename>/usr/src</filename> as
you would normally do.</para>

<para>This package is known to behave badly when you have changed its
default optimization flags (including the -march and -mcpu options).
Therefore, if you have defined any environment variables that override
default optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting
them when building Glibc.</para>

<para>Basically, compiling Glibc in any other way than the book suggests
is putting your system at a very high risk.</para>

<para>We'll start by applying a patch that does the following:</para>

<itemizedlist>
<listitem><para>It converts all occurrences of <emphasis>$(PERL)</emphasis>
to <emphasis>/usr/bin/perl</emphasis> in the
<filename>malloc/Makefile</filename> file. This is done because Glibc
can't autodetect the location of <filename>perl</filename> because the Perl
package hasn't been installed yet. And if Glibc thinks Perl isn't installed, the
perl program <filename>mtrace</filename> won't be installed
either.</para></listitem>

<listitem><para>It replaces all occurrences of <emphasis>root</emphasis>
with <emphasis>0</emphasis> in the <filename>login/Makefile</filename>
file. This is done because Glibc itself isn't installed yet and therefore
username-to-userid resolving isn't working yet, so a
<userinput>chown root file</userinput> would fail. Using numeric IDs (as in
<userinput>chown 0 file</userinput>) works fine.</para></listitem>

</itemizedlist>

<para><screen><userinput>patch -Np1 -i ../glibc-&glibc-rootperl-patch-version;-root-perl.patch</userinput></screen></para>

<para>There is a potential problem that causes statically linked binaries
to crash that were linked against Glibc-2.2 or older libraries. Even though
static binaries have all the necessary parts of Glibc built-in, they still
rely on one external library set: Glibc's NSS libraries. These libraries,
among other things, tell programs where the system's password database is
(in <filename>/etc/password</filename>, NIS, or whatever other scheme has
been configured).</para>

<para>Glibc has undergone some changes since version 2.2.x and the new NSS
code is incompatible with the old one. So when Glibc is installed it will
install its new NSS libraries, and static programs will load these new NSS
libraries and will abort with a <emphasis>segmentation fault</emphasis>
error. This patch undoes some of the changes to overcome the problem.</para>

<para>If you started chapter 5 with a host system that uses Glibc-2.2.x
or older, you must apply the following patch. We will install Glibc again at
the end of this chapter to remove this patch so you'll have a pristine Glibc
as the developers intended it.</para>

<para><screen><userinput>patch -Np1 -i ../glibc-&glibc-libnss-patch-version;-libnss.patch</userinput></screen></para>

<para>Glibc will check for the <filename>/etc/ld.so.conf</filename> file
and abort with an error if the file is missing, so we must create it:</para>

<para><screen><userinput>touch /etc/ld.so.conf</userinput></screen></para>

<para>The documentation that comes with Glibc recommends to build the package
not in the source directory but in a separate, dedicated directory:</para>

<para><screen><userinput>mkdir ../glibc-build &amp;&amp;
cd ../glibc-build</userinput></screen></para>

<para>Next, prepare Glibc to be compiled:</para>

<para><screen><userinput>../glibc-&glibc-version;/configure --prefix=/usr \
&nbsp;&nbsp;&nbsp;&nbsp;--disable-profile --enable-add-ons \
&nbsp;&nbsp;&nbsp;&nbsp;--libexecdir=/usr/bin</userinput></screen></para>

<para>The meaning of the configure options are:</para>

<itemizedlist>
<listitem><para><userinput>--disable-profile</userinput>: This disables the
building of the libraries with profiling information. Omit this option if you
plan to do profiling.</para></listitem>

<listitem><para><userinput>--enable-add-ons</userinput>: This enables any
add-ons that we installed with Glibc, in our case Linuxthreads.</para></listitem>

<listitem><para><userinput>--libexecdir=/usr/bin</userinput>: This will
cause the <filename>pt_chown</filename> program to be installed in the
<filename>/usr/bin</filename> directory.</para></listitem>
</itemizedlist>

<para>During this stage you will see the following warning:</para>

<blockquote><screen>configure: warning:
*** These auxiliary programs are missing or too old: msgfmt
*** some features will be disabled.
*** Check the INSTALL file for required versions.</screen></blockquote>

<para>The missing <filename>msgfmt</filename> program (from the Gettext
package, which we'll install later) won't cause any problems. The
<filename>msgfmt</filename> is used to generate the binary translation
files that can make your system talk in a different language. Because these
translation files have already been generated for you, there is no need for
<filename>msgfmt</filename>. You'd only need the program if you change the
translation source files (the <filename>*.po</filename> files in the
<filename class="directory">po</filename> subdirectory), which
would require you to regenerate the binary files.</para>

<para>Because Glibc hasn't been installed yet, one of the tests that was
run by the configure script has failed. This test is supposed to test
<filename>gcc</filename> to determine whether a cross-compiler is installed.
However, Glibc needs to be already installed to run this test. Since the test
failed, the configure script assumes we have a cross-compiler. We override
that assumption by explicitly telling Glibc we're not cross-compiling.
Not doing this would have a couple of unintended side effects,
such as the timezone files not being installed.</para>

<para><screen><userinput>echo "cross-compiling = no" &gt; configparms</userinput></screen></para>

<para>Continue with compiling the package:</para>

<para><screen><userinput>make</userinput></screen></para>

<para>We'll continue with installing the package. The Linuxthreads man
pages are not going to be installed at this point because it requires a
working Perl installation. We'll install Perl later on in this chapter,
and the man pages will be installed when Glibc is installed for the second
time at the end of this chapter.</para>

<para><screen><userinput>make install</userinput></screen></para>

<para>The locales (used by Glibc to make your Linux system talk in a different
language) weren't installed when you ran the previous command, so we have to
do that ourselves now:</para>

<para><screen><userinput>make localedata/install-locales</userinput></screen></para>

<para>An alternative to running the previous command is to install only those
locales which you need or want. This can be achieved using the localedef
command. Information on this can be found in the <filename>INSTALL</filename>
file in the <filename>glibc-&glibc-version;</filename> tree.</para>

<para>To finish off the installation we'll reload Bash so it will use the new
<filename>libnss_*</filename> files. This will also get rid of the
<emphasis>I have no name!</emphasis> message in the command prompt:</para>

<para><screen><userinput>exec /static/bin/bash --login</userinput></screen></para>

</sect2>

