<sect2>
<title>Installation of M4</title>

<para>
Install M4 by running the following commands:
</para>

<blockquote><literallayout>

	<userinput>./configure --prefix=/usr &amp;&amp;</userinput>
	<userinput>make &amp;&amp;</userinput>
	<userinput>make install</userinput>

</literallayout></blockquote>

<para>
If you're base system is running a 2.0 kernel and your Glibc version is
2.1 then you will most likely get problems executing M4 in the
chroot'ed environment due to incompatibilities between the M4 program,
Glibc-2.1 and the running 2.0 kernel. If you have problems executing the 
m4 program in the chroot'ed environment (for example when you install 
the autoconf and automake packages) you'll have to exit the chroot'ed 
environment and compile M4 statically. This way the binary is linked 
against Glibc 2.0 (if you run kernel 2.0 you're Glibc version is 2.0 as 
well on a decent system. Kernel 2.0 and Glibc-2.1 don't mix very well) 
and won't give you any problems. 
</para>

<para>
To create a statically linked version of M4, execute the following
commands:
</para>

<blockquote><literallayout>

<userinput>logout</userinput>
<userinput>cd $LFS/usr/src/m4-1.4</userinput>
<userinput>./configure --prefix=/usr --disable-nls</userinput>
<userinput>make LDFLAGS=-static</userinput>
<userinput>make prefix=$LFS/usr install</userinput>

</literallayout></blockquote>

<para>
Now you can re-enter the chroot'ed environment and continue with the
next package. If you wish to recompile M4 dynamically, you can do that
after you have rebooted into the LFS system rather than chroot'ed into it.
</para>

<blockquote><literallayout>

	<userinput>chroot $LFS env -i HOME=/root bash --login</userinput>

</literallayout></blockquote>

</sect2>

