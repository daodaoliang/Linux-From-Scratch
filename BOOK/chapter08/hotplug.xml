<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-bootable-hotplug" xreflabel="Hotplug" role="wrap">
<title>Hotplug-&hotplug-version;</title>
<?dbhtml filename="hotplug.html"?>

<indexterm zone="ch-bootable-hotplug"><primary sortas="a-Hotplug">Hotplug</primary></indexterm>

<sect2 role="package"><title/>

<para>The optional Hotplug package contains scripts that react upon
hotplug events generated by the kernel. Such events correspond to every
change in the in the kernel state visible in the "sysfs" filesystem, e.g.,
the addition and removal of hardware. This package also detects existing
hardware during boot and inserts the relevant modules into the running kernel.
</para>

<para>You absolutely need this package if you are going to use
<application>Udev</application> for management of the <filename
class="directory">/dev</filename> directory with a modular kernel. You want
this package if you need a hardware detection mechanism for your modular
kernel. Also, <application>Hotplug</application> allows you to write custom
scripts that react upon addition and removal of hardware (e.g., change the
access permissions to the USB scanner). If none of the reasons above applies,
skip this package.</para>

<para>Hotplug depends upon the Modile-Init-Tools package being
installed.</para>

<segmentedlist>
<segtitle>&buildtime;</segtitle>
<segtitle>&diskspace;</segtitle>
<seglistitem><seg>0.01 SBU</seg><seg>0.1 MB</seg></seglistitem>
</segmentedlist>

</sect2>

<sect2 role="installation">
<title>Installation of Hotplug</title>

<para>
The <command>usb.rc</command> script provided by the
<application>Hotplug</application> package depends on the programs 
<command>usbutils</command> and <command>which</command> being present.
However, these programs are not called for any useful purpose.
Apply the patch that removes those dependencies:
</para>

<screen><userinput>patch -Np1 -i ../hotplug-&hotplug-version;-bogus_deps-1.patch</userinput></screen>

<para>
USB coldplugging is somewhat broken in <application>Hotplug</application>
by default: the DEVICE environment variable is not passed to user-defined USB
hotplug handlers. Fix this with the following patch:
</para>

<screen><userinput>patch -Np1 -i ../hotplug-&hotplug-version;-device-2.patch</userinput></screen>

<!-- Waiting for hotplug-2004_04_01-isapnp-4.patch
<para>
There is an optional patch that adds ISAPNP hardware detection
capabilities to Hotplug. It is not well tested and in fact contains known
bugs. If you chose to apply it, run the following command:
</para>

<screen><userinput>patch -Np1 -i ../hotplug-&hotplug-version;-isapnp-4.patch</userinput></screen>
-->

<para>Now install the Hotplug package:</para>

<screen><userinput>make install</userinput></screen>

<para>Remove Hotplug's not-so-clean init script, since we're going to be using
the script included with LFS-Bootscripts:</para>

<screen><userinput>rm -rf /etc/init.d</userinput></screen>

<para>Network device hotplugging is not supported by LFS bootscripts yet. For
that reason, remove the network hotplug agent:</para>

<screen><userinput>rm -f /etc/hotplug/net.agent</userinput></screen>
</sect2>
<sect2><title>Hotplug configuration</title>
<sect3><title>Undetectable modules</title>
<para>Hotplug loads only modules that match the PCI and USB IDs of hardware
actually present in the system. However, people want it to be a more general
hardware detection script, e.g., they want the snd-pcm-oss module to be loaded
if any soundcard supported by ALSA is found. The problem is that the
snd-pcm-oss module does not correspond to any PCI or USB ID, and it is not a
required dependency of soundcard drivers (i.e., the legacy-free configuration
without snd-pcm-oss at all is valid). If snd-pcm is also a module, the
following line in <filename>/etc/modprobe.conf</filename> will do the
trick:</para>
<screen>install snd-pcm modprobe -i snd-pcm ; modprobe snd-pcm-oss ; true</screen>
<para>Let's mention some properties of this line. First, it works with any
soundcard, unlike the solution with aliases. Second, it does nothing if
hotplug found no soundcards. In fact, one can think of this line as of a way
to tell <application>Module-Init-Tools</application> that an additional
dependency between modules exists: snd-pcm requires snd-pcm-oss to be loaded
after it. It is the equivalent of the "above"
directive in the old <filename>modules.conf</filename> file that was used with
2.4.x Linux kernels.</para>
<para>More such hidden dependencies exist. An incomplete list follows:</para>
<screen>install snd-seq modprobe -i snd-seq ; modprobe snd-seq-oss ; true
install parport modprobe -i parport ; modprobe lp ; modprobe ppdev ; true
install mptbase modprobe -i mptbase ; modprobe mptscsih ; modprobe mptctl ; modprobe mptlan ; true
# You don't need the next line if scsi-mod is a module
install usb-storage modprobe -i usb-storage ; modprobe sd-mod ; true
# Use this instead
install scsi-mod modprobe -i scsi-mod ; modprobe sd-mod ; modprobe sr-mod ; true</screen>
<para>From the examples above, you can probably infer the general rule and add
your own lines. If module "a" is unusable without "b", but "b" is undetectable
and "a" is a module, add the following line to
<filename>/etc/modprobe.conf</filename>.</para>
<screen>install a modprobe -i a ; modprobe b ; true</screen>

<para>If "a" is not a module, then "b" is a candidate for listing in the
<filename>/etc/modules</filename> file.</para>
</sect3>

<sect3><title>Module blacklist</title>
<para>The <filename>/etc/hotplug/blacklist</filename> file contains a list of
modules that shold never be loaded by <application>Hotplug</application>.
By default, it includes the de4x5 and dmfe drivers. If you want to use any of
them with your Tulip network card (as opposed to the tulip and xircom_tulip_cb
modules), remove the corresponding lines from this file.</para>
</sect3>

<sect3><title>User-defined hotplug handlers</title>
<para>To be written.</para>
</sect3>
</sect2>

<sect2 id="contents-hotplug" role="content"><title>Contents of Hotplug</title>

<variablelist>
<varlistentry id="hotplug">
<term><command>/sbin/hotplug</command></term>
<listitem>
<indexterm zone="ch-bootable-hotplug hotplug"><primary
sortas="b-hotplug">hotplug</primary></indexterm>
<para>This script is called by default by Linux kernel when something
changes in its internal state (e.g., a new device is added or removed).</para>
</listitem>
</varlistentry>

<varlistentry id="hotplug-rc">
<term><command>*.rc</command> files in
<filename class="directory">/etc/hotplug</filename> directory</term>
<listitem>
<indexterm zone="ch-bootable-hotplug hotplug-rc"><primary
sortas="e-/etc/hotplug/*.rc">/etc/hotplug/*.rc</primary></indexterm>
<para>These scripts are used for cold plugging, i.e., detection and other
specific actions upon hardware already present during system startup. 
They are called by the <filename>hotplug</filename> initscript that comes
from the lfs-bootscripts package.
The <command>*.rc</command>
scripts try to recover hotplug events that were lost during system boot
because, e.g., the root filesystem was not mounted by the kernel.
</para>
</listitem>
</varlistentry>

<varlistentry id="hotplug-agent">
<term><command>*.agent</command> files in
<filename class="directory">/etc/hotplug</filename> directory</term>
<listitem>
<indexterm zone="ch-bootable-hotplug hotplug-agent"><primary
sortas="e-/etc/hotplug/*.agent">/etc/hotplug/*.agent</primary></indexterm>
<para>These scripts are called by <command>/sbin/hotplug</command>
in response to different types of hotplug events generated by the kernel.
Their action is to insert corresponding kernel modules and call user-provided
scripts, if any.
</para>
</listitem>
</varlistentry>

<varlistentry id="hotplug-functions">
<term><filename>/etc/hotplug/hotplug.functions</filename></term>
<listitem>
<indexterm zone="ch-bootable-hotplug hotplug-functions"><primary
sortas="e-/etc/hotplug/hotplug.functions">/etc/hotplug/hotplug.functions</primary></indexterm>
<para>This file contains common functions used by other scripts in Hotplug
package.
</para>
</listitem>
</varlistentry>

<varlistentry id="hotplug-blacklist">
<term><filename>/etc/hotplug/blacklist</filename></term>
<listitem>
<indexterm zone="ch-bootable-hotplug hotplug-blacklist"><primary
sortas="e-/etc/hotplug/blacklist">/etc/hotplug/blacklist</primary></indexterm>
<para>This file contains the list of modules that should never be
inserted into the kernel by hotplug scripts.
</para>
</listitem>
</varlistentry>

<varlistentry id="hotplug-subdirs">
<term><filename class="directory">/etc/hotplug/{pci,usb}</filename></term>
<listitem>
<indexterm zone="ch-bootable-hotplug hotplug-subdirs"><primary
sortas="e-/etc/hotplug/{pci,usb}">/etc/hotplug/{pci,usb}</primary></indexterm>
<para>These directories are supposed to contain user-written handlers for
hotplug events.
</para>
</listitem>
</varlistentry>

<varlistentry id="hotplug-usb.usermap">
<term><filename>/etc/hotplug/usb.usermap</filename></term>
<listitem>
<indexterm zone="ch-bootable-hotplug hotplug-usb.usermap"><primary
sortas="e-/etc/hotplug/usb.usermap">/etc/hotplug/usb.usermap</primary></indexterm>
<para>This file contains rules that determine which user-defined handlers to
call for each USB device, based on its vendor, id and other attributes.
</para>
</listitem>
</varlistentry>

<varlistentry id="hotplug-hotplug.d">
<term><filename class="directory">/etc/hotplug.d</filename></term>
<listitem>
<indexterm zone="ch-bootable-hotplug hotplug-hotplug.d"><primary
sortas="e-/etc/hotplug.d">/etc/hotplug.d</primary></indexterm>
<para>This directory contains programs (or symlinks to them)
that are interested in receiving hotplug events. E.g.,
<application>udev</application> puts its symlink here during installation.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>
</sect1>
