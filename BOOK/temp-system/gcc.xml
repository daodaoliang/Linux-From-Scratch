<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-temp-system-gcc" role="wrap">
<title>GCC-&gcc-version;</title>
<?dbhtml filename="gcc.html"?>

<indexterm zone="ch-temp-system-gcc">
<primary sortas="a-GCC">GCC</primary>
<secondary>tools</secondary></indexterm>

<sect2 role="package"><title/>

<segmentedlist>
<segtitle>&buildtime;</segtitle>
<segtitle>&diskspace;</segtitle>
<seglistitem><seg>11.0 SBU</seg><seg>274 MB</seg></seglistitem>
</segmentedlist>

<xi:include xmlns:xi="http://www.w3.org/2003/XInclude" href="../final-system/gcc.xml" xpointer="xpointer(/sect1/sect2[1]/segmentedlist[2])"/>

</sect2>

<sect2 role="installation">
<title>Installation of GCC</title>

<para>Because the C and the C++ compilers will be built, unpack both
the core and the g++ tarballs (as well as test suite, if you want to
run the tests). By unpacking them in the working directory, they will
all unfold into a single <filename
class="directory">gcc-&gcc-version;/</filename> subdirectory.</para>

<para>First correct a known problem and make an essential adjustment:</para>

<screen><userinput>patch -Np1 -i ../gcc-&gcc-version;-no_fixincludes-1.patch
patch -Np1 -i ../gcc-&gcc-version;-specs-2.patch
patch -Np1 -i ../gcc-&gcc-version;-fix_configure_for_target_native-1.patch</userinput></screen>

<para>The first patch disables the GCC <command>fixincludes</command>
script. This was briefly mentioned earlier, but a more in-depth
explanation of the fixincludes process is warranted here. Under normal
circumstances, the GCC <command>fixincludes</command> script scans the
system for header files that need to be fixed. It might find that some
Glibc header files on the host system need to be fixed, and will fix
them and put them in the GCC private include directory. In <xref
linkend="chapter-building-system"/>, after the newer Glibc has been
installed, this private include directory will be searched before the
system include directory.  This may result in GCC finding the fixed
headers from the host system, which most likely will not match the
Glibc version used for the LFS system.</para>

<para>The second patch changes GCC's default location of the dynamic
linker (typically <filename class="libraryfile">ld-linux.so.2</filename>). It also removes
<filename class="directory">/usr/include</filename> from GCC's include
search path. Patching now rather than adjusting the specs file after
installation ensures that the new dynamic linker is used during the
actual build of GCC. That is, all of the final (and temporary)
binaries created during the build will link against the new
Glibc.</para>

<para>The third patch allows gcc to build a complete cross-target</para>

<important><para>The above patches are critical in ensuring a
successful overall build. Do not forget to apply
them.</para></important>

<para>Now we will need to setup our StartFile Spec to the correct library
location:</para>

<screen>echo "
#undef STARTFILE_PREFIX_SPEC
#define STARTFILE_PREFIX_SPEC \"/tools/lib/\"" >> ../gcc-3.4.3/gcc/config/linux.h</screen>

<para>Now we will change cpp's search path not to look in /usr/include:</para>

<screen>sed -i '/#define STANDARD_INCLUDE_DIR/s@"/usr/include"@0@g'
cppdefault.c</screen>

<para>Create a separate build directory again:</para>

<screen><userinput>mkdir ../gcc-build
cd ../gcc-build</userinput></screen>

<para>Before starting to build GCC, remember to unset any environment
variables that override the default optimization flags.</para>

<para>Now prepare GCC for compilation:</para>

<screen><userinput>../gcc-&gcc-version;/configure --prefix=/tools \
    --build=${LFS_HOST} --host=${LFS_TARGET} --target=${LFS_TARGET} \
    --libexecdir=/tools/lib --with-local-prefix=/tools \
    --enable-long-long --enable-c99 --enable-shared \
    --enable-threads=posix --enable-__cxa_atexit \
    --disable-nls --enable-languages=c,c++</userinput></screen>

<para>The meaning of the new configure options:</para>

<variablelist>
<varlistentry>
<term><parameter>--enable-clocale=gnu</parameter></term>
<listitem><para>This option ensures the correct locale model is
selected for the C++ libraries under all circumstances. If the
configure script finds the <emphasis>de_DE</emphasis> locale installed, it will select the
correct gnu locale model. However, if the <emphasis>de_DE</emphasis> locale is not
installed, there is the risk of building Application Binary Interface
(ABI)-incompatible C++ libraries because the incorrect generic locale
model may be selected.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>--enable-threads=posix</parameter></term>
<listitem><para>This enables C++ exception handling for multi-threaded
code.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>--enable-__cxa_atexit</parameter></term>
<listitem><para>This option allows use of
<emphasis>__cxa_atexit</emphasis>, rather than
<emphasis>atexit</emphasis>, to register C++ destructors for local
statics and global objects.  This option is essential for fully
standards-compliant handling of destructors. It also effects the C++
ABI, and therefore results in C++ shared libraries and C++ programs
that are interoperable with other Linux
distributions.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>--enable-languages=c,c++</parameter></term>
<listitem><para>This option
ensures that both the C and C++ compilers are built.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>--disable-libstdcxx-pch</parameter></term>
<listitem><para>Do not build the pre-compiled header (PCH) for
<filename class="libraryfile">libstdc++</filename>. It takes up a lot of space,
and we have no use for it.</para></listitem>
</varlistentry>
</variablelist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>There is no need to use the <parameter>bootstrap</parameter>
target now because the compiler being used to compile this GCC was
built from the exact same version of the GCC sources used
earlier.</para>

<para>Install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

<sect2 role="content"><title/>
<para>Details on this package are located in <xref
linkend="contents-gcc" role="."/></para>
</sect2>

</sect1>

