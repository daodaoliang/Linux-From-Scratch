<qandaentry id="optimized-glibc-fail">
<question><para>My optimized build of glibc is failing
in spinlock.c</para></question>
<answer><para>It should be mentioned that glibc (and gcc and binutils)
are good places to not optimize.
The performance versus stability trade off is unusually poor
for these packages. But. . . .
</para></answer>
<answer><para>If you've specified a CFLAGS value like "-march=i686 -mcpu=686"
and you're getting an error like this:
<screen>spinlock.c: In function `__pthread_lock':
spinlock.c:107: inconsistent operand constraints in an `asm'
make[2]: *** [/usr/src/glibc-build/linuxthreads/spinlock.o] Error 1
make[2]: Leaving directory `/usr/src/glibc-2.2.4/linuxthreads'
make[1]: *** [linuxthreads/others] Error 2
make[1]: Leaving directory `/usr/src/glibc-2.2.4'
make: *** [all] Error 2
</screen>
It's because, unlike almost everything else, spinlock.c requires optimization.
You could set CFLAGS to something like "-march=i686 -mcpu=i686 -O2".
(Note the "-O2".)
But it is better to set optimizations in glibc-x.x.x/Makeconfig.
This is the relevant section of Makeconfig:
<screen># Default flags to pass the C compiler.
ifndef default_cflags
ifeq ($(release),stable)
default_cflags := <emphasis role="strong">-g -O2</emphasis>
else
default_cflags := -g -O
endif
endif
</screen>
And here is an example to adapt:
<screen># Default flags to pass the C compiler.
ifndef default_cflags
ifeq ($(release),stable)
default_cflags := <emphasis role="strong">-g0 -Os -march=i386 -mcpu=i386 -pipe</emphasis>
else
default_cflags := -g -O
endif
endif
</screen>
</para></answer>
</qandaentry>

