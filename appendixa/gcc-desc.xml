<sect2><title>Contents of GCC</title>

<para>Last checked against version &gcc-contversion;.</para>

<sect3><title>Program Files</title>
<para>c++, c++filt, cc (link to gcc), cc1, cc1plus, collect2, cpp, cpp0,
g++, gcc, gcov, protoize and unprotoize</para></sect3>

<sect3><title>Descriptions</title>

<sect4><title>cc, cc1, cc1plus, gcc</title>
<para>These are the C compiler.  A compiler translates source code in
text format to a format that a computer understands. After a source code 
file is compiled into an object file, a linker will create an executable 
file from one or more of these compiler generated object files.</para></sect4>

<sect4><title>c++, cc1plus, g++</title>
<para>These are the C++ compiler; the equivalent of cc and 
gcc etc.</para></sect4>

<sect4><title>c++filt</title>
<para>c++filt is used to demangle C++ symbols.</para></sect4>

<sect4><title>collect2</title>
<para>collect2 assists with the compilation of constructors.</para></sect4>

<sect4><title>cpp, cpp0</title>
<para>cpp pre-processes a source file, such as including
the contents of header files into the source file. It's a good idea to
not do this manually to save a lot of time. Someone just inserts a line
like #include &lt;filename&gt;. The preprocessor inserts the
contents of that file into the source file. That's one of the things a
preprocessor does.</para></sect4>

<sect4><title>gcov</title>
<para>gcov analyzes programs to help create more efficient, faster running
code through optimization.</para></sect4>

<sect4><title>protoize</title>
<para>protoize converts old-style pre-ANSI
functions or definitions to new-style ANSI C prototypes (the default file
for looking known ones up is
<filename>/usr/lib/gcc-lib/&lt;arch&gt;/&lt;version&gt;/SYSCALLS.c.X</filename>).</para></sect4>

<sect4><title>unprotoize</title>
<para>unprotoize converts prototypes
back to the original old-style pre-ANSI functions, doing a correct
job only when they were converted with protoize.</para></sect4>

</sect3>

<sect3><title>Library Files</title>
<para>libgcc.a, libiberty.a, libstdc++.[a,so]</para>

<sect4><title>libgcc</title>
<para>libgcc.a is a run-time support file for gcc. Most of the time, on most 
machines, libgcc.a is not actually necessary.</para></sect4>

<sect4><title>libiberty</title>
<para>libiberty is a collection of subroutines used by various GNU
programs including getopt, obstack, strerror, strtol and strtoul.</para></sect4>

<sect4><title>libstdc++</title>
<para>libstdc++ is the C++ library.  It is used by C++ programs and contains
functions that are frequently used in C++ programs. This way the
programmer doesn't have to write certain functions (such as writing a
string of text to the screen) from scratch every time he creates a
program.</para></sect4>

</sect3>

</sect2>

