In the subdirectory sbin/ symlinks have been setup to simpleinit and its
helper programs. After executing "./configure && make" in the top level 
directory of the source tree, you can test simpleinit 
and try out the boot system *before* you do "make install".

I recommend you do the test as an ordinary user and will assume you
do so. If you don't you will need to specify the "-u" switch to the commands
you execute (except for the ./simpleinit command!) to tell them that although 
you are the superuser you don't want to communicate with the main system 
init but rather with a user space version. 
Note however, that running user space init as root is not well-tested.
Just do it as a normal user. It's safer.

Note, that you need write permissions to the example directory tree. If you
unpacked the tarball as root, you should "chown -R user. example.files"
to make the example.files directory owned by the user account you want
to use for testing.

Before we can begin with the test, make sure your current working directory is
the one with the file you are currently reading. 
We begin by setting the INIT_ROOT environment variable.
This is not strictly necessary as it will default to the current directory
but it is better to do so because you might change to a different directory
which would cause problems.

export INIT_ROOT=`pwd`

Now in order to execute init's helper programs, we must set the PATH like 
this:

export PATH=$INIT_ROOT/sbin:$PATH

Now let's start init

> simpleinit &

You will see output similar to what you would see if you copied the directory
structure rooted in this directory to your system and rebooted. 
However, using the
sim-bins feature of new-boot the binaries will only be simulated by shell
functions. This means that you will see messages regarding the mounting of
filesystems for instance although no actual mounting takes place. 
As no priviledged commands are executed you can run this test as an 
ordinary user.

Note that seeing a [SKIP] message for "Speeding up /dev/hda" is normal. The
respective command has been commented out in the script. This has nothing to
do with user space testing. It would be perfectly safe to activate the line
because hdparm is also simulated via sim-bins. However, some careless person
might just put the hdparm script on his main system without changing the
parameters appropriately and that may be dangerous.

The simpleinit version we just started runs in the background (because we
used & after the command). This is done so that we can use the same console
for entering our commands as init uses for output. You could also start
init in the foreground and issue commands from a different console.

Now issue the command

> display-services

This will show you the service stack.

Now issue the command

> need -r

which will roll back all services. Note that the messages for the syslogd
and klogd daemons are not faked. The example setup really starts 2 daemons
(small shell scripts that behave like daemons) using loadproc and really 
stops them using killproc (see the example script 'functions' for details
on these functions).  Now execute

> telinit 2

which will start the services for runlevel 2. 
Now let's check up on our logging daemons:

> telinit logging status

Note that even if you run syslogd and klogd on your main system, only the
PIDs of the user space versions will be reported. The scripts ignore
daemons owned by other users. This also means that a malicious user who runs 
programs with the same name as system daemons can not confuse these scripts 
during shutdown. Much care has been taken to make these scripts as robust as 
possible.
Now tell the daemons to reinitialize themselves:

> telinit logging reload

Now do

> telinit single

to simulate shutting down to single user mode. Then do

> telinit runlevel.3

which will go to runlevel 3. Now do

> telinit 3

Nothing happens because we are already in runlevel 3. Now do

> display-services

> need -r hdparm
 
> display-services

You will see that the service stack is rolled back up to (but not
including) the hdparm service. Now issue the commands

> need ethernet

> display-services

You see that the ethernet script has been started. Repeat the last steps to
convince yourself that services are not started twice.

See the output from 

> telinit help

and the telinit(8) and initctl(8) manpages for details of these commands and
play around with them as much as you like.

Finally, do

ps axf

to find out the process id <pid> of your simpleinit and then

kill -INT <pid>

You could also use "fg" to make simpleinit run in the foreground and then
you can just press Ctrl-C which also sends a SIGINT.
This simulates the Ctrl-Alt-Del keypress. When you press Ctrl-Alt-Del
(DON'T TRY THAT NOW!!), the kernel sends SIGINT to the main system init just 
as you sent a SIGINT to your user space init.
When init receives the SIGINT signal, it will execute
the ctrlaltdel program specified in inttab. For this example installation this
just prints a message and rolls back the services. For your main installation
this is probably not what you want (although it's possible). Instead you would
usually call shutdown when Ctrl-Alt-Del is pressed.

Finally terminate init by doing

kill -QUIT <pid>

or just

kill <pid>

If init is running in the foreground, you can (if your system is set up
properly) use Ctrl-\ to send init the SIGQUIT signal and terminate init.

I hope you had fun with this test and the setup pleases you. If so, now is
the time to "make install" (read the INSTALL file for necessary precautions).
