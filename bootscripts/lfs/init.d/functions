#!/bin/sh
########################################################################
# Begin $rc_base/init.d/functions
#
# Description : Run Level Control Functions
#
# Authors     : Gerard Beekmans - gerard@linuxfromscratch.org
#
# Version     : 00.00
#
# Notes       : With code based on Matthias Benkmann's simpleinit-msb
#		http://winterdrache.de/linux/newboot/index.html
#
########################################################################

## Environmental setup
# Setup default values for environment
umask 022
export PATH="/bin:/usr/bin:/sbin:/usr/sbin"

## Default values for kill function
# Initial Stop Signal
STOPSIG="TERM"

# Fallback if STOPSIG does not stop a process in time (see KILLDELAY)
FALLBACK="KILL"

# Signal sent to running processes to refresh their configuration
RELOADSIG="HUP"

# Number of seconds between STOPSIG and FALLBACK when stopping processes
KILLDELAY="3"

# The path of known pid files (this is set in the bootscript if necessary)
PIDFILE=""

## Screen Dimentions
# Find current screen size
if [ -z "${COLUMNS}" ]
then
	COLUMNS=$(stty size)
	COLUMNS=${COLUMNS##* }
fi

# When using remote connections, such as a serial port, stty size returns 0
if [ "${COLUMNS}" = "0" ]
then 
	COLUMNS=80
fi

## Measurements for positioning result messages
COL=$((${COLUMNS} - 8))
WCOL=$((${COL} - 2))

## Set Cursur Position Commands, used via echo -e
SET_COL="\\033[${COL}G"      # at the $COL char
SET_WCOL="\\033[${WCOL}G"    # at the $WCOL char
CURS_UP="\\033[1A\\033[0G"   # Up one line, at the 0'th char

## Set color commands, used via echo -e
# Please consult `man console_codes for more information
# under the "ECMA-48 Set Graphics Rendition" section
#
# Warning, when switching from a 8bit to a 9bit font,
# the linux console will reinterpret the bold (1;) to
# the top 256 glyphs of the 9bit font.  This does
# not affect framebuffer consoles
NORMAL="\\033[0;39m"         # Standard console grey
SUCCESS="\\033[1;32m"        # Success is green
WARNING="\\033[1;33m"        # Warnings are yellow
FAILURE="\\033[1;31m"        # Failures are red
INFO="\\033[1;36m"           # Information is light cyan
BRACKET="\\033[1;34m"        # Brackets are blue

## Set screen and bootlog message values to zero
BOOTMESG=""        # text meant for the logfile
BOOTMESGPRN=""     # text meant for the console
CUR_LENGTH="0"      # the current line length
CHARS_LEFT="${WCOL}"      # avilible space on the current line
STRING_LENGTH="0"   # the length of the current message
BMSEP=""           # contains neline separated bootmessage
BMSEPCT=""         # used for character counts of each word in BMSEP
BMWORD=""          # last printed word before a newline when wrapping text

#*******************************************************************************
# Function - boot_mesg()
#
# Purpose:      Sending information from bootup scripts to the console
#
# Inputs:       $1 is the message
#               $2 is the colorcode for the console
#
# Outputs:      Standard Output
#
# Dependencies: - sed for parsing strings.
#	              - grep, for counting \n's in a variable.
#               
# Todo:         - This function was created for the purpose of storing
#               information to be passed to a bootup log and for better
#               formatting of text sent to the screen.  The logging support
#               now pushes messages to the local2 service which is now
#               configured by LFS defalut in syslog-ng.conf.  This also 
#               requires that /usr/bin/logger be moved to /bin.
#               Support for parallel bootscripts is not added *yet*...
#*******************************************************************************
boot_mesg()
{
	local ECHOPARM=""
	##### NOTE!!!! A single message cannot span two complete lines
	##### (longer than WCOL) or exceed 100 words.

	while true
	do
		case "${1}" in
			-n)
				ECHOPARM=" -n "
				shift 1
				;;
			-*)
				echo "Unknown Option: ${1}"
				return 1
				;;
			*)
				break
				;;
		esac
	done

	## Figure out the length of what is to be printed. 
	# This is effectivly eqivelent to wc -m.
	STRING_LENGTH="$(( `echo "${1}" | sed \
		-e 's,.,.,g' -e 'l 1' | grep -c \$` - 2 ))"

	# Append to BOOTMESG for logging
	BOOTMESG="${BOOTMESG} ${1}"

	# Find out how much room is left to work with
	CHARS_LEFT="$(( ${WCOL} - ${CUR_LENGTH} ))"

	# If the message doesn't exceed the remaining columns 
	# of the current line, just print it...
	if [ "${STRING_LENGTH}" -le "${CHARS_LEFT}" ]; then
		CUR_LENGTH="$(( ${CUR_LENGTH} + ${STRING_LENGTH} ))"
		BOOTMESGPRN="${1}"

		# Avoid a null value being passed to sed
		if [ "${STRING_LENGTH}" -eq "${CHARS_LEFT}" ]; then
			# set CUR_LENGTH to zero
			CUR_LENGTH="0"
		fi

	else
				
		## Do some adjustments to the output because it
		## it is too long to fit on one line

		# BMSEP is the boot message with each word 
		# on one line of it's own
		BMSEP=`echo "${1}" | sed 's/ /\\\n/g'`

		# To work proerly with unicode, each character 
		# is replaced with a single dot (.) for counting.
		### Note that this is still broken for Chinese, 
		### Japanese, and Korean because of characters 
		### that actually use two columns when printed 
		### to the screen.
		BMSEPCT=`echo -e "${BMSEP}" | sed 's/././g'`
						
		
		# keep adding the character count of each line
		# untill the count exceeds the value of CHARS_LEFT
		# There is a ceiling of 100 words!
		n="1"
		while [ "${n}" -lt "100" ]; do
			char_count="$(( `echo -e "${BMSEPCT}" |	\
				sed -n "${n}"'~0p' | sed 'l 1' | \
				grep -c \$` - 2 ))"
			if [ "$(( ${CUR_LENGTH} + ${char_count} ))" \
				-lt "${WCOL}" ]; then
				let n++
				CUR_LENGTH="$(( ${CUR_LENGTH} + ${char_count} + 1 ))"
			else
				let n--
				break;
			fi
		done

		# The number of words that will fit is now
		# represented by 'n'.  Find the nth word.
		BMWORD="$( echo -e "${BMSEP}" | sed -n "${n}"'~0p' )"

		# Get rid of the extra space
		BMWORD="${BMWORD} "

		# And format the message as needed.
		BOOTMESGPRN=`echo "${1}" | \
			sed "s/${BMWORD}/${BMWORD}\\\n/"`

		# Now, determine the length of the second line
		CUR_LENGTH=$(( `echo -e "${BOOTMESGPRN}" | sed -n '2~0p' | \
			sed -e 's,.,.,g' -e 'l 1' | grep -c \$` - 2 ))
	fi

	# Print the results to the screen
	echo ${ECHOPARM} -e "${2}${BOOTMESGPRN}"
	
	# if CUR_LENGTH was set to zero, then end the line
	if [ "${CUR_LENGTH}" == "0" ]; then
		echo ""	
	fi
}

boot_mesg_flush()
{
	# Do not log null messages
	if [ -z "${BOOTMESG}" ]
	then
		return 0
	else
		boot_log "${BOOTMESG}${@}"
	fi
	
	# Reset boot message buffers to keep from bleeding over again
	BOOTMESG=""
	BOOTMESGPRN=""
	CUR_LENGTH="0"
	CHARS_LEFT="${WCOL}"
	STRING_LENGTH="0"
	BMSEP=""
	BMSEPCT=""	
	BMWORD=""
}

boot_log()
{
	if [ -f /bin/logger ]; then
		/bin/logger -p local2.info -t bootlog "${@}"
	else
		return 0
	fi
}

echo_ok()
{
	echo -n -e "${CURS_UP}${SET_COL}${BRACKET}[${SUCCESS}  OK  ${BRACKET}]"
	echo -e "${NORMAL}"
	boot_mesg_flush "[  OK  ]"
}

echo_failure()
{
	echo -n -e "${CURS_UP}${SET_COL}${BRACKET}[${FAILURE} FAIL ${BRACKET}]"
	echo -e "${NORMAL}"
	boot_mesg_flush "[ FAIL ]"
}

echo_warning()
{
	echo -n -e "${CURS_UP}${SET_COL}${BRACKET}[${WARNING} WARN ${BRACKET}]"
	echo -e "${NORMAL}"
	boot_mesg_flush "[ WARN ]"
}

print_error_msg()
{
	echo_failure
	# $i is inherited by the rc script
	boot_log "\n\n${i} failed and exited with a return value of ${error_value}."
	boot_mesg_flush
	boot_mesg -n "FAILURE:\n\nYou should not be reading this error message.\n\n" ${FAILURE}
	boot_mesg -n " It means that an unforseen error took"
	boot_mesg -n " place in ${i}, which exited with a return value of"
	boot_mesg " ${error_value}.\n"
	boot_mesg_flush
	boot_mesg -n "If you're able to track this"
	boot_mesg -n " error down to a bug in one of the files provided by"
	boot_mesg -n " the LFS book, please be so kind to inform us at"
	boot_mesg " lfs-dev@linuxfromscratch.org.\n"
	boot_mesg_flush
	boot_mesg -n "Press Enter to continue..." ${INFO}
	boot_mesg "" ${NORMAL}
	read ENTER
}

check_script_status()
{
	# $i is inherited by the rc script
	if [ ! -f ${i} ]
	then
		boot_mesg "${i} is not a valid symlink." ${WARNING}
		echo_warning
		continue
	fi

	if [ ! -x ${i} ]
	then
		boot_mesg "${i} is not executable, skipping." ${WARNING}
		echo_warning
		continue
	fi
}

evaluate_retval()
{
	error_value="${?}"

	if [ ${error_value} = 0 ]
	then
		echo_ok
	else
		echo_failure
	fi

	# This prevents the 'An Unexpected Error Has Occurred' from trivial
	# errors.
	return 0
}

print_status()
{
	if [ "${#}" = "0" ]
	then
		echo "Usage: ${0} {success|warning|failure}"
		return 1
	fi

	boot_mesg_flush
	echo_warning

	case "${1}" in

		success)
			echo_ok
			;;

		warning)
			# Leave this extra case in becasue old scripts
			# may call it this way.
			case "${2}" in
				running)
					boot_mesg "Already running." ${WARNING}
					echo_warning
					;;
				not_running)
					boot_mesg "Not running." ${WARNING}
					echo_warning
					;;
				not_available)
					boot_mesg "Not available." ${WARNING}
					echo_warning
					;;
				*)
					# This is how it is supposed to
					# be called
					echo_warning
					;;
			esac
		;;

		failure)
			echo_failure
		;;

	esac

}

# Returns all of the pid #s for $1 process
getpids()
{
	# Setup Environment
	local lpids=""
	local pid=""
	pidlist=""
	nopid=""

	# If PIDFILE is set, then get the pidlist from there
	if [ -n "${PIDFILE}" ]
	then
		lpids="$(cat ${PIDFILE} 2>/dev/null)"
		if [ "${?}" = "0" ]
		then
			# Sometimes there may be a stale PIDFILE, verify 
			# that all pids are valid
			for pid in ${lpids}
			do
				kill -0 ${pid} 2>/dev/null && \
					pidlist="${pidlist} ${pid}"
			done

			if [ -z "${pidlist}" ]
			then
				nopid="0"
			else
				nopid="1"
			fi
		else
			nopid="0"
		fi

	# Else, get the pidlist from pidof
	else
		# Strip any thing after the program name for the value
		# to pass to pidof
		base="${1##*/}"
		local pid=""
		local lpids=""

		lpids=$(pidof ${base})
		# Use the return value of pidof above
		# if the list is empty then the process is not running and
		# the return value is 1, else nopid is false
		if [ "${?}" = "0" ]
		then
			nopid="1"
			for pid in ${lpids}
			do
				if [ "${pid}" -ne "$$" -a "${pid}" -ne "${PPID}" ]
				then 
					pidlist="${pidlist} ${pid}"
				fi
			done
		else
			nopid="0"
		fi
	fi
}

# Starts a program if it is currently not running
loadproc()
{
	if [ "${#}" = "0" ]
	then
		echo "Usage: loadproc {program}"
		exit 1
	fi

	getpids "${1}"

	if [ "${nopid}" = "0" ]; then
		"${@}"
			evaluate_retval
	else
		boot_mesg "Process ${1} already running." ${WARNING}
		echo_warning
	fi
}

# Stops a process if it is running
killproc()
{
	if [ -z "${PIDFILE}" -a -z "${#}" ]
	then
		echo "Usage: killproc [{program}] [-nomsg]"
		exit 1	
	fi

	getpids "${1}"

	# Send the STOPSIG to the running process list
	if [ -n "${pidlist}" ]
	then
		local pid=""
		for pid in ${pidlist}
		do
			kill -"${STOPSIG}" "${pid}" 2>/dev/null
			local delay="${KILLDELAY}"
			local dtime="0"
			# Give it time to exit based on KILLDELAY and break
			# out of the while so that unnecessary time is
			# not wated (KILLDELAY)
			# Setting a gracious KILLDELAY value has little
			# effect on execution time if things work
			# as expected
			while [ "${dtime}" -lt "${delay}" ]
			do
				kill -0 "${pid}" 2>/dev/null || break
				sleep 1
				dtime=$((${dtime}+1))
			done

			# Kill remaining pid's with fallback

			if [ -n "${FALLBACK}" ]
			then
				kill -${FALLBACK} ${pid} 2>/dev/null
			fi
		done

		# Check to see if anything is still here
		getpids "${1}"
		if [ "${nopid}" = "0" ]
		then
			failure=0

			if [ -n "${PIDFILE}" -a -e "${PIDFILE}" ]
			then
				rm -f "${PIDFILE}"
			fi

			# Base is inherited from getpids, if pidof was used
			if [ -n "${base}" -a -e "/var/run/$base.pid" ]
			then
				rm -f "/var/run/${base}.pid"
			fi
		else
			failure="1"
		fi

		(exit ${failure})

		if [ "${2}" != "-nomsg" ]
		then
			evaluate_retval
		fi
	else
		if [ "${2}" != "-nomsg" ]
		then
			boot_mesg "Process ${1} not running." ${WARNING}
			echo_warning
		fi
	fi
}

reloadproc()
{
	if [ "${#}" = "0" ]
	then
		echo "Usage: reloadproc [{program}]"
		exit 1
	fi

	getpids "${1}"

	if [ -n "${pidlist}" ]
	then
		failure="0"
		for pid in ${pidlist}
		do
			kill -"${RELOADSIG}" "${pid}" || failure="1"
		done

		(exit ${failure})
		evaluate_retval
	else
		boot_mesg "Process ${1} not running." ${WARNING}
		echo_warning
	fi
}

statusproc()
{
	if [ "${#}" = "0" ]
	then
		echo "Usage: statusproc {program}"
		exit 1
	fi

	getpids "${1}"

	if [ -n "${pidlist}" ]
	then
		echo -e -n "${INFO}"
		echo "${base} is running with Process ID(s) ${pidlist}."
		echo -e -n "${NORMAL}"
	else
		if [ -n "${base}" -a -e "/var/run/${base}.pid" ]
		then
			echo -e -n "${INFO}"
			echo "${1} is not running but/var/run/${base}.pid exists." ${WARNING}
			echo -e -n "${NORMAL}"
		else
			if [ -n "${PIDFILE}" -a -e "${PIDFILE}" ]
			then
				echo -e -n "${INFO}"
				echo "${1} is not running but ${PIDFILE} exists." ${WARNING}
				echo -e -n "${NORMAL}"
			else
				echo -e -n "${INFO}"
				echo "${1} is not running." ${INFO}
				echo -e -n "${NORMAL}"
			fi
		fi
	fi
}

# End $rc_base/init.d/functions
