#!/bin/sh
########################################################################
# Begin $rc_base/init.d/udev
#
# Description : Udev cold-plugging script
#
# Authors     : Zack Winkles
#
# Version     : 00.01
#
# Notes       :
#
########################################################################

. /etc/sysconfig/rc
. ${rc_functions}

case "${1}" in
	start)
		boot_mesg "Populating /dev with device nodes..."
		if ! grep -q '[[:space:]]sysfs' /proc/mounts; then
			echo_failure
			boot_mesg -n "FAILURE:\n\nUnable to create" ${FAILURE}
			boot_mesg -n " devices without a SysFS filesystem"
			boot_mesg -n "\n\nAfter you press Enter, this system"
			boot_mesg -n " will be halted and powered off."
			boot_mesg -n "\n\nPress Enter to continue..." ${INFO}
			boot_mesg "" ${NORMAL}
			read ENTER
			/etc/rc.d/init.d/halt stop
		fi

		# Mount a temporary file system over /dev, so that any devices
		# made or removed during this boot don't affect the next one.
		# The reason we don't write to mtab is because we don't ever
		# want /dev to be unavailable (such as by `umount -a').
		mount -n -t tmpfs tmpfs /dev -o mode=755
		if [ ${?} != 0 ]; then
			echo_failure
			boot_mesg -n "FAILURE:\n\nCannot mount a tmpfs" ${FAILURE}
			boot_mesg -n " onto /dev, this system will be halted."
			boot_mesg -n "\n\nAfter you press Enter, this system"
			boot_mesg -n " will be halted and powered off."
			boot_mesg -n "\n\nPress Enter to continue..." ${INFO}
			boot_mesg "" ${NORMAL}
			read ENTER
			/etc/rc.d/init.d/halt stop
		fi

		# Udev handles uevents itself, so we don't need to have
		# the kernel call out to any binary in response to them
		echo > /proc/sys/kernel/hotplug

		# Copy static device nodes to /dev
		cp -ar /lib/udev/devices/* /dev

		# Start the udev daemon to continually watch for, and act on,
		# uevents
		/sbin/udevd --daemon

		# Now traverse /sys in order to "coldplug" devices that have
		# already been discovered
		mkdir -p /dev/.udev/queue
		/sbin/udevtrigger

		# until we know how to do better, just wait for _all_ events 
		#to finish
		loop=300
		confirm=0
		while true ; do
			sleep 0.1
			test -d /dev/.udev/queue && confirm=0 || \
			confirm=$(( $confirm + 1 ))
			loop=$(( $loop - 1 ))
			test $loop -gt 0 || break
			test $confirm -lt 60 || break
		done
		> /dev/bug
		test "$loop" -gt 0
		failed="${?}"
		sleep 6
        	if test -s /dev/bug; then
                	mv /dev/bug /dev/bugreport
			failed="2"
		else
                	rm -f /dev/bug
        	fi
		(exit "${failed}")
		evaluate_retval

		if [ "${failed}" -eq "2" ]; then
			boot_mesg "Please paste the /dev/bugreport file to" ${FAILURE}
			boot_mesg "http://wiki.linuxfromscratch.org/lfs/ticket/1720"
			boot_mesg "Otherwise, the next version of LFS may be unbootable on your system!"
			echo_failure
			sleep 10
			exit 1
		fi

		;;

	*)
		echo "Usage ${0} {start}"
		exit 1
		;;
esac

# End $rc_base/init.d/udev
