<sect2><title>&nbsp;</title><para>&nbsp;</para></sect2>

<sect2>
<title>Glibc installation</title>

<para>Before starting to install Glibc, you must <userinput>cd</userinput>
into the <filename>glibc-&glibc-version;</filename> directory and unpack
Glibc-linuxthreads in that directory, not in <filename>/usr/src</filename> as
you would normally do.</para>

<note><para>We are going to run the test suite for Glibc in this chapter.
However, it's worth pointing out that the Glibc test suite we run in this
section is considered not as important as the one we run in Chapter 6.</para></note>

<para>This package is known to behave badly when you have changed its
default optimization flags (including the -march and -mcpu options).
Therefore, if you have defined any environment variables that override
default optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting
them when building Glibc.</para>

<para>Basically, compiling Glibc in any other way than the book suggests
is putting the stability of your system at risk.</para>

<para>Though it is a harmless message, the install stage of Glibc will
complain about the absence of <filename>/tools/etc/ld.so.conf</filename>.
Fix this annoying little error with:</para>

<para><screen><userinput>mkdir /tools/etc
touch /tools/etc/ld.so.conf</userinput></screen></para>

<para>Also, Glibc has a subtle problem when compiled with GCC 3.3.1.
Apply the following patch to fix this:</para>

<para><screen><userinput>patch -Np1 -i ../glibc-&glibc-sscanf-patch-version;.patch</userinput></screen></para>

<para>The Glibc documentation recommends building Glibc outside of the source
directory in a dedicated build directory:</para>

<para><screen><userinput>mkdir ../glibc-build
cd ../glibc-build</userinput></screen></para>

<para>Next, prepare Glibc to be compiled:</para>

<para><screen><userinput>../glibc-&glibc-version;/configure --prefix=/tools \
&nbsp;&nbsp;&nbsp;&nbsp;--disable-profile --enable-add-ons \
&nbsp;&nbsp;&nbsp;&nbsp;--with-headers=/tools/include \
&nbsp;&nbsp;&nbsp;&nbsp;--with-binutils=/tools/bin \
&nbsp;&nbsp;&nbsp;&nbsp;--without-gd</userinput></screen></para>

<para>The meaning of the configure options:</para>

<itemizedlist>
<listitem><para><userinput>--disable-profile</userinput>: This disables the
building of the libraries with profiling information. Omit this option if you
plan to do profiling.</para></listitem>

<listitem><para><userinput>--enable-add-ons</userinput>: This enables any
add-ons that were installed with Glibc, in our case Linuxthreads.</para></listitem>

<listitem><para><userinput>--with-binutils=/tools/bin</userinput> and
<userinput>--with-headers=/tools/include</userinput>: Strictly speaking
these switches are not required. But they ensure nothing can go wrong with
regard to what kernel headers and Binutils programs get used during the
Glibc build.</para></listitem>

<listitem><para><userinput> --without-gd</userinput>: This switch ensures
that we don't build the <userinput>memusagestat</userinput> program, which
strangely enough insists on linking against the host's libraries (libgd,
libpng, libz, and so forth).</para></listitem>
</itemizedlist>

<para>During this stage you might see the following warning:</para>

<blockquote><screen>configure: WARNING:
*** These auxiliary programs are missing or incompatible versions: msgfmt
*** some features will be disabled.
*** Check the INSTALL file for required versions.</screen></blockquote>

<para>The missing or incompatible <filename>msgfmt</filename> program is
generally harmless and shouldn't cause us any problems.</para>

<para>Continue with compiling the package:</para>

<para><screen><userinput>make
make check
make install</userinput></screen></para>

<para>The glibc make check process is highly dependent on certain functions
of your host operating system.  The most common is a host that fails to mount
a tmpfs filesystem at /dev/shm, which may cause glibc tests to fail.</para>

<para>The locales (used by Glibc to make your Linux system respond in a
different language) weren't installed when you ran the previous command,
so we have to do that ourselves now:</para>

<para><screen><userinput>make localedata/install-locales</userinput></screen></para>

<para>An alternative to running the previous command is to install only
those locales which you need or want. This can be achieved by using the
<userinput>localedef</userinput> command. Information on this can be
found in the <filename>INSTALL</filename> file in the
<filename>glibc-&glibc-version;</filename> tree. However, there are a
number of locales that are essential for the tests of future packages
to pass correctly, in particular, the libstdc++ tests from GCC.  The following 
instructions, in place of the install-locales command above, will install 
the minimum set of locales necessary for the tests to run successfully:</para>

<para><screen><userinput>mkdir -p /tools/lib/locale
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i ja_JP -f EUC-JP ja_JP</userinput></screen></para>

</sect2>

