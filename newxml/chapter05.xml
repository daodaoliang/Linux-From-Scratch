<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<chapter id="chapter05" xreflabel="Chapter 5">
  <title>Constructing a temporary system</title>
<?dbhtml filename="chapter05.html" dir="chapter05"?>
  <sect1 id="ch05-introduction">
    <title>Introduction</title>
<?dbhtml filename="introduction.html" dir="chapter05"?>
    <para>In this chapter we will compile and install a minimal
Linux system. This system will contain just enough tools to be able
to start constructing the final LFS system in the next chapter.</para>
    <para>The building of this minimal system is done in two steps: first we
build a brand-new and host-independent toolchain (compiler, assembler,
linker and libraries), and then use this to build all the other essential
tools.</para>
    <para>The files compiled in this chapter will be installed under the
<filename class="directory">$LFS/tools</filename> directory
to keep them separate from the files installed in the next chapter.
Since the packages compiled here are merely temporary, we don't want
them to pollute the soon-to-be LFS system.</para>
    <para>The key to learning what makes a Linux system work is to know
what each package is used for and why the user or the system needs it.
For this purpose a short summary of the content of each package is given
before the actual installation instructions. For a short description of
each program in a package, please refer to the corresponding section in
<xref linkend="appendixa"/>.</para>
    <para>The build instructions assume that you are using the bash shell. There
is also a general expectation that you have already unpacked the sources for a
package and have performed a <userinput>cd</userinput> into the unpacked source
directory before issuing the build commands.</para>
    <para>Several of the packages are patched before compilation, but only when
the patch is needed to circumvent a problem. Often the patch is needed in
both this and the next chapter, but sometimes in only one of them. Therefore,
don't worry when instructions for a downloaded patch seem to be missing.</para>
    <para>During the installation of most packages you will
see all kinds of compiler warnings scroll by on your screen. These are
normal and can be safely ignored. They are just what they say they are:
warnings -- mostly about deprecated, but not invalid, use of the C or C++
syntax. It's just that C standards have changed rather often and some
packages still use the older standard, which is not really a problem.</para>
    <para><emphasis>Unless</emphasis> told not to, you should normally delete the
source and build directories after installing each package -- for cleanness
sake and to save space.</para>
    <para>Before continuing, make sure the LFS environment variable is set up
properly by executing the following:</para>
    <screen>
      <userinput>echo $LFS</userinput>
    </screen>
    <para>Make sure the output shows the path to your LFS partition's mount
point, which is <filename class="directory">/mnt/lfs</filename> if you
followed our example.</para>
  </sect1>
  <sect1 id="ch05-toolchaintechnotes">
    <title>Toolchain technical notes</title>
<?dbhtml filename="toolchaintechnotes.html" dir="chapter05"?>
    <para>This section attempts to explain some of the rationale and technical
details behind the overall build method. It's not essential that you understand
everything here immediately. Most of it will make sense once you have performed
an actual build. Feel free to refer back here at any time.</para>
    <para>The overall goal of <xref linkend="chapter05"/> is to provide a sane,
temporary environment that we can chroot into, and from which we can produce a
clean, trouble-free build of the target LFS system in
<xref linkend="chapter06"/>. Along the way, we attempt to divorce ourselves
from the host system as much as possible, and in so doing build a
self-contained and self-hosted toolchain. It should be noted that the
build process has been designed in such a way so as to minimize the risks for
new readers and provide maximum educational value at the same time. In other
words, more advanced techniques could be used to build the system.</para>
    <important>
      <para>Before continuing, you really should be aware of the name of your working
platform, often also referred to as the <emphasis>target triplet</emphasis>. For
many folks the target triplet will be, for example:
<emphasis>i686-pc-linux-gnu</emphasis>. A simple way to determine your target
triplet is to run the <filename>config.guess</filename> script that comes with
the source for many packages. Unpack the Binutils sources and run the script:
<userinput>./config.guess</userinput> and note the output.</para>
      <para>You'll also need to be aware of the name of your platform's
<emphasis>dynamic linker</emphasis>, often also referred to as the
<emphasis>dynamic loader</emphasis>, not to be confused with the standard linker
<emphasis>ld</emphasis> that is part of Binutils. The dynamic linker is provided
by Glibc and has the job of finding and loading the shared libraries needed by a
program, preparing the program to run and then running it. For most folks, the
name of the dynamic linker will be <emphasis>ld-linux.so.2</emphasis>. On
platforms that are less prevalent, the name might be
<emphasis>ld.so.1</emphasis> and newer 64 bit platforms might even have
something completely different. You should be able to determine the name
of your platform's dynamic linker by looking in the
<filename class="directory">/lib</filename> directory on your host system. A
surefire way is to inspect a random binary from your host system by running:
<userinput>'readelf -l &lt;name of binary&gt; | grep interpreter'</userinput>
and noting the output. The authoritative reference covering all platforms is in
the <filename>shlib-versions</filename> file in the root of the Glibc source
tree.</para>
    </important>
    <para>Some key technical points of how the <xref linkend="chapter05"/> build
method works:</para>
    <itemizedlist>
      <listitem>
        <para>Similar in principle to cross compiling whereby tools installed
into the same prefix work in cooperation and thus utilize a little GNU
&quot;magic&quot;.</para>
      </listitem>
      <listitem>
        <para>Careful manipulation of the standard linker's library search
path to ensure programs are linked only against libraries we
choose.</para>
      </listitem>
      <listitem>
        <para>Careful manipulation of <userinput>gcc</userinput>'s
<emphasis>specs</emphasis> file to tell the compiler which target dynamic
linker will be used.</para>
      </listitem>
    </itemizedlist>
    <para>Binutils is installed first because both GCC and Glibc perform various
feature tests on the assembler and linker during their respective runs of
<userinput>./configure</userinput> to determine which software features to enable
or disable. This is more important than one might first realize. An incorrectly
configured GCC or Glibc can result in a subtly broken toolchain where the impact
of such breakage might not show up until near the end of the build of a whole
distribution. Thankfully, a test suite failure will usually alert us before too
much time is wasted.</para>
    <para>Binutils installs its assembler and linker into two locations,
<filename class="directory">/tools/bin</filename> and
<filename class="directory">/tools/$TARGET_TRIPLET/bin</filename>. In reality,
the tools in one location are hard linked to the other. An important facet of
the linker is its library search order. Detailed information can be obtained
from <userinput>ld</userinput> by passing it the <emphasis>--verbose</emphasis>
flag. For example: <userinput>'ld --verbose | grep SEARCH'</userinput> will
show you the current search paths and their order. You can see what files are
actually linked by <userinput>ld</userinput> by compiling a dummy program and
passing the <emphasis>--verbose</emphasis> switch. For example:
<userinput>'gcc dummy.c -Wl,--verbose 2&gt;&amp;1 | grep succeeded'</userinput>
will show you all the files successfully opened during the link.</para>
    <para>The next package installed is GCC and during its run of
<userinput>./configure</userinput> you'll see, for example:</para>
    <blockquote>
      <screen>checking what assembler to use... /tools/i686-pc-linux-gnu/bin/as
checking what linker to use... /tools/i686-pc-linux-gnu/bin/ld</screen>
    </blockquote>
    <para>This is important for the reasons mentioned above. It also demonstrates
that GCC's configure script does not search the $PATH directories to find which
tools to use. However, during the actual operation of <userinput>gcc</userinput>
itself, the same search paths are not necessarily used. You can find out which
standard linker <userinput>gcc</userinput> will use by running:
<userinput>'gcc -print-prog-name=ld'</userinput>.
Detailed information can be obtained from <userinput>gcc</userinput> by passing
it the <emphasis>-v</emphasis> flag while compiling a dummy program. For
example: <userinput>'gcc -v dummy.c'</userinput> will show you detailed
information about the preprocessor, compilation and assembly stages, including
<userinput>gcc</userinput>'s include search paths and their order.</para>
    <para>The next package installed is Glibc. The most important considerations for
building Glibc are the compiler, binary tools and kernel headers. The compiler
is generally no problem as Glibc will always use the <userinput>gcc</userinput>
found in a $PATH directory. The binary tools and kernel headers can be a little
more troublesome. Therefore we take no risks and use the available configure
switches to enforce the correct selections. After the run of
<userinput>./configure</userinput> you can check the contents of the
<filename>config.make</filename> file in the
<filename class="directory">glibc-build</filename> directory for all the
important details. You'll note some interesting items like the use of
<userinput>CC=&quot;gcc -B/tools/bin/&quot;</userinput> to control which binary tools are
used, and also the use of the <emphasis>-nostdinc</emphasis> and
<emphasis>-isystem</emphasis> flags to control the compiler's include search
path. These items help to highlight an important aspect of the Glibc package:
it is very self-sufficient in terms of its build machinery and generally does
not rely on toolchain defaults.</para>
    <para>After the Glibc installation, we make some adjustments to ensure that
searching and linking take place only within our <filename>/tools</filename>
prefix. We install an adjusted <userinput>ld</userinput>, which has a hard-wired
search path limited to <filename class="directory">/tools/lib</filename>. Then
we amend <userinput>gcc</userinput>'s specs file to point to our new dynamic
linker in <filename class="directory">/tools/lib</filename>. This last step is
<emphasis>vital</emphasis> to the whole process. As mentioned above, a
hard-wired path to a dynamic linker is embedded into every ELF shared
executable. You can inspect this by running:
<userinput>'readelf -l &lt;name of binary&gt; | grep interpreter'</userinput>.
By amending <userinput>gcc</userinput>'s specs file, we are ensuring that every
program compiled from here through the end of <xref linkend="chapter05"/> will
use our new dynamic linker in
<filename class="directory">/tools/lib</filename>.</para>
    <para>The need to use the new dynamic linker is also the reason why we apply the
Specs patch for the second pass of GCC. Failure to do so will result in the GCC
programs themselves having the name of the dynamic linker from the host system's
<filename class="directory">/lib</filename> directory embedded into them, which
would defeat our goal of getting away from the host.</para>
    <para>During the second pass of Binutils, we are able to utilize the
<emphasis>--with-lib-path</emphasis> configure switch to control
<userinput>ld</userinput>'s library search path. From this point onwards, the
core toolchain is self-contained and self-hosted. The remainder of the
<xref linkend="chapter05"/> packages all build against the new Glibc in
<filename class="directory">/tools</filename> and all is well.</para>
    <para>Upon entering the chroot environment in <xref linkend="chapter06"/>, the
first major package we install is Glibc, due to its self-sufficient nature that
we mentioned above. Once this Glibc is installed into
<filename class="directory">/usr</filename>, we perform a quick changeover of
the toolchain defaults, then proceed for real in building the rest of the
target <xref linkend="chapter06"/> LFS system.</para>
    <sect2>
      <title>Notes on static linking</title>
      <para>Most programs have to perform, beside their specific task, many rather
common and sometimes trivial operations. These include allocating memory,
searching directories, reading and writing files, string handling, pattern
matching, arithmetic and many other tasks. Instead of obliging each program to
reinvent the wheel, the GNU system provides all these basic functions in
ready-made libraries. The major library on any Linux system is
<emphasis>Glibc</emphasis>.</para>
      <para>There are two primary ways of linking the functions from a library to a
program that uses them: statically or dynamically. When a program is linked
statically, the code of the used functions is included in the executable,
resulting in a rather bulky program. When a program is dynamically linked, what
is included is a reference to the dynamic linker, the name of the library, and
the name of the function, resulting in a much smaller executable. (A third way
is to use the programming interface of the dynamic linker. See the
<emphasis>dlopen</emphasis> man page for more information.)</para>
      <para>Dynamic linking is the default on Linux and has three major advantages
over static linking. First, you need only one copy of the executable library
code on your hard disk, instead of having many copies of the same code included
into a whole bunch of programs -- thus saving disk space. Second, when several
programs use the same library function at the same time, only one copy of the
function's code is required in core -- thus saving memory space. Third, when a
library function gets a bug fixed or is otherwise improved, you only need to
recompile this one library, instead of having to recompile all the programs that
make use of the improved function.</para>
      <para>If dynamic linking has several advantages, why then do we statically link
the first two packages in this chapter? The reasons are threefold: historical,
educational, and technical. Historical, because earlier versions of LFS
statically linked every program in this chapter. Educational, because knowing
the difference is useful. Technical, because we gain an element of independence
from the host in doing so, meaning that those programs can be used
independently of the host system. However, it's worth noting that an overall
successful LFS build can still be achieved when the first two packages are
built dynamically.</para>
    </sect2>
  </sect1>
  <sect1 id="ch05-creatingtoolsdir">
    <title>Creating the $LFS/tools directory</title>
<?dbhtml filename="creatingtoolsdir.html" dir="chapter05"?>
    <para>All programs compiled in this chapter will be installed under <filename class="directory">$LFS/tools</filename> to keep them separate from the
programs compiled in the next chapter. The programs compiled here are only
temporary tools and won't be a part of the final LFS system and by keeping them
in a separate directory, we can later easily throw them away.</para>
    <para>If later you wish to search through the binaries of your system to see
what files they make use of or link against, then to make this searching easier
you may want to choose a unique name. Instead of the simple &quot;tools&quot; you could
use something like &quot;tools-for-lfs&quot;.</para>
    <para>Create the required directory by running the following:</para>
    <screen>
      <userinput>mkdir $LFS/tools</userinput>
    </screen>
    <para>The next step is to create a <filename>/tools</filename> symlink on
your host system. It will point to the directory we just created on the LFS
partition:</para>
    <screen>
      <userinput>ln -s $LFS/tools /</userinput>
    </screen>
    <para>This symlink enables us to compile our toolchain so that it always
refers to <filename>/tools</filename>, meaning that the compiler, assembler
and linker will work both in this chapter (when we are still using some tools
from the host) <emphasis>and</emphasis> in the next (when we are chrooted to
the LFS partition).</para>
    <note>
      <para>Study the above command closely. It can be confusing at first
glance. The <userinput>ln</userinput> command has several syntax variations,
so be sure to check the ln man page before reporting what you may think is an
error.</para>
    </note>
  </sect1>
  <sect1 id="ch05-addinguser">
    <title>Adding the user lfs</title>
<?dbhtml filename="addinguser.html" dir="chapter05"?>
    <para>When logged in as <emphasis>root</emphasis>, making a single mistake
can damage or even wreck your system. Therefore we recommend that you
build the packages in this chapter as an unprivileged user. You could
of course use your own user name,  but to make it easier to set up a clean
work environment we'll create a new user <emphasis>lfs</emphasis> and
use this one during the installation process. As <emphasis>root</emphasis>,
issue the following commands to add the new user:</para>
    <screen>
      <userinput>useradd -s /bin/bash -m lfs
passwd lfs</userinput>
    </screen>
    <para>Now grant this new user <emphasis>lfs</emphasis> full access to
<filename class="directory">$LFS/tools</filename> by giving it ownership
of the directory:</para>
    <screen>
      <userinput>chown lfs $LFS/tools</userinput>
    </screen>
    <para>If you made a separate working directory as suggested, give user
<emphasis>lfs</emphasis> ownership of this directory too:</para>
    <screen>
      <userinput>chown lfs $LFS/sources</userinput>
    </screen>
    <para>Next, login as user <emphasis>lfs</emphasis>. This can be done via a
virtual console, through a display manager, or with the following substitute
user command:</para>
    <screen>
      <userinput>su - lfs</userinput>
    </screen>
    <para>The &quot;<userinput>-</userinput>&quot; instructs <userinput>su</userinput> to
start a new, clean shell.</para>
  </sect1>
  <sect1 id="ch05-settingenviron">
    <title>Setting up the environment</title>
<?dbhtml filename="settingenvironment.html" dir="chapter05"?>
    <para>While logged in as user <emphasis>lfs</emphasis>, issue the
following commands to set up a good work environment:</para>
    <screen><userinput>cat &gt; ~/.bash_profile &lt;&lt; &quot;EOF&quot;</userinput>
set +h
umask 022
LFS=/mnt/lfs
LC_ALL=POSIX
PATH=/tools/bin:$PATH
export LFS LC_ALL PATH
unset CC CXX CPP LD_LIBRARY_PATH LD_PRELOAD
<userinput>EOF

source ~/.bash_profile</userinput></screen>
    <para>The <userinput>set +h</userinput> command turns off
<userinput>bash</userinput>'s hash function. Normally hashing is a useful
feature: <userinput>bash</userinput> uses a hash table to remember the
full pathnames of executable files to avoid searching the PATH time and time
again to find the same executable. However, we'd like the new tools to be
used as soon as they are installed.  By switching off the hash function, our
&quot;interactive&quot; commands (<userinput>make</userinput>,
<userinput>patch</userinput>, <userinput>sed</userinput>,
<userinput>cp</userinput> and so forth) will always use
the newest available version during the build process.</para>
    <para>Setting the user file-creation mask to 022 ensures that newly created
files and directories are only writable for their owner, but readable and
executable for anyone.</para>
    <para>The LFS variable should of course be set to the mount point you
chose.</para>
    <para>The LC_ALL variable controls the localization of certain programs,
making their messages follow the conventions of a specified country. If your
host system uses a version of Glibc older than 2.2.4,
having LC_ALL set to something other than &quot;POSIX&quot; or &quot;C&quot; during this chapter
may cause trouble if you exit the chroot environment and wish to return later.
By setting LC_ALL to &quot;POSIX&quot; (or &quot;C&quot;, the two are equivalent)  we ensure that
everything will work as expected in the chroot environment.</para>
    <para>We prepend <filename>/tools/bin</filename> to the standard PATH so
that, as we move along through this chapter, the tools we build will get used
during the rest of the building process.</para>
    <para>The CC, CXX, CPP, LD_LIBRARY_PATH and LD_PRELOAD environment variables all
have the potential to cause havoc with our Chapter 5 toolchain. We therefore
unset them to prevent any chance of this happening.</para>
    <para>Now, after sourcing the just-created profile, we're all set to begin
building the temporary tools that will support us in later chapters.</para>
  </sect1>
  <sect1 id="ch05-binutils-pass1">
    <title>Installing Binutils-2.14 - Pass 1</title>
<?dbhtml filename="binutils-pass1.html" dir="chapter05"?>
    <screen>Estimated build time:           1.0 SBU
Estimated required disk space:  194 MB</screen>
    <sect2>
      <title>Contents of Binutils</title>
<!-- <para>(Last checked against version &binutils-contversion;.)</para> -->
      <para>Binutils is a collection of software development tools containing a
linker, assembler and other tools to work with object files and
archives.</para>
      <para><emphasis>Installed programs</emphasis>: addr2line, ar, as, c++filt,
gprof, ld, nm, objcopy, objdump, ranlib, readelf, size, strings and
strip</para>
      <para><emphasis>Installed libraries</emphasis>: libiberty.a, libbfd.[a,so] and
libopcodes.[a,so]</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Binutils Installation Dependencies</title>
<!-- <para>(Last checked against version &binutils-depversion;.)</para> -->
      <para>Binutils depends on: Bash, Coreutils, Diffutils, GCC, Gettext,
Glibc, Grep, Make, Perl, Sed, Texinfo.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Binutils</title>
      <para>It is important that Binutils be the first package to get compiled,
because both Glibc and GCC perform various tests on the available linker and
assembler to determine which of their own features to enable.</para>
      <note>
        <para>Even though Binutils is an important toolchain package, we are not
going to run the test suite at this early stage. First, the test suite framework
is not yet in place and second, the programs from this first pass will soon be
overwritten by those installed in the second pass.</para>
      </note>
      <para>This package is known to behave badly when you have changed its default
optimization flags (including the -march and -mcpu options). Therefore, if
you have defined any environment variables that override default
optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting or
modifying them when building Binutils.</para>
      <para>The Binutils documentation recommends building Binutils outside of the
source directory in a dedicated build directory:</para>
      <screen>
        <userinput>mkdir ../binutils-build
cd ../binutils-build</userinput>
      </screen>
      <note>
        <para>If you want the SBU values listed in the rest of the book to be of
any use, you will have to measure the time it takes to build this package. To
achieve this easily, you could do something like:
<userinput>time { ./configure ... &amp;&amp; ... &amp;&amp; ... &amp;&amp; make install; }</userinput>.</para>
      </note>
      <para>Now prepare Binutils for compilation:</para>
      <screen>
        <userinput>../binutils-2.14/configure \
    --prefix=/tools --disable-nls</userinput>
      </screen>
      <para>The meaning of the configure options:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>--prefix=/tools</userinput>: This tells the
configure script to prepare to install the Binutils programs in the
<filename>/tools</filename> directory.</para>
        </listitem>
        <listitem>
          <para><userinput>--disable-nls</userinput>: This disables
internationalization (a word often shortened to i18n). We don't need this
for our static programs and <emphasis>nls</emphasis> often causes problems
when linking statically.</para>
        </listitem>
      </itemizedlist>
      <para>Continue with compiling the package:</para>
      <screen>
        <userinput>make configure-host
make LDFLAGS=&quot;-all-static&quot;</userinput>
      </screen>
      <para>The meaning of the make parameters:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>configure-host</userinput>: This forces all the
subdirectories to be configured immediately. A statically linked build will
fail without it. We therefore use this option to work around the
problem.</para>
        </listitem>
        <listitem>
          <para><userinput>LDFLAGS=&quot;-all-static&quot;</userinput>: This tells the
linker that all the Binutils programs should be linked statically. However,
strictly speaking, <userinput>&quot;-all-static&quot;</userinput> is first passed to the
<emphasis>libtool</emphasis> program which then passes
<userinput>&quot;-static&quot;</userinput> on to the linker.</para>
        </listitem>
      </itemizedlist>
      <para>And install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
      <para>Now prepare the linker for the &quot;locking in&quot; of Glibc later on:</para>
      <screen>
        <userinput>make -C ld clean
make -C ld LDFLAGS=&quot;-all-static&quot; LIB_PATH=/tools/lib</userinput>
      </screen>
      <para>The meaning of the make parameters:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>-C ld clean</userinput>: This tells the make program
to remove all the compiled files, but only in the <filename>ld</filename>
subdirectory.</para>
        </listitem>
        <listitem>
          <para><userinput>-C ld LDFLAGS=&quot;-all-static&quot; LIB_PATH=/tools/lib</userinput>:
This option rebuilds everything in the <filename>ld</filename> subdirectory.
Specifying the LIB_PATH makefile variable on the command line allows us to
override the default value and have it point to our temporary tools location.
The value of this variable specifies the linker's default library search path.
You'll see how this preparation is used later on in the
chapter.</para>
        </listitem>
      </itemizedlist>
<!-- HACK - Force some whitespace to appease tidy -->
      <literallayout/>
      <warning>
        <para>Do not yet remove the Binutils build and source directories. You
will need them again in their current state a bit further on in this
chapter.</para>
      </warning>
<!-- HACK - Force some whitespace to appease tidy -->
      <literallayout/>
    </sect2>
  </sect1>
  <sect1 id="ch05-gcc-pass1">
    <title>Installing GCC-3.3.2 - Pass 1</title>
<?dbhtml filename="gcc-pass1.html" dir="chapter05"?>
    <screen>Estimated build time:           4.4 SBU
Estimated required disk space:  300 MB</screen>
    <sect2>
      <title>Contents of GCC</title>
<!-- <para>(Last checked against version &gcc-contversion;.)</para> -->
      <para>The GCC package contains the GNU compiler collection, including
the C and C++ compilers.</para>
      <para><emphasis>Installed programs</emphasis>: c++, cc (link to gcc),
cc1, cc1plus, collect2, cpp, g++, gcc, gccbug, and gcov</para>
      <para><emphasis>Installed libraries</emphasis>: libgcc.a, libgcc_eh.a,
libgcc_s.so, libstdc++.[a,so] and libsupc++.a</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>GCC Installation Dependencies</title>
<!-- <para>(Last checked against version &gcc-depversion;.)</para> -->
      <para>GCC depends on: Bash, Binutils, Coreutils, Diffutils, Findutils,
Gawk, Gettext, Glibc, Grep, Make, Perl, Sed, Texinfo.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of GCC</title>
      <para>Unpack only the GCC-core tarball, as we won't be needing a C++ compiler
for the moment.</para>
      <note>
        <para>Even though GCC is an important toolchain package, we are not
going to run the test suite at this early stage. First, the test suite framework
is not yet in place and second, the programs from this first pass will soon be
overwritten by those installed in the second pass.</para>
      </note>
      <para>This package is known to behave badly when you have changed its
default optimization flags (including the -march and -mcpu options).
Therefore, if you have defined any environment variables that override
default optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting
or modifying them when building GCC.</para>
      <para>The GCC documentation recommends building GCC outside of the source
directory in a dedicated build directory:</para>
      <screen>
        <userinput>mkdir ../gcc-build
cd ../gcc-build</userinput>
      </screen>
      <para>Prepare GCC for compilation:</para>
      <screen>
        <userinput>../gcc-3.3.2/configure --prefix=/tools \
    --with-local-prefix=/tools \
    --disable-nls --enable-shared \
    --enable-languages=c</userinput>
      </screen>
      <para>The meaning of the configure options:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>--with-local-prefix=/tools</userinput>:  The
purpose of this switch is to remove <filename>/usr/local/include</filename>
from <userinput>gcc</userinput>'s include search path. This is not absolutely
essential; however, we want to try to minimize the influence of the host
system, thus making this a sensible thing to do.</para>
        </listitem>
        <listitem>
          <para><userinput>--enable-shared</userinput>: This switch may
seem counter-intuitive at first. But using it allows the building of
<filename>libgcc_s.so.1</filename> and <filename>libgcc_eh.a</filename>, and
having <filename>libgcc_eh.a</filename> available ensures that the configure
script for Glibc (the next package we compile) produces the proper results.
Note that the <userinput>gcc</userinput> binaries will still be linked
statically, as this is controlled by the <userinput>-static</userinput>
value of BOOT_LDFLAGS further on.</para>
        </listitem>
        <listitem>
          <para><userinput>--enable-languages=c</userinput>: This option
ensures that only the C compiler is built. The option is only needed when you
have downloaded and unpacked the full GCC tarball.</para>
        </listitem>
      </itemizedlist>
      <para>Continue with compiling the package:</para>
      <screen>
        <userinput>make BOOT_LDFLAGS=&quot;-static&quot; bootstrap</userinput>
      </screen>
      <para>The meaning of the make parameters:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>BOOT_LDFLAGS=&quot;-static&quot;</userinput>: This tells
GCC to link its programs statically.</para>
        </listitem>
        <listitem>
          <para><userinput>bootstrap</userinput>: This target doesn't just
compile GCC, but compiles it several times. It uses the programs compiled in
a first round to compile itself a second time, and then again a third time.
It then compares these second and third compiles to make sure it can
reproduce itself flawlessly, which most probably means that it was
compiled correctly.</para>
        </listitem>
      </itemizedlist>
      <para>And install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
      <para>As a finishing touch we'll create the <filename class="symlink">/tools/bin/cc</filename> symlink. Many programs and
scripts run <userinput>cc</userinput> instead of <userinput>gcc</userinput>,
a thing meant to keep programs generic and therefore usable on all kinds of
Unix systems. Not everybody has the GNU C compiler installed. Simply running
<userinput>cc</userinput> leaves the system administrator free to decide what
C compiler to install, as long as there's a symlink pointing to it:</para>
      <screen>
        <userinput>ln -sf gcc /tools/bin/cc</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-kernel-headers">
    <title>Installing Linux-2.4.22 headers</title>
<?dbhtml filename="kernel-headers.html" dir="chapter05"?>
    <screen>Estimated build time:           0.1 SBU
Estimated required disk space:  186 MB</screen>
    <sect2>
      <title>Contents of Linux</title>
<!-- <para>(Last checked against version &kernel-contversion;.)</para> -->
      <para>The Linux kernel is at the core of every Linux system. It's what makes
Linux tick. When a computer is turned on and boots a Linux system, the
very first piece of Linux software that gets loaded is the kernel. The
kernel initializes the system's hardware components: serial ports, parallel
ports, sound cards, network cards, IDE controllers, SCSI controllers and a
lot more. In a nutshell the kernel makes the hardware available so that the
software can run.</para>
      <para><emphasis>Installed files</emphasis>: the kernel and the kernel
headers</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Linux Installation Dependencies</title>
<!-- <para>(Last checked against version &kernel-depversion;.)</para> -->
      <para>Linux depends on: Bash, Binutils, Coreutils, Findutils,
GCC, Glibc, Grep, Gzip, Make, Modutils, Perl, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of the kernel headers</title>
      <para>As some packages need to refer to the kernel header files, we're going
to unpack the kernel archive now, set it up, and copy the required files to a
place where <userinput>gcc</userinput> can later find them.</para>
      <para>Prepare for the header installation with:</para>
      <screen>
        <userinput>make mrproper</userinput>
      </screen>
      <para>This ensures that the kernel tree is absolutely clean. The kernel team
recommends that this command be issued prior to <emphasis>each</emphasis> kernel
compilation. You shouldn't rely on the source tree being clean after
untarring.</para>
      <para>Create the <filename>include/linux/version.h</filename> file:</para>
      <screen>
        <userinput>make include/linux/version.h</userinput>
      </screen>
      <para>Create the platform-specific <filename>include/asm</filename>
symlink:</para>
      <screen>
        <userinput>make symlinks</userinput>
      </screen>
      <para>Install the platform-specific header files:</para>
      <screen>
        <userinput>mkdir /tools/include/asm
cp include/asm/* /tools/include/asm
cp -R include/asm-generic /tools/include</userinput>
      </screen>
      <para>Install the cross-platform kernel header files:</para>
      <screen>
        <userinput>cp -R include/linux /tools/include</userinput>
      </screen>
      <para>There are a few kernel header files which make use of the
<filename>autoconf.h</filename> header file. Since we do not yet configure the
kernel, we need to create this file ourselves in order to avoid compilation
failures. Create an empty <filename>autoconf.h</filename> file:</para>
      <screen>
        <userinput>touch /tools/include/linux/autoconf.h</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-glibc">
    <title>Installing Glibc-2.3.2</title>
<?dbhtml filename="glibc.html" dir="chapter05"?>
    <screen>Estimated build time:           11.8 SBU
Estimated required disk space:  800 MB</screen>
    <sect2>
      <title>Contents of Glibc</title>
<!-- <para>(Last checked against version &glibc-contversion;.)</para> -->
      <para>Glibc is the C library that provides the system calls and basic
functions such as open, malloc, printf, etc. The C library is used by all
dynamically linked programs.</para>
      <para><emphasis>Installed programs</emphasis>: catchsegv, gencat, getconf,
getent, glibcbug, iconv, iconvconfig, ldconfig, ldd, lddlibc4, locale,
localedef, mtrace, nscd, nscd_nischeck, pcprofiledump, pt_chown, rpcgen,
rpcinfo, sln, sprof, tzselect, xtrace, zdump and zic</para>
      <para><emphasis>Installed libraries</emphasis>: ld.so, libBrokenLocale.[a,so],
libSegFault.so, libanl.[a,so], libbsd-compat.a, libc.[a,so], libc_nonshared.a,
libcrypt.[a,so], libdl.[a,so], libg.a, libieee.a, libm.[a,so], libmcheck.a,
libmemusage.so, libnsl.a, libnss_compat.so, libnss_dns.so, libnss_files.so,
libnss_hesiod.so, libnss_nis.so, libnss_nisplus.so, libpcprofile.so,
libpthread.[a,so], libresolv.[a,so], librpcsvc.a, librt.[a,so], libthread_db.so
and libutil.[a,so]</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Glibc Installation Dependencies</title>
<!-- <para>(Last checked against version &glibc-depversion;.)</para> -->
      <para>Glibc depends on: Bash, Binutils, Coreutils, Diffutils,
Gawk, GCC, Gettext, Grep, Make, Perl, Sed, Texinfo.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Glibc installation</title>
      <para>Before starting to install Glibc, you must <userinput>cd</userinput>
into the <filename>glibc-2.3.2</filename> directory and unpack
Glibc-linuxthreads in that directory, not in the directory where you usually
unpack all the sources.</para>
      <note>
        <para>We are going to run the test suite for Glibc in this chapter.
However, it's worth pointing out that running the Glibc test suite here
is considered not as important as running it in
<xref linkend="chapter06"/>.</para>
      </note>
      <para>This package is known to behave badly when you have changed its
default optimization flags (including the -march and -mcpu options).
Therefore, if you have defined any environment variables that override
default optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting
them when building Glibc.</para>
      <para>Basically, compiling Glibc in any other way than the book suggests
is putting the stability of your system at risk.</para>
      <para>Though it is a harmless message, the install stage of Glibc will
complain about the absence of <filename>/tools/etc/ld.so.conf</filename>.
Fix this annoying little warning with:</para>
      <screen>
        <userinput>mkdir /tools/etc
touch /tools/etc/ld.so.conf</userinput>
      </screen>
      <para>Also, Glibc has a subtle problem when compiled with GCC 3.3.2.
Apply the following patch to fix this:</para>
      <screen>
        <userinput>patch -Np1 -i ../glibc-2.3.2-sscanf-1.patch</userinput>
      </screen>
      <para>The Glibc documentation recommends building Glibc outside of the source
directory in a dedicated build directory:</para>
      <screen>
        <userinput>mkdir ../glibc-build
cd ../glibc-build</userinput>
      </screen>
      <para>Next, prepare Glibc for compilation:</para>
      <screen>
        <userinput>../glibc-2.3.2/configure --prefix=/tools \
    --disable-profile --enable-add-ons \
    --with-headers=/tools/include \
    --with-binutils=/tools/bin \
    --without-gd</userinput>
      </screen>
      <para>The meaning of the configure options:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>--disable-profile</userinput>: This disables the
building of the libraries with profiling information. Omit this option if you
plan to do profiling.</para>
        </listitem>
        <listitem>
          <para><userinput>--enable-add-ons</userinput>: This enables any
add-ons that were installed with Glibc, in our case Linuxthreads.</para>
        </listitem>
        <listitem>
          <para><userinput>--with-binutils=/tools/bin</userinput> and
<userinput>--with-headers=/tools/include</userinput>: Strictly speaking
these switches are not required. But they ensure nothing can go wrong with
regard to what kernel headers and Binutils programs get used during the
Glibc build.</para>
        </listitem>
        <listitem>
          <para><userinput> --without-gd</userinput>: This switch ensures
that we don't build the <userinput>memusagestat</userinput> program, which
strangely enough insists on linking against the host's libraries (libgd,
libpng, libz, and so forth).</para>
        </listitem>
      </itemizedlist>
      <para>During this stage you might see the following warning:</para>
      <blockquote>
        <screen>configure: WARNING:
*** These auxiliary programs are missing or incompatible versions: msgfmt
*** some features will be disabled.
*** Check the INSTALL file for required versions.</screen>
      </blockquote>
      <para>The missing or incompatible <filename>msgfmt</filename> program is
generally harmless, but it's believed it can sometimes cause problems when
running the test suite.</para>
      <para>Compile the package:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>Run the test suite:</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>The Glibc test suite is highly dependent on certain functions of your host
system, in particular the kernel. Additionally, here in this chapter some tests
can be adversely affected by existing tools or environmental issues on the host
system. Of course, these won't be a problem when we run the Glibc test suite
inside the chroot environment of <xref linkend="chapter06"/>. In general, the
Glibc test suite is always expected to pass. However, as mentioned above, some
failures are unavoidable in certain circumstances. Here is a list of the most
common issues we are aware of:</para>
      <itemizedlist>
        <listitem>
          <para>The <emphasis>math</emphasis> tests sometimes fail when running
on systems where the CPU is not a relatively new genuine Intel or authentic AMD.
Certain optimization settings are also known to be a factor here.</para>
        </listitem>
        <listitem>
          <para>The <emphasis>gettext</emphasis> test sometimes fails due to
host system issues. The exact reasons are not yet clear.</para>
        </listitem>
        <listitem>
          <para>The <emphasis>atime</emphasis> test sometimes fails when the
LFS partition is mounted with the <emphasis>noatime</emphasis> option, or due
to other file system quirks.</para>
        </listitem>
        <listitem>
          <para>The <emphasis>shm</emphasis> test might fail when the host
system is running the devfs file system but doesn't have the tmpfs file system
mounted at <filename>/dev/shm</filename> due to lack of support for tmpfs in
the kernel.</para>
        </listitem>
        <listitem>
          <para>When running on older and slower hardware, some tests might
fail due to test timeouts being exceeded.</para>
        </listitem>
      </itemizedlist>
      <para>In summary, don't worry too much if you see Glibc test suite failures
here in this chapter. The Glibc in <xref linkend="chapter06"/> is the one we'll
ultimately end up using so that is the one we would really like to see pass.
But please keep in mind, even in <xref linkend="chapter06"/> some failures
could still occur -- the <emphasis>math</emphasis>
tests for example. When experiencing a failure, make a note of it, then
continue by reissuing the <userinput>make check</userinput>. The test suite
should pick up where it left off and continue on. You can circumvent this
stop-start sequence by issuing a <userinput>make -k check</userinput>. But if
you do that, be sure to log the output so that you can later peruse the log
file and examine the total number of failures.</para>
      <para>Now install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
      <para>Different countries and cultures have varying conventions for how to
communicate. These conventions range from very simple ones, such as the format
for representing dates and times, to very complex ones, such as the language
spoken. The &quot;internationalization&quot; of GNU programs works by means of
<emphasis>locales</emphasis>. We'll install the Glibc locales now:</para>
      <screen>
        <userinput>make localedata/install-locales</userinput>
      </screen>
      <para>An alternative to running the previous command is to install only
those locales which you need or want. This can be achieved by using the
<userinput>localedef</userinput> command. Information on this can be
found in the <filename>INSTALL</filename> file in the
<filename>glibc-2.3.2</filename> source. However, there are a number
of locales that are essential for the tests of future packages to pass, in
particular, the <emphasis>libstdc++</emphasis> tests from GCC.  The following
instructions, instead of the install-locales target above, will install
the minimum set of locales necessary for the tests to run successfully:</para>
      <screen>
        <userinput>mkdir -p /tools/lib/locale
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i ja_JP -f EUC-JP ja_JP</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-locking-glibc">
    <title>&quot;Locking in&quot; Glibc</title>
<?dbhtml filename="lockingglibc.html" dir="chapter05"?>
    <para>Now that the temporary C libraries have been installed, we want all
the tools compiled in the rest of this chapter to be linked against these
libraries. To accomplish this, we need to adjust the linker and the compiler's
specs file.</para>
    <para>First install the adjusted linker by running the following from within
the <filename class="directory">binutils-build</filename> directory:</para>
    <screen>
      <userinput>make -C ld install</userinput>
    </screen>
    <para>The linker was adjusted a little while back, at the end of the first
pass of Binutils. From this point onwards everything will link <emphasis>only
</emphasis> against the libraries in <filename>/tools/lib</filename>.</para>
    <note>
      <para>If you somehow missed the earlier warning to retain the Binutils
source and build directories from the first pass or otherwise accidentally
deleted them or just don't have access to them, don't worry, all is not lost.
Just ignore the above command. The result is a small chance of subsequent
programs linking against libraries on the host. This is not ideal, however,
it's not a major problem. The situation is corrected when we install the
second pass of Binutils later on.</para>
    </note>
    <para>Now that the adjusted linker is installed, you have to remove the
Binutils build and source directories.</para>
    <para>The next thing to do is to amend our GCC specs file so that it points
to the new dynamic linker. A simple sed will accomplish this:</para>
<!-- Ampersands are needed to allow cut and paste -->
    <screen>
      <userinput>SPECFILE=/tools/lib/gcc-lib/*/*/specs &amp;&amp;
sed -e 's@ /lib/ld-linux.so.2@ /tools/lib/ld-linux.so.2@g' \
    $SPECFILE &gt; tempspecfile &amp;&amp;
mv -f tempspecfile $SPECFILE &amp;&amp;
unset SPECFILE</userinput>
    </screen>
    <para>We recommend that you cut-and-paste the above rather than try and type it
all in. Or you can edit the specs file by hand if you want to: just replace any
occurrence of &quot;/lib/ld-linux.so.2&quot; with &quot;/tools/lib/ld-linux.so.2&quot;.</para>
    <important>
      <para>If you are working on a platform where the name of the dynamic
linker is something other than <filename>ld-linux.so.2</filename>, you
<emphasis>must</emphasis> substitute <filename>ld-linux.so.2</filename> with the
name of your platform's dynamic linker in the above commands. Refer back to
<xref linkend="ch05-toolchaintechnotes"/> if necessary.</para>
    </important>
    <para>Lastly, there is a possibility that some include files from the host
system have found their way into GCC's private include dir. This can happen
because of GCC's &quot;fixincludes&quot; process which runs as part of the GCC build.
We'll explain more about this further on in this chapter.  For now, run the
following commands to eliminate this possibility:</para>
    <screen>
      <userinput>rm -f /tools/lib/gcc-lib/*/*/include/{pthread.h,bits/sigthread.h}</userinput>
    </screen>
<!-- HACK - Force some whitespace to appease tidy -->
    <literallayout/>
    <caution>
      <para>It is imperative at this point to stop and ensure that the basic
functions (compiling and linking) of the new toolchain are working as expected.
For this we are going to perform a simple sanity check:</para>
      <screen>
        <userinput>echo 'main(){}' &gt; dummy.c
gcc dummy.c
readelf -l a.out | grep ': /tools'</userinput>
      </screen>
      <para>If everything is working correctly, there should be no errors, and the
output of the last command will be:</para>
      <blockquote>
        <screen>[Requesting program interpreter: /tools/lib/ld-linux.so.2]</screen>
      </blockquote>
      <para>If you did not receive the output as shown above, or received no output at
all, then something is seriously wrong. You will need to investigate and retrace
your steps to find out where the problem is and correct it. There is no point in
continuing until this is done. Most likely something went wrong with the specs
file amendment above. Note especially that <filename>/tools/lib</filename>
appears as the prefix of our dynamic linker. Of course, if you are working on a
platform where the name of the dynamic linker is something other than
<filename>ld-linux.so.2</filename>, then the output will be slightly
different.</para>
      <para>Once you are satisfied that all is well, clean up the test files:</para>
      <screen>
        <userinput>rm dummy.c a.out</userinput>
      </screen>
    </caution>
<!-- HACK - Force some whitespace to appease tidy -->
    <literallayout/>
    <para>This completes the installation of the self-contained toolchain, and it
can now be used to build the rest of the temporary tools.</para>
  </sect1>
  <sect1 id="ch05-tcl">
    <title>Installing Tcl-8.4.4</title>
<?dbhtml filename="tcl.html" dir="chapter05"?>
    <screen>Estimated build time:           0.9 SBU
Estimated required disk space:  23 MB</screen>
    <sect2>
      <title>Contents of Tcl</title>
<!-- <para>(Last checked against version &tcl-contversion;.)</para> -->
      <para>The Tcl package contains the Tool Command Language.</para>
      <para><emphasis>Installed programs</emphasis>: tclsh (link to tclsh8.4),
tclsh8.4</para>
      <para><emphasis>Installed library</emphasis>: libtcl8.4.so</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Tcl Installation Dependencies</title>
<!-- <para>(Last checked against version &tcl-depversion;.)</para> -->
      <para>Tcl depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Tcl</title>
      <para>This package and the next two are only installed to be able to run the
test suites for GCC and Binutils. Installing three packages just for testing
purposes may seem like overkill, but it is very reassuring, if not essential,
to know that our most important tools are working properly.</para>
      <para>Prepare Tcl for compilation:</para>
      <screen>
        <userinput>cd unix
./configure --prefix=/tools</userinput>
      </screen>
      <para>Build the package:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly. However, the Tcl test suite in this
chapter is known to experience failures under certain host conditions that are
not fully understood. Therefore, test suite failures here are not surprising,
but are not considered critical. Should you choose to run the test suite, the
following command will do so:</para>
      <screen>
        <userinput>TZ=UTC make test</userinput>
      </screen>
      <para>The meaning of the make parameter:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>TZ=UTC</userinput>: This sets the time zone to
Coordinated Universal Time (UTC) also known as Greenwich Mean Time (GMT), but
only for the duration of the test suite run. This ensures the clock tests are
exercised correctly. More information on the TZ environment variable is
available later on in <xref linkend="chapter07"/>.</para>
        </listitem>
      </itemizedlist>
      <para>Sometimes, package test suites will give false failures.  You can
consult the LFS Wiki at <ulink url="http://wiki.linuxfromscratch.org/"/>
to verify that these failures are normal.  This applies to all tests
throughout the book.</para>
      <para>Install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
      <important>
        <para><emphasis>Do not remove</emphasis> the
<filename>tcl8.4.4</filename> source directory yet, as the next package
will need its internal headers.</para>
      </important>
      <para>Make a necessary symbolic link:</para>
      <screen>
        <userinput>ln -s tclsh8.4 /tools/bin/tclsh</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-expect">
    <title>Installing Expect-5.39.0</title>
<?dbhtml filename="expect.html" dir="chapter05"?>
    <screen>Estimated build time:           0.1 SBU
Estimated required disk space:  3.9 MB</screen>
    <sect2>
      <title>Contents of Expect</title>
<!-- <para>(Last checked against version &expect-contversion;.)</para> -->
      <para>The Expect package provides a program that performs programmed dialogue
with other interactive programs.</para>
      <para><emphasis>Installed program</emphasis>: expect</para>
      <para><emphasis>Installed library</emphasis>: libexpect5.39.a</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Expect Installation Dependencies</title>
<!-- <para>(Last checked against version &expect-depversion;.)</para> -->
      <para>Expect depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Sed, Tcl.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Expect</title>
      <para>First apply a patch:</para>
      <screen>
        <userinput>patch -Np1 -i ../expect-5.39.0-spawn.patch</userinput>
      </screen>
      <para>This fixes a bug in Expect that can result in bogus failures during the
GCC test suite run.</para>
      <para>Now prepare Expect for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools --with-tcl=/tools/lib --with-x=no</userinput>
      </screen>
      <para>The meaning of the configure options:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>--with-tcl=/tools/lib</userinput>: This ensures that
the configure script finds the Tcl installation in our temporary tools location.
We don't want it to find an existing one that may possibly reside on the host
system.</para>
        </listitem>
        <listitem>
          <para><userinput>--with-x=no</userinput>: This tells the configure
script not to search for Tk (the Tcl GUI component) or the X Window System
libraries, both of which may possibly reside on the host system.</para>
        </listitem>
      </itemizedlist>
      <para>Build the package:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly. However, the Expect test suite here in
Chapter 5 is known to experience failures under certain host conditions that
are not fully understood. Therefore, test suite failures here are not
surprising, but are not considered critical. Should you choose to run the test
suite, the following command will do so:</para>
      <screen>
        <userinput>make test</userinput>
      </screen>
      <para>And install:</para>
      <screen>
        <userinput>make SCRIPTS=&quot;&quot; install</userinput>
      </screen>
      <para>The meaning of the make parameter:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>SCRIPTS=&quot;&quot;</userinput>: This prevents installation of
the supplementary expect scripts which are not needed.</para>
        </listitem>
      </itemizedlist>
      <para>You can now remove the source directories of both Tcl and Expect.</para>
    </sect2>
  </sect1>
  <sect1 id="ch05-dejagnu">
    <title>Installing DejaGnu-1.4.3</title>
<?dbhtml filename="dejagnu.html" dir="chapter05"?>
    <screen>Estimated build time:           0.1 SBU
Estimated required disk space:  8.6 MB</screen>
    <sect2>
      <title>Contents of DejaGnu</title>
<!-- <para>(Last checked against version &dejagnu-contversion;.)</para> -->
      <para>The DejaGnu package contains a framework for testing other programs.</para>
      <para><emphasis>Installed program</emphasis>: runtest</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>DejaGnu Installation Dependencies</title>
<!-- <para>(Last checked against version &dejagnu-depversion;.)</para> -->
      <para>Dejagnu depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of DejaGnu</title>
      <para>Prepare DejaGnu for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Build and install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-gcc-pass2">
    <title>Installing GCC-3.3.2 - Pass 2</title>
<?dbhtml filename="gcc-pass2.html" dir="chapter05"?>
    <screen>Estimated build time:           11.0 SBU
Estimated required disk space:  274 MB</screen>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Re-installation of GCC</title>
      <para>The tools required to test GCC and Binutils are installed now (Tcl, Expect
and DejaGnu). We can continue on rebuilding GCC and Binutils, link them against
the new Glibc, and test them properly. One thing to note, however, is that these
test suites are highly dependent on properly functioning pseudo terminals (PTYs)
which are provided by your host distribution. These days, PTYs are most commonly
implemented via the <emphasis>devpts</emphasis> file system. You can quickly
check if your host system is set up correctly in this regard by performing a
simple test:</para>
      <screen>
        <userinput>expect -c &quot;spawn ls&quot;</userinput>
      </screen>
      <para>If you receive the message:</para>
      <blockquote>
        <screen>The system has no more ptys.  Ask your system administrator to create more.</screen>
      </blockquote>
      <para>Your host distribution is not set up for proper PTY operation. In this
case there is no point in running the test suites for GCC and Binutils until you
are able to resolve the issue. You can consult the LFS Wiki at
<ulink url="http://wiki.linuxfromscratch.org/"/> for more information on how to
get PTYs working.</para>
      <para>Unpack all three GCC tarballs (-core, -g++, and -testsuite) in one and the
same working directory. They will all unfold into a single
<filename>gcc-3.3.2/</filename> subdirectory.</para>
      <para>First correct one problem and make an essential adjustment:</para>
      <screen>
        <userinput>patch -Np1 -i ../gcc-3.3.2-no_fixincludes-1.patch
patch -Np1 -i ../gcc-3.3.2-specs-1.patch</userinput>
      </screen>
      <para>The first patch disables the GCC &quot;fixincludes&quot; script.  We mentioned this
briefly earlier, but a slightly more in-depth explanation of the fixincludes
process is warranted here.  Under normal circumstances, the GCC fixincludes
script scans your system for header files that need to be fixed.  It might find
that some Glibc header files on your host system need to be fixed, fix them and
put them in the GCC private include directory.  Then, later on in
<xref linkend="chapter06"/>, after we've installed the newer Glibc, this
private include directory would be searched before the system include
directory, resulting in GCC finding the fixed headers from the host system,
which would most likely not match the Glibc version actually used for the LFS
system.</para>
      <para>The last patch changes GCC's default location of the dynamic linker
(typically <filename>ld-linux.so.2</filename>). It also removes
<filename class="directory">/usr/include</filename> from GCC's include search
path. Patching now rather than adjusting the specs file after installation
ensures that our new dynamic linker gets used during the actual build of GCC.
That is, all the final (and temporary) binaries created during the build will
link against the new Glibc.</para>
      <important>
        <para>These patches are <emphasis>critical</emphasis> in ensuring a
successful overall build. Do not forget to apply them.</para>
      </important>
      <para>Create a separate build directory again:</para>
      <screen>
        <userinput>mkdir ../gcc-build
cd ../gcc-build</userinput>
      </screen>
      <para>Before starting to build GCC, remember to unset any environment
variables that override the default optimization flags.</para>
      <para>Now prepare GCC for compilation:</para>
      <screen>
        <userinput>../gcc-3.3.2/configure --prefix=/tools \
    --with-local-prefix=/tools \
    --enable-clocale=gnu --enable-shared \
    --enable-threads=posix --enable-__cxa_atexit \
    --enable-languages=c,c++</userinput>
      </screen>
      <para>The meaning of the new configure options:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>--enable-threads=posix</userinput>: This enables
C++ exception handling for multi-threaded code.</para>
        </listitem>
        <listitem>
          <para><userinput>--enable-__cxa_atexit</userinput>: This option
allows use of __cxa_atexit, rather than atexit, to register C++ destructors for
local statics and global objects and is essential for fully standards-compliant
handling of destructors. It also affects the C++ ABI and therefore results in
C++ shared libraries and C++ programs that are interoperable with other Linux
distributions.</para>
        </listitem>
        <listitem>
          <para><userinput>--enable-clocale=gnu</userinput>: This option ensures
the correct locale model is selected for the C++ libraries under all
circumstances. If the configure script finds the <emphasis>de_DE</emphasis>
locale installed, it will select the correct model of <emphasis>gnu</emphasis>.
However, people who don't install the <emphasis>de_DE</emphasis> locale, run the
risk of building ABI incompatible C++ libraries due to the wrong locale model of
<emphasis>generic</emphasis> being selected.</para>
        </listitem>
        <listitem>
          <para><userinput>--enable-languages=c,c++</userinput>: This option is
needed to ensure that both C and C++ compilers are built.</para>
        </listitem>
      </itemizedlist>
      <para>Compile the package:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>There is no need to use the <userinput>bootstrap</userinput> target now,
as the compiler we're using to compile this GCC was built from the exact same
version of the GCC sources we used earlier.</para>
      <note>
        <para>It's worth pointing out that running the GCC test suite here
is considered not as important as running it in
<xref linkend="chapter06"/>.</para>
      </note>
      <para>Test the results:</para>
      <screen>
        <userinput>make -k check</userinput>
      </screen>
      <para>The <userinput>-k</userinput> flag is used to make the test suite run
through to completion and not stop at the first failure. The GCC test suite is
very comprehensive and is almost guaranteed to generate a few failures. To get
a summary of the test suite results, run this:</para>
      <screen>
        <userinput>../gcc-3.3.2/contrib/test_summary | more</userinput>
      </screen>
      <para>You can compare your results to those posted to the gcc-testresults
mailing list for similar configurations to your own. For an example of how
current GCC-3.3.2 should look on i686-pc-linux-gnu, see
<ulink url="http://gcc.gnu.org/ml/gcc-testresults/2003-10/msg00803.html"/>.</para>
      <para>Note that the results contain:</para>
      <screen>* 1 XPASS (unexpected pass) for g++
* 1 FAIL (unexpected failure) for gcc
* 26 XPASS's for libstdc++</screen>
      <para>The unexpected pass for g++ is due to the use of
<userinput>--enable-__cxa_atexit</userinput>. Apparently not all platforms
supported by GCC have support for &quot;__cxa_atexit&quot; in their C libraries, so this
test is not always expected to pass.</para>
      <para>The 26 unexpected passes for libstdc++ are due to the use of
<userinput>--enable-clocale=gnu</userinput>, which is the correct choice on
Glibc-based systems of versions 2.2.5 and above. The underlying locale support
in the GNU C library is superior to that of the otherwise selected &quot;generic&quot;
model (which may be applicable if for instance you were using Newlibc, Sun-libc
or whatever libc). The libstdc++ test suite is apparently expecting the
&quot;generic&quot; model, hence those tests are not always expected to pass.</para>
      <para>Unexpected failures often cannot be avoided. The GCC developers are
usually aware of them but haven't yet gotten around to fixing them. In short,
unless your results are vastly different from those at the above URL, it is safe
to continue on.</para>
      <para>And finally install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
      <note>
        <para>At this point it is strongly recommended to repeat the sanity check
we performed earlier in the chapter. Refer back to
<xref linkend="ch05-locking-glibc"/> and repeat the check. If the results are
wrong, then most likely you forgot to apply the above mentioned GCC Specs
patch.</para>
      </note>
    </sect2>
  </sect1>
  <sect1 id="ch05-binutils-pass2">
    <title>Installing Binutils-2.14 - Pass 2</title>
<?dbhtml filename="binutils-pass2.html" dir="chapter05"?>
    <screen>Estimated build time:           1.5 SBU
Estimated required disk space:  108 MB</screen>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Re-installation of Binutils</title>
      <para>Create a separate build directory again:</para>
      <screen>
        <userinput>mkdir ../binutils-build
cd ../binutils-build</userinput>
      </screen>
      <para>Now prepare Binutils for compilation:</para>
      <screen>
        <userinput>../binutils-2.14/configure --prefix=/tools \
    --enable-shared --with-lib-path=/tools/lib</userinput>
      </screen>
      <para>The meaning of the new configure option:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>--with-lib-path=/tools/lib</userinput>: This tells
the configure script to specify the default library search path. We don't want
the library search path to contain library directories from the host
system.</para>
        </listitem>
      </itemizedlist>
      <para>Before starting to build Binutils, remember to unset any environment
variables that override the default optimization flags.</para>
      <para>Compile the package:</para>
      <screen>
        <userinput>make </userinput>
      </screen>
      <note>
        <para>It's worth pointing out that running the Binutils test suite here
is considered not as important as running it in
<xref linkend="chapter06"/>.</para>
      </note>
      <para>Test the results (there should be no unexpected failures here, expected
failures are fine):</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>Unfortunately, there is no easy way to view the test results summary like
there was for the previous GCC package. However, if a failure occurs here, it
should be easy to spot. The output shown will contain something like:</para>
      <blockquote>
        <screen>make[1]: *** [check-binutils] Error 2</screen>
      </blockquote>
      <para>And install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
      <para>Now prepare Binutils for the re-adjusting of the toolchain in the next
chapter:</para>
      <screen>
        <userinput>make -C ld clean
make -C ld LIB_PATH=/usr/lib:/lib</userinput>
      </screen>
<!-- HACK - Force some whitespace to appease tidy -->
      <literallayout/>
      <warning>
        <para>Do not yet remove the Binutils source and build directories.
We'll need these directories again in the next chapter in the state they are in
now.</para>
      </warning>
<!-- HACK - Force some whitespace to appease tidy -->
      <literallayout/>
    </sect2>
  </sect1>
  <sect1 id="ch05-gawk">
    <title>Installing Gawk-3.1.3</title>
<?dbhtml filename="gawk.html" dir="chapter05"?>
    <screen>Estimated build time:           0.2 SBU
Estimated required disk space:  17 MB</screen>
    <sect2>
      <title>Contents of Gawk</title>
<!-- <para>(Last checked against version &gawk-contversion;.)</para> -->
      <para>Gawk is an awk implementation that is used to manipulate text
files.</para>
      <para><emphasis>Installed programs</emphasis>: awk (link to gawk), gawk,
gawk-3.1.3, grcat, igawk, pgawk, pgawk-3.1.3 and pwcat</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Gawk Installation Dependencies</title>
<!-- <para>(Last checked against version &gawk-depversion;.)</para> -->
      <para>Gawk depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Gawk</title>
      <para>Prepare Gawk for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the package:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly. Should you choose to run it, the
following command will do so:</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>And install it:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-coreutils">
    <title>Installing Coreutils-5.0</title>
<?dbhtml filename="coreutils.html" dir="chapter05"?>
    <screen>Estimated build time:           0.9 SBU
Estimated required disk space:  69 MB</screen>
    <sect2>
      <title>Contents of Coreutils</title>
      <para>The Coreutils package contains a whole series of basic shell utilities.</para>
<!-- <para>(Last checked against version &coreutils-contversion;.)</para> -->
      <para><emphasis>Installed programs</emphasis>: basename, cat, chgrp, chmod,
chown, chroot, cksum, comm, cp, csplit, cut, date, dd, df, dir, dircolors,
dirname, du, echo, env, expand, expr, factor, false, fmt, fold, groups, head,
hostid, hostname, id, install, join, kill, link, ln, logname, ls, md5sum,
mkdir, mkfifo, mknod, mv, nice, nl, nohup, od, paste, pathchk, pinky, pr,
printenv, printf, ptx, pwd, readlink, rm, rmdir, seq, sha1sum, shred, sleep,
sort, split, stat, stty, su, sum, sync, tac, tail, tee, test, touch, tr, true,
tsort, tty, uname, unexpand, uniq, unlink, uptime, users, vdir, wc, who,
whoami and yes</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Coreutils Installation Dependencies</title>
<!-- <para>(Last checked against version &coreutils-depversion;.)</para> -->
      <para>Coreutils depends on: Bash, Binutils, Coreutils, Diffutils, GCC,
Gettext, Glibc, Grep, Make, Perl, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Coreutils</title>
      <para>Prepare Coreutils for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the package:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the
following command will do so:</para>
      <screen>
        <userinput>make RUN_EXPENSIVE_TESTS=yes check</userinput>
      </screen>
      <para>The meaning of the make parameter:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>RUN_EXPENSIVE_TESTS=yes</userinput>: This tells the
test suite to run several additional tests that are considered relatively
expensive on some platforms. However, they are generally not a problem on
Linux.</para>
        </listitem>
      </itemizedlist>
      <para>And install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-bzip2">
    <title>Installing Bzip2-1.0.2</title>
<?dbhtml filename="bzip2.html" dir="chapter05"?>
    <screen>Estimated build time:           0.1 SBU
Estimated required disk space:  2.5 MB</screen>
    <sect2>
      <title>Contents of Bzip2</title>
<!-- <para>(Last checked against version &bzip2-contversion;.)</para> -->
      <para>Bzip2 is a block-sorting file compressor which generally achieves a
better compression than the traditional <userinput>gzip</userinput>
does.</para>
      <para><emphasis>Installed programs</emphasis>: bunzip2 (link to bzip2), bzcat
(link to bzip2), bzcmp, bzdiff, bzegrep, bzfgrep, bzgrep, bzip2, bzip2recover,
bzless and bzmore</para>
      <para><emphasis>Installed libraries</emphasis>: libbz2.a, libbz2.so (link to
libbz2.so.1.0), libbz2.so.1.0 (link to libbz2.so.1.0.2) and
libbz2.so.1.0.2</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Bzip2 Installation Dependencies</title>
<!-- <para>(Last checked against version &bzip2-depversion;.)</para> -->
      <para>Bzip2 depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Make.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Bzip2</title>
      <para>The Bzip2 package doesn't contain a <userinput>configure</userinput>
script. Compile and install it with a straightforward:</para>
      <screen>
        <userinput>make PREFIX=/tools install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-gzip">
    <title>Installing Gzip-1.3.5</title>
<?dbhtml filename="gzip.html" dir="chapter05"?>
    <screen>Estimated build time:           0.1 SBU
Estimated required disk space:  2.6 MB</screen>
    <sect2>
      <title>Contents of Gzip</title>
<!-- <para>(Last checked against version &gzip-contversion;.)</para> -->
      <para>The Gzip package contains programs to compress and decompress files
using the Lempel-Ziv coding (LZ77).</para>
      <para><emphasis>Installed programs</emphasis>: gunzip (link to gzip), gzexe,
gzip, uncompress (link to gunzip), zcat (link to gzip), zcmp, zdiff,
zegrep, zfgrep, zforce, zgrep, zless, zmore and znew</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Gzip Installation Dependencies</title>
<!-- <para>(Last checked against version &gzip-depversion;.)</para> -->
      <para>Gzip depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Gzip</title>
      <para>Prepare Gzip for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the package:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>And install it:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-diffutils">
    <title>Installing Diffutils-2.8.1</title>
<?dbhtml filename="diffutils.html" dir="chapter05"?>
    <screen>Estimated build time:           0.1 SBU
Estimated required disk space:  7.5 MB</screen>
    <sect2>
      <title>Contents of Diffutils</title>
<!-- <para>(Last checked against version &diffutils-contversion;.)</para> -->
      <para>The programs from this package show you the differences between two
files or directories. It's most common use is to create software
patches.</para>
      <para><emphasis>Installed programs</emphasis>: cmp, diff, diff3 and sdiff</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Diffutils Installation Dependencies</title>
<!-- <para>(Last checked against version &diffutils-depversion;.)</para> -->
      <para>Diffutils depends on: Bash, Binutils, Coreutils, Diffutils, GCC,
Gettext, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Diffutils</title>
      <para>Prepare Diffutils for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the package:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>And install it:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-findutils">
    <title>Installing Findutils-4.1.20</title>
<?dbhtml filename="findutils.html" dir="chapter05"?>
    <screen>Estimated build time:           0.2 SBU
Estimated required disk space:  7.6 MB</screen>
    <sect2>
      <title>Contents of Findutils</title>
<!-- <para>(Last checked against version &findutils-contversion;.)</para> -->
      <para>The Findutils package contains programs to find files, either
on-the-fly (by doing a live recursive search through directories and only
showing files that match the specifications) or by searching through a
database.</para>
      <para><emphasis>Installed programs</emphasis>: bigram, code, find, frcode,
locate, updatedb and xargs</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Findutils Installation Dependencies</title>
<!-- <para>(Last checked against version &findutils-depversion;.)</para> -->
      <para>Findutils depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installing Findutils</title>
      <para>Prepare Findutils for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the package:</para>
      <screen>
        <userinput>make </userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the
following command will do so:</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>And install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-make">
    <title>Installing Make-3.80</title>
<?dbhtml filename="make.html" dir="chapter05"?>
    <screen>Estimated build time:           0.2 SBU
Estimated required disk space:  8.8 MB</screen>
    <sect2>
      <title>Contents of Make</title>
<!-- <para>(Last checked against version &make-contversion;.)</para> -->
      <para>Make determines, automatically, which pieces of a large program need
to be recompiled and issues the commands to recompile them.</para>
      <para><emphasis>Installed program</emphasis>: make</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Make Installation Dependencies</title>
<!-- <para>(Last checked against version &make-depversion;.)</para> -->
      <para>Make depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Gettext, Glibc, Grep, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Make</title>
      <para>Prepare Make for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the program:</para>
      <screen>
        <userinput>make </userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the
following command will do so:</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>Then install it and its documentation:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-grep">
    <title>Installing Grep-2.5.1</title>
<?dbhtml filename="grep.html" dir="chapter05"?>
    <screen>Estimated build time:           0.1 SBU
Estimated required disk space:  5.8 MB</screen>
    <sect2>
      <title>Contents of Grep</title>
<!-- <para>(Last checked against version &grep-contversion;.)</para> -->
      <para>Grep is a program used to print lines from a file matching a
specified pattern.</para>
      <para><emphasis>Installed programs</emphasis>: egrep (link to grep), fgrep
(link to grep) and grep</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Grep Installation Dependencies</title>
<!-- <para>(Last checked against version &grep-depversion;.)</para> -->
      <para>Grep depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Make, Sed, Texinfo.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Grep</title>
      <para>Prepare Grep for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools \
    --disable-perl-regexp --with-included-regex</userinput>
      </screen>
      <para>The meaning of the configure options:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>--disable-perl-regexp</userinput>: This makes sure
that <userinput>grep</userinput> does not get linked against a PCRE library
that may be present on the host, but would not be available once we enter the
chroot environment.</para>
        </listitem>
        <listitem>
          <para><userinput>--with-included-regex</userinput>: This ensures that
Grep uses its internal regular expression code.  Without it, it will use
the code from Glibc, which is known to be slightly buggy.</para>
        </listitem>
      </itemizedlist>
      <para>Compile the programs:</para>
      <screen>
        <userinput>make </userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the
following command will do so:</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>Then install them and their documentation:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-sed">
    <title>Installing Sed-4.0.8</title>
<?dbhtml filename="sed.html" dir="chapter05"?>
    <screen>Estimated build time:           0.2 SBU
Estimated required disk space:  5.2 MB</screen>
    <sect2>
      <title>Contents of Sed</title>
<!-- <para>(Last checked against version &sed-contversion;.)</para> -->
      <para>sed is a stream editor. A stream editor is used to perform basic text
transformations on an input stream (a file or input from a
pipeline).</para>
      <para><emphasis>Installed program</emphasis>: sed</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Sed Installation Dependencies</title>
<!-- <para>(Last checked against version &sed-depversion;.)</para> -->
      <para>Sed depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Texinfo.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Sed</title>
      <para>Prepare Sed for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the program:</para>
      <screen>
        <userinput>make </userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the
following command will do so:</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>Then install it and its documentation:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-gettext">
    <title>Installing Gettext-0.12.1</title>
<?dbhtml filename="gettext.html" dir="chapter05"?>
    <screen>Estimated build time:           7.2 SBU
Estimated required disk space:  55 MB</screen>
    <sect2>
      <title>Contents of Gettext</title>
<!-- <para>(Last checked against version &gettext-contversion;.)</para> -->
      <para>The Gettext package is used for internationalization and
localization. Programs can be compiled with Native Language Support
(NLS) which enable them to output messages in the user's native
language.</para>
      <para><emphasis>Installed programs</emphasis>: autopoint, config.charset,
config.rpath, gettext, gettextize, hostname, msgattrib, msgcat, msgcmp,
msgcomm, msgconv, msgen, msgexec, msgfilter, msgfmt, msggrep, msginit,
msgmerge, msgunfmt, msguniq, ngettext, project-id, team-address, trigger,
urlget, user-email and xgettext</para>
      <para><emphasis>Installed libraries</emphasis>: libasprintf[a,so],
libgettextlib[a,so], libgettextpo[a,so] and libgettextsrc[a,so]</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Gettext Installation Dependencies</title>
<!-- <para>(Last checked against version &gettext-depversion;.)</para> -->
      <para>Gettext depends on: Bash, Binutils, Bison, Coreutils,
Diffutils, Gawk, GCC, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Gettext</title>
      <para>Prepare Gettext for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the programs:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly. However, the Gettext test suite here in
Chapter 5 is known to experience failures under certain host conditions -- for
example, if it finds a Java compiler on the host. The Gettext test suite takes
a very long time to run and is not considered critical. Therefore, we don't
recommend running it here. Should you choose to run it, the following command
will do so:</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>And install the package:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-ncurses">
    <title>Installing Ncurses-5.3</title>
<?dbhtml filename="ncurses.html" dir="chapter05"?>
    <screen>Estimated build time:           0.7 SBU
Estimated required disk space:  26 MB</screen>
    <sect2>
      <title>Contents of Ncurses</title>
<!-- <para>(Last checked against version &ncurses-contversion;.)</para> -->
      <para>The Ncurses package provides character and terminal handling
libraries, including panels and menus.</para>
      <para><emphasis>Installed programs</emphasis>: captoinfo (link to tic), clear,
infocmp, infotocap (link to tic), reset (link to tset), tack, tic, toe, tput
and tset</para>
      <para><emphasis>Installed libraries</emphasis>: libcurses.[a,so] (link to
libncurses.[a,so]), libform.[a,so], libmenu.[a,so], libncurses++.a,
libncurses.[a,so], libpanel.[a,so]</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Ncurses Installation Dependencies</title>
<!-- <para>(Last checked against version &ncurses-depversion;.)</para> -->
      <para>Ncurses depends on: Bash, Binutils, Coreutils, Diffutils,
Gawk, GCC, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Ncurses</title>
      <para>Fix two minor things:</para>
      <screen>
        <userinput>patch -Np1 -i ../ncurses-5.3-etip-2.patch
patch -Np1 -i ../ncurses-5.3-vsscanf.patch</userinput>
      </screen>
      <para>The first patch corrects the <filename>etip.h</filename> header file, and
the second patch prevents some compiler warnings being issued on the use of
deprecated headers.</para>
      <para>Now prepare Ncurses for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools --with-shared \
    --without-debug --without-ada --enable-overwrite</userinput>
      </screen>
      <para>The meaning of the configure options:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>--without-ada</userinput>: This tells Ncurses not
to build its Ada bindings, even if an Ada compiler is installed on the host.
This must be done because once we enter the chroot environment, Ada will no
longer be available.</para>
        </listitem>
        <listitem>
          <para><userinput>--enable-overwrite</userinput>: This tells Ncurses
to install its header files into <filename class="directory">/tools/include</filename>
instead of <filename class="directory">/tools/include/ncurses</filename> to
ensure that other packages can find the Ncurses headers successfully.</para>
        </listitem>
      </itemizedlist>
      <para>Compile the programs and libraries:</para>
      <screen>
        <userinput>make </userinput>
      </screen>
      <para>Then install them and their documentation:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-patch">
    <title>Installing Patch-2.5.4</title>
<?dbhtml filename="patch.html" dir="chapter05"?>
    <screen>Estimated build time:           0.1 SBU
Estimated required disk space:  1.9 MB</screen>
    <sect2>
      <title>Contents of Patch</title>
<!-- <para>(Last checked against version &patch-contversion;.)</para> -->
      <para>The patch program modifies a file according to a patch file. A patch
file usually is a list, created by the diff program, that contains
instructions on how an original file needs to be modified.</para>
      <para><emphasis>Installed program</emphasis>: patch</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Patch Installation Dependencies</title>
<!-- <para>(Last checked against version &patch-depversion;.)</para> -->
      <para>Patch depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Patch</title>
      <para>Prepare Patch for compilation:</para>
      <screen>
        <userinput>CPPFLAGS=-D_GNU_SOURCE ./configure --prefix=/tools</userinput>
      </screen>
      <para>The preprocessor flag <userinput>-D_GNU_SOURCE</userinput> is only needed
on the PowerPC platform. On other architectures you can leave it out.</para>
      <para>Compile the program:</para>
      <screen>
        <userinput>make </userinput>
      </screen>
      <para>Then install it and its documentation:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-tar">
    <title>Installing Tar-1.13.25</title>
<?dbhtml filename="tar.html" dir="chapter05"?>
    <screen>Estimated build time:           0.2 SBU
Estimated required disk space:  10 MB</screen>
    <sect2>
      <title>Contents of Tar</title>
<!-- <para>(Last checked against version &tar-contversion;.)</para> -->
      <para>Tar is an archiving program designed to store and extract
files from an archive file known as a tar file.</para>
      <para><emphasis>Installed programs</emphasis>: rmt and tar</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Tar Installation Dependencies</title>
<!-- <para>(Last checked against version &tar-depversion;.)</para> -->
      <para>Tar depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Tar</title>
      <para>Prepare Tar for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the programs:</para>
      <screen>
        <userinput>make </userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the
following command will do so:</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>Then install them and their documentation:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-texinfo">
    <title>Installing Texinfo-4.6</title>
<?dbhtml filename="texinfo.html" dir="chapter05"?>
    <screen>Estimated build time:           0.2 SBU
Estimated required disk space:  16 MB</screen>
    <sect2>
      <title>Contents of Texinfo</title>
<!-- <para>(Last checked against version &texinfo-contversion;.)</para> -->
      <para>The Texinfo package contains programs used for reading,
writing and converting Info documents, which provide system
documentation.</para>
      <para><emphasis>Installed programs</emphasis>: info, infokey, install-info,
makeinfo, texi2dvi and texindex</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Texinfo Installation Dependencies</title>
<!-- <para>(Last checked against version &texinfo-depversion;.)</para> -->
      <para>Texinfo depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Ncurses, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Texinfo</title>
      <para>Prepare Texinfo for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the programs:</para>
      <screen>
        <userinput>make </userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the
following command will do so:</para>
      <screen>
        <userinput>make check</userinput>
      </screen>
      <para>Then install them and their documentation:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-bash">
    <title>Installing Bash-2.05b</title>
<?dbhtml filename="bash.html" dir="chapter05"?>
    <screen>Estimated build time:           1.2 SBU
Estimated required disk space:  27 MB</screen>
    <sect2>
      <title>Contents of Bash</title>
<!-- <para>(Last checked against version &bash-contversion;.)</para> -->
      <para>bash is the Bourne-Again SHell, which is a widely used command
interpreter on Unix systems. The bash program reads from standard
input (the keyboard). A user types something and the program will evaluate
what he has typed and do something with it, like running a
program.</para>
      <para><emphasis>Installed programs</emphasis>: bash, sh (link to bash) and
bashbug</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Bash Installation Dependencies</title>
<!-- <para>(Last checked against version &bash-depversion;.)</para> -->
      <para>Bash depends on: Binutils, Coreutils, Diffutils, Gawk,
GCC, Glibc, Grep, Make, Ncurses, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Bash</title>
      <para>Bash contains several known bugs. Fix these with the following
patch:</para>
      <screen>
        <userinput>patch -Np1 -i ../bash-2.05b-2.patch</userinput>
      </screen>
      <para>Now prepare Bash for compilation:</para>
      <screen>
        <userinput>./configure --prefix=/tools</userinput>
      </screen>
      <para>Compile the program:</para>
      <screen>
        <userinput>make</userinput>
      </screen>
      <para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the
following command will do so:</para>
      <screen>
        <userinput>make tests</userinput>
      </screen>
      <para>Then install it and its documentation:</para>
      <screen>
        <userinput>make install</userinput>
      </screen>
      <para>And make a link for the programs that use <userinput>sh</userinput>
for a shell:</para>
      <screen>
        <userinput>ln -s bash /tools/bin/sh</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-utillinux">
    <title>Installing Util-linux-2.12</title>
<?dbhtml filename="util-linux.html" dir="chapter05"?>
    <screen>Estimated build time:           0.1 SBU
Estimated required disk space:  8 MB</screen>
    <sect2>
      <title>Contents of Util-linux</title>
<!-- <para>(Last checked against version &util-linux-contversion;.)</para> -->
      <para>The Util-linux package contains a number of miscellaneous
utility programs. Some of the more prominent utilities are used
to mount, unmount, format, partition and manage disk drives,
open tty ports and fetch kernel messages.</para>
      <para><emphasis>Installed programs</emphasis>: agetty, arch, blockdev, cal,
cfdisk, chkdupexe, col, colcrt, colrm, column, ctrlaltdel, cytune, ddate,
dmesg, elvtune, fdformat, fdisk, fsck.cramfs, fsck.minix, getopt, hexdump,
hwclock, ipcrm, ipcs, isosize, kill, line, logger, look, losetup, mcookie, mkfs,
mkfs.bfs, mkfs.cramfs, mkfs.minix, mkswap, more, mount, namei, parse.bash,
parse.tcsh, pg, pivot_root, ramsize (link to rdev), raw, rdev, readprofile,
rename, renice, rev, rootflags (link to rdev), script, setfdprm, setsid,
setterm, sfdisk, swapoff (link to swapon), swapon, test.bash, test.tcsh,
tunelp, ul, umount, vidmode (link to rdev), whereis and write</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Util-linux Installation Dependencies</title>
<!-- <para>(Last checked against version &util-linux-depversion;.)</para> -->
      <para>Util-linux depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Ncurses, Sed, Zlib.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Util-linux</title>
      <para>Util-linux doesn't use the freshly installed headers and libraries from
the /tools directory.  This is fixed by altering the configure script:</para>
      <screen>
        <userinput>cp configure configure.backup
sed &quot;s@/usr/include@/tools/include@g&quot; configure.backup &gt; configure</userinput>
      </screen>
      <para>Prepare Util-linux for compilation:</para>
      <screen>
        <userinput>./configure</userinput>
      </screen>
      <para>Compile some support routines:</para>
      <screen>
        <userinput>make -C lib</userinput>
      </screen>
      <para>And, since you'll need only a couple of the utilities contained in this
package, build just those:</para>
      <screen>
        <userinput>make -C mount  mount umount
make -C text-utils  more</userinput>
      </screen>
      <para>Now copy these programs to the temporary tools directory:</para>
      <screen>
        <userinput>cp mount/{,u}mount text-utils/more /tools/bin</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-perl">
    <title>Installing Perl-5.8.2</title>
<?dbhtml filename="perl.html" dir="chapter05"?>
    <screen>Estimated build time:           0.8 SBU
Estimated required disk space:  74 MB</screen>
    <sect2>
      <title>Contents of Perl</title>
<!-- <para>(Last checked against version &perl-contversion;.)</para> -->
      <para>The Perl package contains perl, the Practical Extraction
and Report Language. Perl combines some of the best features of C,
sed, awk and sh into one powerful language.</para>
      <para><emphasis>Installed programs</emphasis>: a2p, c2ph, dprofpp, enc2xs,
find2perl, h2ph, h2xs, libnetcfg, perl, perl5.8.2 (link to perl),
perlbug, perlcc, perldoc, perlivp, piconv, pl2pm, pod2html, pod2latex, pod2man,
pod2text, pod2usage, podchecker, podselect, psed (link to s2p), pstruct (link
to c2ph), s2p, splain and xsubpp</para>
      <para><emphasis>Installed libraries</emphasis>: (too many to name)</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Perl Installation Dependencies</title>
<!-- <para>(Last checked against version &perl-depversion;.)</para> -->
      <para>Perl depends on: Bash, Binutils, Coreutils, Diffutils,
Gawk, GCC, Glibc, Grep, Make, Sed.</para>
    </sect2>
    <sect2>
      <title> </title>
      <para> </para>
    </sect2>
    <sect2>
      <title>Installation of Perl</title>
      <para>First adapt some hard-wired paths to the C library:</para>
      <screen>
        <userinput>patch -Np1 -i ../perl-5.8.2-libc-1.patch</userinput>
      </screen>
      <para>Now prepare Perl for compilation:</para>
      <screen>
        <userinput>./configure.gnu --prefix=/tools -Dstatic_ext='IO Fcntl'</userinput>
      </screen>
      <para>The meaning of the configure option:</para>
      <itemizedlist>
        <listitem>
          <para><userinput>-Dstatic_ext='IO Fcntl'</userinput>: This tells
Perl to build the minimum set of static extensions needed for running the
Coreutils test suite in the next chapter.</para>
        </listitem>
      </itemizedlist>
      <para>Compile only the required tools:</para>
      <screen>
        <userinput>make perl utilities</userinput>
      </screen>
      <para>Then copy these tools and their libraries:</para>
      <screen>
        <userinput>cp perl pod/pod2man /tools/bin
mkdir -p /tools/lib/perl5/5.8.2
cp -R lib/* /tools/lib/perl5/5.8.2</userinput>
      </screen>
    </sect2>
  </sect1>
  <sect1 id="ch05-stripping">
    <title>Stripping</title>
<?dbhtml filename="stripping.html" dir="chapter05"?>
    <para>The steps in this section are optional. If your LFS partition is rather
small, you will be glad to learn that you can throw away some unnecessary
things. The executables and libraries you have built so far contain about 130 MB
of unneeded debugging symbols. Remove those symbols like this:</para>
    <screen>
      <userinput>strip --strip-unneeded /tools/{,s}bin/*
strip --strip-debug /tools/lib/*</userinput>
    </screen>
    <para>The first of the above commands will skip some twenty files, reporting
that it doesn't recognize their file format. Most of them are scripts instead
of binaries.</para>
    <para>Take care <emphasis>not</emphasis> to use
<userinput>--strip-unneeded</userinput> on the libraries -- they would be
destroyed and you would have to build Glibc all over again.</para>
    <para>To save another couple of megabytes, you can throw away all the
documentation:</para>
    <screen>
      <userinput>rm -rf /tools/{,share/}{doc,info,man}</userinput>
    </screen>
    <para>You will now need to have at least 850 MB of free space on your LFS
filesystem to be able to build and install Glibc in the next phase. If you can
build and install Glibc, you can build and install the rest too.</para>
  </sect1>
</chapter>
