<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3CR2//EN" "http://www.docbook.org/xml/4.3CR2/docbookx.dtd">
<sect1 id="ch05-settingenviron">
<title>Setting up the environment</title>
<?dbhtml filename="settingenvironment.html"?>

<para>We're going to set up a good working environment by creating two new
startup files for the Bash shell. While logged in as user
<emphasis>lfs</emphasis>, issue the following commands to create a new
<filename>.bash_profile</filename>:</para>

<screen><userinput>cat &gt; ~/.bash_profile &lt;&lt; "EOF"</userinput>
exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash
<userinput>EOF</userinput></screen>

<para>The
<userinput>exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash</userinput>
command creates a new instance of Bash with a completely empty environment,
except for the HOME, TERM and PS1 variables. This is needed to ensure that no
unwanted and potentially hazardous environment variables from the host system
leak into our build environment. The technique used here is a little
non-standard but it achieves the goal of enforcing a clean environment. By way
of explanation, the initial shell is a <emphasis>login</emphasis> shell which
reads the <filename>.bash_profile</filename>. The new shell instance is a
<emphasis>non-login</emphasis> shell which reads the
<filename>.bashrc</filename> (created next).</para>

<para>Now create a new <filename>.bashrc</filename>:</para>

<screen><userinput>cat &gt; ~/.bashrc &lt;&lt; "EOF"</userinput>
set +h
umask 022
LFS=/mnt/lfs
LC_ALL=POSIX
PATH=/tools/bin:/bin:/usr/bin
export LFS LC_ALL PATH
<userinput>EOF</userinput></screen>

<para>The <userinput>set +h</userinput> command turns off
<userinput>bash</userinput>'s hash function. Normally hashing is a useful
feature: <userinput>bash</userinput> uses a hash table to remember the
full pathnames of executable files to avoid searching the PATH time and time
again to find the same executable. However, we'd like the new tools to be
used as soon as they are installed.  By switching off the hash function, our
"interactive" commands (<userinput>make</userinput>,
<userinput>patch</userinput>, <userinput>sed</userinput>,
<userinput>cp</userinput> and so forth) will always use
the newest available version during the build process.</para>

<para>Setting the user file-creation mask to 022 ensures that newly created
files and directories are only writable for their owner, but readable and
executable for anyone.</para>

<para>The LFS variable should of course be set to the mount point you
chose.</para>

<para>The LC_ALL variable controls the localization of certain programs,
making their messages follow the conventions of a specified country. If your
host system uses a version of Glibc older than 2.2.4,
having LC_ALL set to something other than "POSIX" or "C" during this chapter
may cause trouble if you exit the chroot environment and wish to return later.
By setting LC_ALL to "POSIX" (or "C", the two are equivalent)  we ensure that
everything will work as expected in the chroot environment.</para>

<para>We prepend <filename>/tools/bin</filename> to the standard PATH so
that, as we move along through this chapter, the tools we build will get used
during the rest of the building process.</para>

<para>Finally, source the just-created profile so that we're all set to begin
building the temporary tools that will support us in later chapters.</para>

<screen><userinput>source ~/.bash_profile</userinput></screen>

</sect1>
