<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3CR2//EN" "http://www.docbook.org/xml/4.3CR2/docbookx.dtd">
<chapter id="chapter06" xreflabel="Chapter 6">
<?dbhtml dir="chapter06"?>
<title>Installing basic system software</title>
<?dbhtml filename="chapter06.html"?>


<sect1 id="ch06-introduction">
<title>Introduction</title>
<?dbhtml filename="introduction.html"?>

<para>In this chapter we enter the building site, and start
constructing our LFS system in earnest. That is, we chroot into
our temporary mini Linux system, create some auxiliary things,
and then start installing all the packages, one by one.</para>
 
<para>The installation of all this software is pretty straightforward,
and you will probably think it would be much shorter to give here
the generic installation instructions and explain in full only the
installation of those packages that require an alternate method.
Although we agree with that, we nevertheless choose to give the 
full instructions for each and every package, simply to minimize
the possibilities for mistakes.</para>

<para>If you plan to use compiler optimizations in this chapter, take a look at
the optimization hint at <ulink url="http://www.linuxfromscratch.org/hints/downloads/files/optimization.txt"/>. Compiler
optimizations can make a program run slightly faster, but they may also cause
compilation difficulties and even problems when running the program. If a
package refuses to compile when using optimization, try to compile it without
optimization and see if the problem goes away. Even if the package does compile
when using optimization, there is the risk it may have been compiled incorrectly
due to complex interactions between the code and build tools. In short, the
small potential gains achieved in using compiler optimization are generally
outweighed by the risk. First time builders of LFS are encouraged to build
without custom optimizations. Your system will still be very fast and very
stable at the same time.</para>

<para>The order in which packages are installed in this chapter has
to be strictly followed, to ensure that no program gets a path referring
to <filename class="directory">/tools</filename> hard-wired into it.
For the same reason, <emphasis>do not </emphasis> compile packages
in parallel. Compiling in parallel may save you some time (especially on
dual-CPU machines), but it could result in a program containing a
hard-wired path to <filename class="directory">/tools</filename>,
which will cause the program to stop working when that directory
is removed.</para>

</sect1>


<sect1 id="ch06-chroot">
<title>Entering the chroot environment</title>
<?dbhtml filename="chroot.html"?>

<para>It is time to enter the chroot environment in order to begin installing
the packages we need. Before you can chroot, however, you need to become
<emphasis>root</emphasis>, since only <emphasis>root</emphasis>
can execute the <userinput>chroot</userinput> command.</para>

<para>Just like earlier, ensure the LFS environment variable is set up properly
by running <userinput>echo $LFS</userinput> and ensuring it shows the path to
your LFS partition's mount point, which is
<filename class="directory">/mnt/lfs</filename> if you followed our
example.</para>

<para>Become <emphasis>root</emphasis> and run the following command
to enter the chroot environment:</para>

<screen><userinput>chroot $LFS /tools/bin/env -i \
    HOME=/root TERM=$TERM PS1='\u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
    /tools/bin/bash --login +h</userinput></screen>

<para>The <userinput>-i</userinput> option given to the
<userinput>env</userinput> command will clear all variables of the chroot
environment. After that, only the HOME, TERM, PS1 and PATH variables are
set again. The TERM=$TERM construct will set the TERM variable inside chroot
to the same value as outside chroot; this variable is needed for programs
like <userinput>vim</userinput> and <userinput>less</userinput> to operate
properly. If you need other variables present, such as CFLAGS or CXXFLAGS,
this is a good place to set them again.</para>

<para>From this point on there's no need to use the LFS variable anymore,
because everything you do will be restricted to the LFS file system -- since
what the shell thinks is <filename class="directory">/</filename> is actually
the value of <filename class="directory">$LFS</filename>, which was passed to
the chroot command.</para>

<para>Notice that <filename class="directory">/tools/bin</filename> comes
last in the PATH. This means that a temporary tool will not be used any more
as soon as its final version is installed.  Well, at least when the shell
doesn't remember the locations of executed binaries -- for this reason hashing
is switched off by passing the <userinput>+h</userinput> option to
<userinput>bash</userinput>.</para>

<para>You have to make sure all the commands in the rest of this chapter and
in the following chapters are run from within the chroot environment.
If you ever leave this environment for any reason (rebooting for example),
you must remember to again enter chroot and mount the proc and devpts
filesystems (discussed later) before continuing with the installations.</para>

<para>Note that the bash prompt will say "I have no name!" This is
normal, as the <filename>/etc/passwd</filename> file has not been
created yet.</para>

</sect1>


<sect1 id="ch06-changingowner">
<title>Changing ownership</title>
<?dbhtml filename="changingowner.html"?>

<para>Right now the <filename class="directory">/tools</filename> directory
is owned by the user <emphasis>lfs</emphasis>, a user that exists only on your
host system. Although you will probably want to delete the
<filename class="directory">/tools</filename> directory once you have
finished your LFS system, you may want to keep it around, for example to
build more LFS systems. But if you keep the
<filename class="directory">/tools</filename> directory as it is, you end up
with files owned by a user ID without a corresponding account. This is
dangerous because a user account created later on could get this same user ID
and would suddenly own the <filename class="directory">/tools</filename>
directory and all the files therein, thus exposing these files to possible
malicious manipulation.</para>

<para>To avoid this issue, you could add the <emphasis>lfs</emphasis> user to
your new LFS system later on when creating the <filename>/etc/passwd</filename>
file, taking care to assign it the same user and group IDs as on your host
system. Alternatively, you can (and the book assumes you do) assign the
contents of the <filename class="directory">/tools</filename> directory to
user <emphasis>root</emphasis> by running the following command:</para>

<screen><userinput>chown -R 0:0 /tools</userinput></screen>

<para>The command uses "0:0" instead of "root:root", because
<userinput>chown</userinput> is unable to resolve the name "root" until the
password file has been created.</para>

</sect1>


<sect1 id="ch06-creatingdirs">
<title>Creating directories</title>
<?dbhtml filename="creatingdirs.html"?>

<para>Let's now create some structure in our LFS file system. Let's create
a directory tree. Issuing the following commands will create a more or less
standard tree:</para>
 
<screen><userinput>mkdir -p /{bin,boot,dev/{pts,shm},etc/opt,home,lib,mnt,proc}
mkdir -p /{root,sbin,tmp,usr/local,var,opt}
for dirname in /usr /usr/local
    do
    mkdir $dirname/{bin,etc,include,lib,sbin,share,src}
    ln -s share/{man,doc,info} $dirname
    mkdir $dirname/share/{doc,info,locale,man}
    mkdir $dirname/share/{misc,terminfo,zoneinfo}
    mkdir $dirname/share/man/man{1,2,3,4,5,6,7,8}
done
mkdir /var/{lock,log,mail,run,spool}
mkdir -p /var/{tmp,opt,cache,lib/misc,local}
mkdir /opt/{bin,doc,include,info}
mkdir -p /opt/{lib,man/man{1,2,3,4,5,6,7,8}}</userinput></screen>

<para>Directories are, by default, created with permission mode 755, but this
isn't desirable for all directories. We will make two changes: one to the home
directory of <emphasis>root</emphasis>, and another to the directories for
temporary files.</para>

<screen><userinput>chmod 0750 /root
chmod 1777 /tmp /var/tmp</userinput></screen>

<para>The first mode change ensures that not just anybody can enter the
<filename class="directory">/root</filename> directory -- the same
as a normal user would do with his or her home directory.
The second mode change makes sure that any user can write to the
<filename class="directory">/tmp</filename> and
<filename class="directory">/var/tmp</filename> directories, but
cannot remove other users' files from them. The latter is prohibited
by the so-called "sticky bit" -- the highest bit in the 1777 bit mask.</para>

<sect2>
<title>FHS compliance note</title>

<para>We have based our directory tree on the FHS standard (available at
<ulink url="http://www.pathname.com/fhs/"/>). Besides the above created
tree this standard stipulates the existence of
<filename class="directory">/usr/local/games</filename> and
<filename class="directory">/usr/share/games</filename>, but we don't
much like these for a base system. However, feel free to make your system
FHS-compliant. As to the structure of the
<filename class="directory">/usr/local/share</filename> subdirectory, the FHS
isn't precise, so we created here the directories that we think are needed.</para>

</sect2>

</sect1>


<sect1 id="ch06-proc">
<title>Mounting the proc and devpts file systems</title>
<?dbhtml filename="proc.html"?>

<para>In order for certain programs to function properly, the
<emphasis>proc</emphasis> and <emphasis>devpts</emphasis> file systems must be
available within the chroot environment. A file system can be mounted as many
times and in as many places as you like, thus it's not a problem that these
file systems are already mounted on your host system -- especially so because
they are virtual file systems.</para>

<para>The <emphasis>proc</emphasis> file system is the process information
pseudo-filesystem that the kernel uses to provide status information about the
status of the system.</para>

<para>The proc file system is mounted on
<filename class="directory">/proc</filename> by running the following
command:</para>

<screen><userinput>mount proc /proc -t proc</userinput></screen>

<para>You might get warning messages from the mount command, such as
these:</para>

<blockquote><screen>warning: can't open /etc/fstab: No such file or directory
not enough memory</screen></blockquote>

<para>Ignore these, they're just due to the fact that the system
isn't installed completely yet and some files are missing. The mount itself
will be successful and that's all we care about at this point.</para>

<para>The <emphasis>devpts</emphasis> file system was mentioned earlier and is
now the most common way for pseudo terminals (PTYs) to be implemented.</para>

<para>The devpts file system is mounted on 
<filename class="directory">/dev/pts</filename> by running:</para>

<screen><userinput>mount devpts /dev/pts -t devpts</userinput></screen>

<para>Should this command fail with an error to the effect of:</para>

<blockquote><screen>filesystem devpts not supported by kernel</screen></blockquote>

<para>The most likely cause is that your host system's kernel was compiled
without support for the devpts file system. You can check which file systems
your kernel supports by peeking into its internals with a command such as
<userinput>cat /proc/filesystems</userinput>. If a file system type named
<emphasis>devfs</emphasis> is listed there, then we'll be able to work around
the problem by mounting the host's devfs file system on top of the new
<filename>/dev</filename> structure which we'll create later on in the
"Creating devices (Makedev)" section. If devfs was not listed, do not worry
because there is yet a third way to get PTYs working inside the chroot
environment. We'll cover this shortly in the aforementioned Makedev
section.</para>

<para>Remember, if for any reason you stop working on your LFS, and start again
later, it's important to check that these filesystems are still mounted inside
the chroot environment, otherwise problems are likely to occur.</para>

</sect1>




<sect1 id="ch06-createfiles">
<title>Creating essential symlinks</title>
<?dbhtml filename="createfiles.html"?>

<para>Some programs hard-wire paths to programs which don't exist yet. In
order to satisfy these programs, we create a number of symbolic links which
will be replaced by real files throughout the course of this chapter when
we're installing all the software.</para>

<screen><userinput>ln -s /tools/bin/{bash,cat,pwd,stty} /bin
ln -s /tools/bin/perl /usr/bin
ln -s /tools/lib/libgcc_s.so.1 /usr/lib
ln -s bash /bin/sh</userinput></screen>

</sect1>


<sect1 id="ch06-pwdgroup">
<title>Creating the passwd and group files</title>
<?dbhtml filename="pwdgroup.html"?>

<para>In order for <emphasis>root</emphasis> to be able to login and for the 
name "root" to be recognized, there need to be relevant entries in the 
<filename>/etc/passwd</filename> and <filename>/etc/group</filename> files.</para>

<para>Create the <filename>/etc/passwd</filename> file by running the following 
command:</para>

<screen><userinput>cat &gt; /etc/passwd &lt;&lt; "EOF"</userinput>
root:x:0:0:root:/root:/bin/bash
<userinput>EOF</userinput></screen>

<para>The actual password for <emphasis>root</emphasis> (the "x" here is just a 
placeholder) will be set later.</para>

<para>Create the <filename>/etc/group</filename> file by running the following 
command:</para>

<screen><userinput>cat &gt; /etc/group &lt;&lt; "EOF"</userinput>
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tty:x:4:
tape:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
<userinput>EOF</userinput></screen>

<para>The created groups aren't part of any standard -- they are the groups 
that the MAKEDEV script in the next section uses. Besides the group "root", the 
LSB (<ulink url="http://www.linuxbase.org"/>) recommends only a group "bin", 
with a GID of 1, be present. All other group names and GIDs can be chosen 
freely by the user, as well-written packages don't depend on GID numbers but 
use the group's name.</para>

<para>Lastly, we re-login to the chroot environment.  User name and group name
resolution will start working immediately after the 
<filename>/etc/passwd</filename> and <filename>/etc/group</filename> files are 
created, because we installed a full Glibc in Chapter 5.  This will get rid of 
the <quote>I have no name!</quote> prompt.</para>

<screen><userinput>exec /tools/bin/bash --login +h</userinput></screen>

<para>Note the use of the <userinput>+h</userinput> directive. This tells
<userinput>bash</userinput> not to use its internal path hashing. Without this
directive, <userinput>bash</userinput> would remember the paths to binaries it
has executed. Since we want to use our newly compiled binaries as soon as
they are installed, we turn off this function for the duration of this
chapter.</para>

</sect1>


<sect1 id="ch06-MAKEDEV">
<title>Creating devices (Makedev-1.7)</title>
<?dbhtml filename="makedev.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  50 KB</screen>

<sect2><title>Contents of MAKEDEV</title>

<!-- <para>(Last checked against version &makedev-contversion;.)</para> -->

<para>The MAKEDEV script creates the static device nodes which
usually reside in the <filename class="directory">/dev</filename>
directory. Detailed information about device nodes may be found
in the <filename>Documentation/devices.txt</filename> file under
the Linux kernel source tree.</para>

<para><emphasis>Installed script</emphasis>: MAKEDEV</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>MAKEDEV Installation Dependencies</title>

<!-- <para>(Last checked against version &makedev-depversion;.)</para> -->

<para>MAKEDEV depends on: Bash, Coreutils.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Creating devices</title>

<para>Note that unpacking the <filename>MAKEDEV-1.7.bz2</filename>
file doesn't create a directory for you to <userinput>cd</userinput> into, as
the file contains only a shell script.</para>

<para>Install the <userinput>MAKEDEV</userinput> script:</para>

<screen><userinput>bzcat MAKEDEV-1.7.bz2 &gt; /dev/MAKEDEV
chmod 754 /dev/MAKEDEV</userinput></screen>

<para>Run the script to create the device files:</para>

<screen><userinput>cd /dev
./MAKEDEV -v generic-nopty</userinput></screen>

<para>The meaning of the arguments:</para>

<itemizedlist>
<listitem><para><userinput>-v</userinput>: This tells the script to run in
verbose mode.</para></listitem>

<listitem><para><userinput>generic-nopty</userinput>: This instructs
<userinput>MAKEDEV</userinput> to create a generic selection of commonly used
device special files, except for the ptyXX and ttyXX range of files. We don't
need those files because we are going to use Unix98 PTYs via the
<emphasis>devpts</emphasis> file system.</para></listitem>
</itemizedlist>

<para>If it turns out that some special device <filename>zzz</filename> that
you need is missing, try running <userinput>./MAKEDEV -v zzz</userinput>.
Alternatively, you may create devices via the <userinput>mknod</userinput>
program. Please refer to its man and info pages if you need more
information.</para>

<para>Additionally, if you were unable to mount the devpts filesystem earlier in
the "Mounting the proc and devpts file systems" section, now is the time to
try the alternatives. If your kernel supports the devfs file system, run the
following command to mount devfs:</para>

<screen><userinput>mount -t devfs devfs /dev</userinput></screen>

<para>This will mount the devfs file system over the top of the new static
<filename>/dev</filename> structure. This poses no problems, as the device nodes
created are still present, they are just hidden by the new devfs
filesystem.</para>

<para>If this still doesn't work, the only option left is to use the MAKEDEV
script to create the ptyXX and ttyXX range of files that would otherwise not be
needed. Ensure you are still in the <filename>/dev</filename> directory then run
<userinput>./MAKEDEV -v pty</userinput>. The downside of this is, we are
creating an extra 512 device special files which will not be needed when we
finally boot into the finished LFS system.</para>

</sect2>

</sect1>


<sect1 id="ch06-kernel-headers">
<title>Installing Linux-2.4.23 headers</title>
<?dbhtml filename="kernel.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  186 MB</screen>

<sect2><title>Contents of Linux</title>

<!-- <para>(Last checked against version &kernel-contversion;.)</para> -->

<para>The Linux kernel is at the core of every Linux system. It's what makes
Linux tick. When a computer is turned on and boots a Linux system, the
very first piece of Linux software that gets loaded is the kernel. The
kernel initializes the system's hardware components: serial ports, parallel
ports, sound cards, network cards, IDE controllers, SCSI controllers and a
lot more. In a nutshell the kernel makes the hardware available so that the
software can run.</para>

<para><emphasis>Installed files</emphasis>: the kernel and the kernel
headers</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Linux Installation Dependencies</title>

<!-- <para>(Last checked against version &kernel-depversion;.)</para> -->

<para>Linux depends on: Bash, Binutils, Coreutils, Findutils,
GCC, Glibc, Grep, Gzip, Make, Modutils, Perl, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of the kernel headers</title>

<para>We won't be compiling a new kernel yet -- we'll do that when we have
finished the installation of all the packages. But as some packages need the
kernel header files, we're going to unpack the kernel archive now, set it up
and copy the header files so they can be found by these packages.</para>

<para>It is important to note that the files in the kernel source directory
are not owned by <emphasis>root</emphasis>. Whenever you unpack a package as
user <emphasis>root</emphasis> (like we do here inside chroot), the files end
up having the user and group IDs of whatever they were on the packager's
computer. This is usually not a
problem for any other package you install because you remove the source
tree after the installation. But the Linux kernel source tree is often kept
around for a long time, so there's a chance that whatever user ID the packager
used will be assigned to somebody on your machine and then that person would
have write access to the kernel source.</para>

<para>In light of this, you might want to run <userinput>chown -R 0:0</userinput>
on the <filename>linux-2.4.23</filename> directory
to ensure all files are owned by user <emphasis>root</emphasis>.</para>

<para>Prepare for header installation:</para>

<screen><userinput>make mrproper</userinput></screen>

<para>This ensures that the kernel tree is absolutely clean. The kernel team
recommends that this command be issued prior to <emphasis>each</emphasis> kernel
compilation. You shouldn't rely on the source tree being clean after
untarring.</para>

<para>Create the <filename>include/linux/version.h</filename> file:</para>

<screen><userinput>make include/linux/version.h</userinput></screen>

<para>Create the platform-specific <filename>include/asm</filename>
symlink:</para>

<screen><userinput>make symlinks</userinput></screen>

<para>Install the platform specific-header files:</para>

<screen><userinput>cp -HR include/asm /usr/include
cp -R include/asm-generic /usr/include</userinput></screen>

<para>Install the cross-platform kernel header files:</para>

<screen><userinput>cp -R include/linux /usr/include</userinput></screen>

<para>There are a few kernel header files which make use of the
<filename>autoconf.h</filename> header file. Since we do not yet configure the
kernel, we need to create this file ourselves in order to avoid compilation
failures. Create an empty <filename>autoconf.h</filename> file:</para>

<screen><userinput>touch /usr/include/linux/autoconf.h</userinput></screen>

</sect2>
<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Why we copy the kernel headers and don't symlink them</title>

<para>In the past it was common practice to symlink the
<filename class="directory">/usr/include/{linux,asm}</filename> directories
to <filename class="directory">/usr/src/linux/include/{linux,asm}</filename>.
This was a <emphasis>bad</emphasis> practice, as the following extract from a
post by Linus Torvalds to the Linux Kernel Mailing List points out:</para>

<screen>I would suggest that people who compile new kernels should: 

 - not have a single symbolic link in sight (except the one that the 
   kernel build itself sets up, namely the "linux/include/asm" symlink 
   that is only used for the internal kernel compile itself) 

And yes, this is what I do. My /usr/src/linux still has the old 2.2.13 
header files, even though I haven't run a 2.2.13 kernel in a _loong_ 
time. But those headers were what Glibc was compiled against, so those 
headers are what matches the library object files. 

And this is actually what has been the suggested environment for at 
least the last five years. I don't know why the symlink business keeps 
on living on, like a bad zombie. Pretty much every distribution still 
has that broken symlink, and people still remember that the linux 
sources should go into "/usr/src/linux" even though that hasn't been 
true in a _loong_ time.</screen>

<para>The essential part is where Linus states that the header files should be
<emphasis>the ones which Glibc was compiled against</emphasis>. These are
the headers that should be used when you later compile other packages, as they
are the ones that match the object-code library files. By copying the headers,
we ensure that they remain available if later you upgrade your kernel.</para>

<para>Note, by the way, that it is perfectly all right to have the kernel sources
in <filename class="directory">/usr/src/linux</filename>, as long as you don't
have the <filename class="directory">/usr/include/{linux,asm}</filename>
symlinks.</para>

</sect2>


</sect1>


<sect1 id="ch06-man-pages">
<title>Installing Man-pages-1.64</title>
<?dbhtml filename="man-pages.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  15 MB</screen>

<sect2><title>Contents of Man-pages</title>

<!-- <para>(Last checked against version &man-pages-contversion;.)</para> -->

<para>The Man-pages package contains over 1200 manual pages. This
documentation details the C and C++ functions, describes a few
important device files and provides documents which would otherwise
be missing from other packages.</para>

<para><emphasis>Installed files</emphasis>: various manual pages</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Man-pages Installation Dependencies</title>

<!-- <para>(Last checked against version &man-pages-depversion;.)</para> -->

<para>Man-pages depends on: Bash, Coreutils, Make.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Man-pages</title>

<para>Install Man-pages by running:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-glibc">
<title>Installing Glibc-2.3.2</title>
<?dbhtml filename="glibc.html"?>

<screen>Estimated build time:           12.3 SBU
Estimated required disk space:  784 MB</screen>

<sect2><title>Contents of Glibc</title>

<!-- <para>(Last checked against version &glibc-contversion;.)</para> -->

<para>Glibc is the C library that provides the system calls and basic
functions such as open, malloc, printf, etc. The C library is used by all
dynamically linked programs.</para>

<para><emphasis>Installed programs</emphasis>: catchsegv, gencat, getconf,
getent, glibcbug, iconv, iconvconfig, ldconfig, ldd, lddlibc4, locale,
localedef, mtrace, nscd, nscd_nischeck, pcprofiledump, pt_chown, rpcgen,
rpcinfo, sln, sprof, tzselect, xtrace, zdump and zic</para>

<para><emphasis>Installed libraries</emphasis>: ld.so, libBrokenLocale.[a,so],
libSegFault.so, libanl.[a,so], libbsd-compat.a, libc.[a,so], libc_nonshared.a,
libcrypt.[a,so], libdl.[a,so], libg.a, libieee.a, libm.[a,so], libmcheck.a,
libmemusage.so, libnsl.a, libnss_compat.so, libnss_dns.so, libnss_files.so,
libnss_hesiod.so, libnss_nis.so, libnss_nisplus.so, libpcprofile.so,
libpthread.[a,so], libresolv.[a,so], librpcsvc.a, librt.[a,so], libthread_db.so
and libutil.[a,so]</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Glibc Installation Dependencies</title>

<!-- <para>(Last checked against version &glibc-depversion;.)</para> -->

<para>Glibc depends on: Bash, Binutils, Coreutils, Diffutils,
Gawk, GCC, Gettext, Grep, Make, Perl, Sed, Texinfo.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Glibc installation</title>

<para>The Glibc build system is very well self-contained and will install
perfectly, even though our compiler specs file and linker are still pointing
at <filename>/tools</filename>. We cannot adjust the specs and linker before
the Glibc install, because the Glibc autoconf tests would then give bogus
results and thus defeat our goal of achieving a clean build.</para>

<note><para>The test suite for Glibc in this section is considered
<emphasis>critical</emphasis>. Our advice is to not skip it under any
circumstance.</para></note>

<para>Before starting to build Glibc, remember to unpack the Glibc-linuxthreads
again inside the <filename>glibc-2.3.2</filename> directory, and to
unset any environment variables that override the default optimization
flags.</para>

<para>Apply the same patch we used previously:</para>
                                                                                
<screen><userinput>patch -Np1 -i ../glibc-2.3.2-sscanf-1.patch</userinput></screen>

<para>The Glibc documentation recommends building Glibc outside of the source
directory in a dedicated build directory:</para>

<screen><userinput>mkdir ../glibc-build
cd ../glibc-build</userinput></screen>

<para>Now prepare Glibc for compilation:</para>

<screen><userinput>../glibc-2.3.2/configure --prefix=/usr \
    --disable-profile --enable-add-ons \
    --libexecdir=/usr/lib --with-headers=/usr/include</userinput></screen>

<para>The meaning of the new configure options:</para>

<itemizedlist>
<listitem><para><userinput>--with-headers=/usr/include</userinput>: This
ensures that the kernel headers in <filename>/usr/include</filename> are used
for this build. If you don't pass this switch then the headers from
<filename>/tools/include</filename> are used which of course is not ideal
(although they should be identical). Using this switch has the advantage
that you will be informed immediately should you have forgotten to install the
kernel headers into <filename>/usr/include</filename>.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>Test the results:</para>

<screen><userinput>make check</userinput></screen>

<para>The test suite notes from <xref linkend="ch05-glibc"/> are still very much
appropriate here. Be sure to refer back there should you have any doubts.</para>

<para>Though it is a harmless message, the install stage of Glibc will
complain about the absence of <filename>/etc/ld.so.conf</filename>. Fix this
annoying little warning with:</para>

<screen><userinput>touch /etc/ld.so.conf</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>The locales that can make your system respond in a different language
weren't installed by the above command. Do it with this:</para>

<screen><userinput>make localedata/install-locales</userinput></screen>

<para>An alternative to running the previous command is to install only those
locales which you need or want. This can be achieved using the
<userinput>localedef</userinput> command. Information on this can be found in
the <filename>INSTALL</filename> file in the
<filename>glibc-2.3.2</filename> tree. However,  there are a number
of locales that are essential for the tests of future packages to pass
correctly. The following instructions, in place of the install-locales
command above, will install the minimum set of locales necessary for the
tests to run successfully:</para>

<screen><userinput>mkdir -p /usr/lib/locale
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i ja_JP -f EUC-JP ja_JP</userinput></screen>

<para>Finally, build the linuxthreads man pages:</para>

<screen><userinput>make -C ../glibc-2.3.2/linuxthreads/man</userinput></screen>

<para>And install these pages:</para>

<screen><userinput>make -C ../glibc-2.3.2/linuxthreads/man install</userinput></screen>

</sect2>
<sect2><title> </title><para> </para></sect2>

<sect2><title>Configuring Glibc</title>

<para>We need to create the <filename>/etc/nsswitch.conf</filename> file,
because, although Glibc provides defaults when this file is missing or corrupt,
the Glibc defaults don't work well with networking. Also, our time zone needs
to be set up.</para>

<para>Create a new file <filename>/etc/nsswitch.conf</filename> by running the
following:</para>

<screen><userinput>cat &gt; /etc/nsswitch.conf &lt;&lt; "EOF"</userinput>
# Begin /etc/nsswitch.conf

passwd: files
group: files
shadow: files

publickey: files

hosts: files dns
networks: files

protocols: db files
services: db files
ethers: db files
rpc: db files

netgroup: db files

# End /etc/nsswitch.conf
<userinput>EOF</userinput></screen>

<para>To find out what time zone you're in, run the following script:</para>

<screen><userinput>tzselect</userinput></screen>

<para>When you've answered a few questions about your location, the script will
output the name of your time zone, something like <emphasis>EST5EDT</emphasis>
or <emphasis>Canada/Eastern</emphasis>. Then create the
<filename>/etc/localtime</filename> file by running:</para>

<screen><userinput>cp --remove-destination /usr/share/zoneinfo/Canada/Eastern /etc/localtime</userinput></screen>

<para>The meaning of the option:</para>

<itemizedlist>
<listitem><para><userinput>--remove-destination</userinput>: This is needed to
force removal of the already existing symbolic link. The reason why we copy
instead of symlink is to cover the situation where <filename>/usr</filename> is
on a separate partition. This could matter, for example, when booted into single
user mode.</para></listitem>
</itemizedlist>

<para>Of course, instead of <emphasis>Canada/Eastern</emphasis>, fill in
the name of the time zone that the <userinput>tzselect</userinput> script
gave you.</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Configuring Dynamic Loader</title>

<para>By default, the dynamic loader
(<filename>/lib/ld-linux.so.2</filename>) searches through <filename class="directory">/lib</filename> and <filename class="directory">/usr/lib</filename> for dynamic libraries that are needed
by programs when you run them. However, if there are libraries in
directories other than <filename class="directory">/lib</filename> and
<filename class="directory">/usr/lib</filename>, you need to add them to
the <filename>/etc/ld.so.conf</filename> file for the dynamic
loader to find them. Two directories that are commonly known to contain
additional libraries are <filename class="directory">/usr/local/lib</filename> and <filename class="directory">/opt/lib</filename>, so we add those directories to the
dynamic loader's search path.</para>

<para>Create a new file <filename>/etc/ld.so.conf</filename> by running the
following:</para>

<screen><userinput>cat &gt; /etc/ld.so.conf &lt;&lt; "EOF"</userinput>
# Begin /etc/ld.so.conf

/usr/local/lib
/opt/lib

# End /etc/ld.so.conf
<userinput>EOF</userinput></screen>

</sect2>


</sect1>




<sect1 id="ch06-adjustingtoolchain">
<title>Re-adjusting the toolchain</title>
<?dbhtml filename="adjustingtoolchain.html"?>

<para>Now that the new C libraries have been installed, it's time to re-adjust
our toolchain. We'll adjust it so that it will link any newly compiled program
against the new C libraries. Basically, this is the reverse of what we did
in the "locking in" stage in the beginning of the previous chapter.</para>

<para>The first thing to do is to adjust the linker. For this we retained the
source and build directories from the second pass over Binutils. Install the
adjusted linker by running the following from within the
<filename class="directory">binutils-build</filename> directory:</para>

<screen><userinput>make -C ld INSTALL=/tools/bin/install install</userinput></screen>

<note><para>If you somehow missed the earlier warning to retain the Binutils
source and build directories from the second pass in Chapter 5 or otherwise
accidentally deleted them or just don't have access to them, don't worry, all is
not lost. Just ignore the above command. The result will be that the next
package, Binutils, will link against the Glibc libraries in
<filename class="directory">/tools</filename> rather than
<filename class="directory">/usr</filename>. This is not ideal, however, our
testing has shown that the resulting Binutils program binaries should be
identical.</para></note>

<para>From now on every compiled program will link <emphasis>only</emphasis>
against the libraries in <filename>/usr/lib</filename> and
<filename>/lib</filename>. The extra
<userinput>INSTALL=/tools/bin/install</userinput> is needed because the Makefile
created during the second pass still contains the reference to
<filename>/usr/bin/install</filename>, which we obviously haven't installed yet.
Some host distributions contain a <filename class="symlink">ginstall</filename>
symbolic link which takes precedence in the Makefile and thus can cause a
problem here. The above command takes care of this also.</para>

<para>You can now remove the Binutils source and build directories.</para>

<para>The next thing to do is to amend our GCC specs file so that it points
to the new dynamic linker. Just like earlier on, we use a sed to accomplish
this:</para>

<!-- Ampersands are needed to allow cut and paste -->

<screen><userinput>SPECFILE=/tools/lib/gcc-lib/*/*/specs &amp;&amp;
sed -e 's@ /tools/lib/ld-linux.so.2@ /lib/ld-linux.so.2@g' \
    $SPECFILE &gt; newspecfile &amp;&amp;
mv -f newspecfile $SPECFILE &amp;&amp;
unset SPECFILE</userinput></screen>

<para>Again, cutting and pasting the above is recommended. And just like
before, it is a good idea to check the specs file to ensure the intended
changes were actually made.</para>

<important><para>If you are working on a platform where the name of the dynamic
linker is something other than <filename>ld-linux.so.2</filename>, you
<emphasis>must</emphasis> substitute <filename>ld-linux.so.2</filename> with the
name of your platform's dynamic linker in the above commands. Refer back to
<xref linkend="ch05-toolchaintechnotes"/> if necessary.</para></important>

<!-- HACK - Force some whitespace to appease tidy -->
<literallayout/>

<caution><para>It is imperative at this point to stop and ensure that the
basic functions (compiling and linking) of the adjusted toolchain are working
as expected. For this we are going to perform a simple sanity check:</para>

<screen><userinput>echo 'main(){}' &gt; dummy.c
gcc dummy.c
readelf -l a.out | grep ': /lib'</userinput></screen>

<para>If everything is working correctly, there should be no errors, and the
output of the last command will be:</para>

<blockquote><screen>[Requesting program interpreter: /lib/ld-linux.so.2]</screen></blockquote>

<para>If you did not receive the output as shown above, or received no output at
all, then something is seriously wrong. You will need to investigate and retrace
your steps to find out where the problem is and correct it. There is no point in
continuing until this is done. Most likely something went wrong with the specs
file amendment above. Note especially that <filename>/lib</filename> now appears
as the prefix of our dynamic linker. Of course, if you are working on a platform
where the name of the dynamic linker is something other than
<filename>ld-linux.so.2</filename>, then the output will be slightly
different.</para>

<para>Once you are satisfied that all is well, clean up the test files:</para>

<screen><userinput>rm dummy.c a.out</userinput></screen>
</caution>

<!-- HACK - Force some whitespace to appease tidy -->
<literallayout/>

</sect1>


<sect1 id="ch06-binutils">
<title>Installing Binutils-2.14</title>
<?dbhtml filename="binutils.html"?>

<screen>Estimated build time:           1.4 SBU
Estimated required disk space:  167 MB</screen>

<sect2><title>Contents of Binutils</title>

<!-- <para>(Last checked against version &binutils-contversion;.)</para> -->

<para>Binutils is a collection of software development tools containing a
linker, assembler and other tools to work with object files and
archives.</para>

<para><emphasis>Installed programs</emphasis>: addr2line, ar, as, c++filt,
gprof, ld, nm, objcopy, objdump, ranlib, readelf, size, strings and
strip</para>

<para><emphasis>Installed libraries</emphasis>: libiberty.a, libbfd.[a,so] and
libopcodes.[a,so]</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Binutils Installation Dependencies</title>

<!-- <para>(Last checked against version &binutils-depversion;.)</para> -->

<para>Binutils depends on: Bash, Coreutils, Diffutils, GCC, Gettext,
Glibc, Grep, Make, Perl, Sed, Texinfo.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2><title>Installation of Binutils</title>

<para>Now is an appropriate time to verify that your pseudo terminals (PTYs) are
working properly inside the chroot environment. We will again quickly check that
everything is set up correctly by performing a simple test:</para>

<screen><userinput>expect -c "spawn ls"</userinput></screen>

<para>If you receive the message:</para>

<blockquote><screen>The system has no more ptys.  Ask your system administrator to create more.</screen></blockquote>

<para>Your chroot environment is not set up for proper PTY operation. In this
case there is no point in running the test suites for Binutils and GCC until you
are able to resolve the issue. Please refer back to <xref linkend="ch06-proc"/>
and <xref linkend="ch06-MAKEDEV"/> and perform the recommended steps to fix the
problem.</para>

<note><para>The test suite for Binutils in this section is considered
<emphasis>critical</emphasis>. Our advice is to not skip it under any
circumstances.</para> </note>

<para>This package is known to behave badly when you have changed its
default optimization flags (including the -march and -mcpu options).
Therefore, if you have defined any environment variables that override
default optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting
or modifying them when building Binutils.</para>

<para>The Binutils documentation recommends building Binutils outside of the
source directory in a dedicated build directory:</para>

<screen><userinput>mkdir ../binutils-build
cd ../binutils-build</userinput></screen>

<para>Now prepare Binutils for compilation:</para>

<screen><userinput>../binutils-2.14/configure \
    --prefix=/usr --enable-shared</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make tooldir=/usr</userinput></screen>

<para>Normally, the <emphasis>tooldir</emphasis> (the directory where the
executables end up) is set to $(exec_prefix)/$(target_alias), which expands
into, for example, <filename>/usr/i686-pc-linux-gnu</filename>. Since we only
build for our own system, we don't need this target specific directory in
<filename>/usr</filename>. That setup would be used if the system was used to
cross-compile (for example compiling a package on an Intel machine that
generates code that can be executed on PowerPC machines).</para>

<para>Test the results:</para>

<screen><userinput>make check</userinput></screen>

<para>The test suite notes from <xref linkend="ch05-binutils-pass2"/> are still
very much appropriate here. Be sure to refer back there should you have any
doubts.</para>

<para>Install the package:</para>

<screen><userinput>make tooldir=/usr install</userinput></screen>

<para>Install the <emphasis>libiberty</emphasis> header file that is needed by
some packages:</para>

<screen><userinput>cp ../binutils-2.14/include/libiberty.h /usr/include</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-gcc">
<title>Installing GCC-3.3.2</title>
<?dbhtml filename="gcc.html"?>

<screen>Estimated build time:           11.7 SBU
Estimated required disk space:  294 MB</screen>

<sect2><title>Contents of GCC</title>

<!-- <para>(Last checked against version &gcc-contversion;.)</para> -->

<para>The GCC package contains the GNU compiler collection, including
the C and C++ compilers.</para>

<para><emphasis>Installed programs</emphasis>: c++, cc (link to gcc),
cc1, cc1plus, collect2, cpp, g++, gcc, gccbug, and gcov</para>

<para><emphasis>Installed libraries</emphasis>: libgcc.a, libgcc_eh.a,
libgcc_s.so, libstdc++.[a,so] and libsupc++.a</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>GCC Installation Dependencies</title>

<!-- <para>(Last checked against version &gcc-depversion;.)</para> -->

<para>GCC depends on: Bash, Binutils, Coreutils, Diffutils, Findutils,
Gawk, Gettext, Glibc, Grep, Make, Perl, Sed, Texinfo.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of GCC</title>

<note><para>The test suite for GCC in this section is considered
<emphasis>critical</emphasis>. Our advice is to not skip it under any
circumstance.</para></note>

<para>This package is known to behave badly when you have changed its
default optimization flags (including the -march and -mcpu options).
Therefore, if you have defined any environment variables that override
default optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting
or modifying them when building GCC.</para>

<para>Unpack the GCC-core <emphasis>and</emphasis> the GCC-g++ tarball -- they
will unfold into the same directory. You should likewise extract the
GCC-testsuite package. The full GCC package contains even more
compilers. Instructions for building these can be found at
<ulink url="http://www.linuxfromscratch.org/blfs/view/stable/general/gcc.html"/>.</para>

<note><para>Be careful <emphasis role="strong">not</emphasis> to apply the GCC
Specs patch from Chapter 5 here.</para></note>

<para>First apply the No-Fixincludes patch that we also used in the previous
chapter:</para>

<screen><userinput>patch -Np1 -i ../gcc-3.3.2-no_fixincludes-1.patch</userinput></screen>

<para>Now apply a sed substitution that will suppress the installation of
<filename>libiberty.a</filename>. We want to use the version of
<filename>libiberty.a</filename> provided by Binutils:</para>

<screen><userinput>sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in</userinput></screen>

<para>The GCC documentation recommends building GCC outside of the source
directory in a dedicated build directory:</para>

<screen><userinput>mkdir ../gcc-build
cd ../gcc-build</userinput></screen>

<para>Now prepare GCC for compilation:</para>

<screen><userinput>../gcc-3.3.2/configure --prefix=/usr \
    --enable-shared --enable-threads=posix \
    --enable-__cxa_atexit --enable-clocale=gnu \
    --enable-languages=c,c++</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>Test the results, but don't stop at errors (you'll remember the few
known ones):</para>

<screen><userinput>make -k check</userinput></screen>

<para>The test suite notes from <xref linkend="ch05-gcc-pass2"/> are still very
much appropriate here. Be sure to refer back there should you have any
doubts.</para>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>Some packages expect the C PreProcessor to be installed in the
<filename>/lib</filename> directory.
To honor those packages, create this symlink:</para>

<screen><userinput>ln -s ../usr/bin/cpp /lib</userinput></screen>

<para>Many packages use the name <userinput>cc</userinput> to call the C
compiler. To satisfy those packages, create a symlink:</para>

<screen><userinput>ln -s gcc /usr/bin/cc</userinput></screen>

<note><para>At this point it is strongly recommended to repeat the sanity check
we performed earlier in this chapter. Refer back to
<xref linkend="ch06-adjustingtoolchain"/> and repeat the check. If the results
are wrong, then most likely you erroneously applied the GCC Specs patch from
Chapter 5.</para></note>

</sect2>

</sect1>



<sect1 id="ch06-coreutils">
<title>Installing Coreutils-5.0</title>
<?dbhtml filename="coreutils.html"?>

<screen>Estimated build time:           0.9 SBU
Estimated required disk space:  69 MB</screen>

<sect2><title>Contents of Coreutils</title>

<para>The Coreutils package contains a whole series of basic shell utilities.</para>

<!-- <para>(Last checked against version &coreutils-contversion;.)</para> -->

<para><emphasis>Installed programs</emphasis>: basename, cat, chgrp, chmod,
chown, chroot, cksum, comm, cp, csplit, cut, date, dd, df, dir, dircolors,
dirname, du, echo, env, expand, expr, factor, false, fmt, fold, groups, head,
hostid, hostname, id, install, join, link, ln, logname, ls, md5sum,
mkdir, mkfifo, mknod, mv, nice, nl, nohup, od, paste, pathchk, pinky, pr,
printenv, printf, ptx, pwd, readlink, rm, rmdir, seq, sha1sum, shred, sleep,
sort, split, stat, stty, su, sum, sync, tac, tail, tee, test, touch, tr, true,
tsort, tty, uname, unexpand, uniq, unlink, uptime, users, vdir, wc, who,
whoami and yes</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Coreutils Installation Dependencies</title>

<!-- <para>(Last checked against version &coreutils-depversion;.)</para> -->

<para>Coreutils depends on: Bash, Binutils, Coreutils, Diffutils, GCC,
Gettext, Glibc, Grep, Make, Perl, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Coreutils</title>

<para>Normally the functionality of <userinput>uname</userinput> is somewhat
broken, in that the <userinput>-p</userinput> switch always returns "unknown".
The following patch fixes this behaviour for Intel architectures:</para>

<screen><userinput>patch -Np1 -i ../coreutils-5.0-uname.patch</userinput></screen>

<para>We do not want Coreutils to install its version of the
<userinput>hostname</userinput> program, because it is inferior to the version
provided by Net-tools. Prevent its installation by applying a patch:</para>

<screen><userinput>patch -Np1 -i ../coreutils-5.0-hostname-2.patch</userinput></screen>

<para>Now prepare Coreutils for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>The <userinput>su</userinput> program from Coreutils wasn't installed in
Chapter 5 because it needed <emphasis>root</emphasis> privilege to do so. We're
going to need it in a few moments for the test suite. Therefore we work around
the problem by installing it now:</para>

<screen><userinput>make install-root</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly. However, this particular test suite
makes some assumptions with regards to the presence of non-root users and
groups that don't apply this early into the LFS build. We therefore create
a dummy system user and two dummy groups to allow the tests to run
properly. Should you choose not to run the test suite, skip down to
"Install the package".  The following commands will prepare us for the test
suite. Create two dummy groups and a dummy user name:</para>

<screen><userinput>echo "dummy1:x:1000" &gt;&gt; /etc/group
echo "dummy2:x:1001:dummy" &gt;&gt; /etc/group
echo "dummy:x:1000:1000:::/bin/bash" &gt;&gt; /etc/passwd</userinput></screen>

<para>Some tests are meant to run as <emphasis>root</emphasis>:</para>

<screen><userinput>make check-root</userinput></screen>

<para>The remainder of the tests are run as the <emphasis>dummy</emphasis>
user:</para>

<screen><userinput>su dummy -c "make RUN_EXPENSIVE_TESTS=yes check"</userinput></screen>

<para>Remove the dummy groups and user name:</para>

<screen><userinput>sed -i.bak '/dummy/d' /etc/passwd /etc/group</userinput></screen>

<para>Install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>And move some programs to their proper locations:</para>

<screen><userinput>mv /usr/bin/{basename,cat,chgrp,chmod,chown,cp,dd,df} /bin
mv /usr/bin/{date,echo,false,head,install,ln,ls} /bin
mv /usr/bin/{mkdir,mknod,mv,pwd,rm,rmdir,sync} /bin
mv /usr/bin/{sleep,stty,su,test,touch,true,uname} /bin
mv /usr/bin/chroot /usr/sbin</userinput></screen>

<para>We'll be using the <filename>kill</filename> program from the Procps
package (installed as <filename>/bin/kill</filename> later in the chapter).
Remove the one installed by Coreutils:</para>

<screen><userinput>rm /usr/bin/kill</userinput></screen>

<para>Finally, create a few necessary symlinks:</para>

<screen><userinput>ln -s test /bin/[
ln -s ../../bin/install /usr/bin</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-zlib">
<title>Installing Zlib-1.2.1</title>
<?dbhtml filename="zlib.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  1.5 MB</screen>

<sect2><title>Contents of Zlib</title>

<!-- <para>(Last checked against version &zlib-contversion;.)</para> -->

<para>The Zlib package contains the libz library, which is used by some
programs for its compression and uncompression functions.</para>

<para><emphasis>Installed libraries</emphasis>: libz[a,so]</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Zlib Installation Dependencies</title>

<!-- <para>(Last checked against version &zlib-depversion;.)</para> -->

<para>Zlib depends on: Binutils, Coreutils, GCC, Glibc, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Zlib</title>

<para>Prepare Zlib for compilation:</para>

<screen><userinput>./configure --prefix=/usr --shared</userinput></screen>

<note><para>Zlib is known to build its shared library incorrectly if CFLAGS is
specified in the environment. If you are using your own CFLAGS variable, be
sure to add the <emphasis role="strong">-fPIC</emphasis> directive to your
CFLAGS for the duration of the above command, then remove it
afterwards.</para></note>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly. The test suite for Zlib is quick and
painless so we recommend it be run. The following command will test the shared
library:</para>

<screen><userinput>make check</userinput></screen>

<para>Install the shared library:</para>

<screen><userinput>make install</userinput></screen>

<para>Now also build the non-shared (static) library:</para>
<screen><userinput>make clean
./configure --prefix=/usr
make</userinput></screen>

<para>The following command will test the static library:</para>

<screen><userinput>make check</userinput></screen>

<para>Install the static library:</para>

<screen><userinput>make install</userinput></screen>

<para>And fix the permissions on the static library:</para>

<screen><userinput>chmod 644 /usr/lib/libz.a</userinput></screen>

<para>It is good policy and common practice to place important libraries into
the <filename class="directory">/lib</filename> directory. This matters most
in scenarios where <filename class="directory">/usr</filename> is on a
separate partition. Essentially, the run-time components of any libraries
depended upon by programs in <filename class="directory">/bin</filename> or
<filename class="directory">/sbin</filename> should reside in
<filename class="directory">/lib</filename> so that they are on the root
partition and available in the event of
<filename class="directory">/usr</filename> being inaccessible.</para>

<para>Therefore we move the run-time components of the shared Zlib into
<filename class="directory">/lib</filename> by issuing the following
command:</para>

<screen><userinput>mv /usr/lib/libz.so.* /lib</userinput></screen>

<para>Now we need to fix up the <filename>/usr/lib/libz.so</filename> symlink
because we just moved the location of the file it points to:</para>

<screen><userinput>ln -sf ../../lib/libz.so.1 /usr/lib/libz.so</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-lfs-utils">
<title>Installing Lfs-Utils-0.4.2</title>
<?dbhtml filename="lfs-utils.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  1.1 MB</screen>

<sect2><title>Contents of Lfs-Utils</title>

<!-- <para>(Last checked against version &lfs-utils-contversion;.)</para> -->

<para>The Lfs-Utils package contains some miscellaneous programs used by
various packages, but are not large enough to warrant their own
individual package.</para>

<para><emphasis>Installed programs</emphasis>: mktemp, tempfile, http-get
and iana-net</para>

<para><emphasis>Installed files</emphasis>: protocols, services</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Lfs-Utils Installation Dependencies</title>

<literallayout>(No dependencies checked yet.)</literallayout>
</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Lfs-Utils</title>

<para>Prepare Lfs-Utils for compilation:</para>

<screen><userinput>./configure --prefix=/usr --with-libc</userinput></screen>

<para>The meaning of the configure option:</para>

<itemizedlist>
<listitem><para><userinput>--with-libc</userinput>: This causes the
<filename>mktemp</filename> program to use the <emphasis>mkstemp</emphasis>
and <emphasis>mkdtemp</emphasis> functions from the system C
library.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

<para>Now copy two supporting files included in the Lfs-Utils tarball to
their destination:</para>

<screen><userinput>cp etc/{services,protocols} /etc</userinput></screen>

<para>The <filename>/etc/services</filename> file is used to resolve service
numbers to human-readable names, and the <filename>/etc/protocols</filename>
does the same for protocol numbers.</para>

</sect2>

</sect1>


<sect1 id="ch06-findutils">
<title>Installing Findutils-4.3CR20</title>
<?dbhtml filename="findutils.html"?>

<screen>Estimated build time:           0.2 SBU
Estimated required disk space:  7.5 MB</screen>

<sect2><title>Contents of Findutils</title>

<!-- <para>(Last checked against version &findutils-contversion;.)</para> -->

<para>The Findutils package contains programs to find files, either
on-the-fly (by doing a live recursive search through directories and only
showing files that match the specifications) or by searching through a
database.</para>

<para><emphasis>Installed programs</emphasis>: bigram, code, find, frcode,
locate, updatedb and xargs</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Findutils Installation Dependencies</title>

<!-- <para>(Last checked against version &findutils-depversion;.)</para> -->

<para>Findutils depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installing Findutils</title>

<para>Prepare Findutils for compilation:</para>

<screen><userinput>./configure --prefix=/usr --libexecdir=/usr/lib/locate</userinput></screen>

<para>By default, the location of the updatedb database is in
<filename>/usr/var</filename>. To make the location of
<filename>/var/lib/misc/locatedb</filename> file FHS compliant, pass the
<emphasis>--localstatedir=/var/lib/misc</emphasis> option to
<userinput>configure</userinput>.</para>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-gawk">
<title>Installing Gawk-3.1.3</title>
<?dbhtml filename="gawk.html"?>

<screen>Estimated build time:           0.2 SBU
Estimated required disk space:  17 MB</screen>

<sect2><title>Contents of Gawk</title>

<!-- <para>(Last checked against version &gawk-contversion;.)</para> -->

<para>Gawk is an awk implementation that is used to manipulate text
files.</para>

<para><emphasis>Installed programs</emphasis>: awk (link to gawk), gawk,
gawk-3.1.3, grcat, igawk, pgawk, pgawk-3.1.3 and pwcat</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Gawk Installation Dependencies</title>

<!-- <para>(Last checked against version &gawk-depversion;.)</para> -->

<para>Gawk depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Gawk</title>

<para>First apply a patch to fix the following issues:</para>

<itemizedlist>
<listitem><para>Gawk's default location for some of its executables is
<filename>$prefix/libexec/awk</filename>. This location doesn't comply
with the FHS, which never even mentions a directory called
<filename>libexec</filename>. The patch makes it possible to pass a
<emphasis>--libexecdir</emphasis> switch to the configure script, so that we
can use a more appropriate location for the <userinput>grcat</userinput> and
<userinput>pwcat</userinput> binaries:
<filename>/usr/lib/gawk</filename>.</para></listitem>

<listitem><para>Gawk's default data directory is
<filename>$prefix/share/awk</filename>. But package-specific
directories should be named using the package name and version number
(for example: <filename>gawk-7.7.2.</filename>) and not simply the package
name, as there may be different versions of a package installed on the system.
The patch changes the name of the data directory to the correct
<filename>$prefix/share/gawk-3.1.3</filename>.</para></listitem>

<listitem><para>The patch also ensures that this data directory, including its
contents, is removed on a <emphasis>make uninstall</emphasis>.</para></listitem>
</itemizedlist>

<screen><userinput>patch -Np1 -i ../gawk-3.1.3-libexecdir.patch</userinput></screen>

<para>Now prepare Gawk for compilation:</para>

<screen><userinput>./configure --prefix=/usr --libexecdir=/usr/lib/gawk</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-ncurses">
<title>Installing Ncurses-5.3</title>
<?dbhtml filename="ncurses.html"?>

<screen>Estimated build time:           0.6 SBU
Estimated required disk space:  27 MB</screen>

<sect2><title>Contents of Ncurses</title>

<!-- <para>(Last checked against version &ncurses-contversion;.)</para> -->

<para>The Ncurses package provides character and terminal handling
libraries, including panels and menus.</para>

<para><emphasis>Installed programs</emphasis>: captoinfo (link to tic), clear,
infocmp, infotocap (link to tic), reset (link to tset), tack, tic, toe, tput
and tset</para>

<para><emphasis>Installed libraries</emphasis>: libcurses.[a,so] (link to
libncurses.[a,so]), libform.[a,so], libmenu.[a,so], libncurses++.a,
libncurses.[a,so], libpanel.[a,so]</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Ncurses Installation Dependencies</title>

<!-- <para>(Last checked against version &ncurses-depversion;.)</para> -->

<para>Ncurses depends on: Bash, Binutils, Coreutils, Diffutils,
Gawk, GCC, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Ncurses</title>

<para>Fix a minor problem related to the <filename>etip.h</filename> header
file:</para>

<screen><userinput>patch -Np1 -i ../ncurses-5.3-etip-2.patch</userinput></screen>

<para>Now prepare Ncurses for compilation:</para>

<screen><userinput>./configure --prefix=/usr --with-shared \
    --without-debug</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>Install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>Give the Ncurses libraries execute permissions:</para>

<screen><userinput>chmod 755 /usr/lib/*.5.3</userinput></screen>

<para>And fix a library that shouldn't be executable:</para>

<screen><userinput>chmod 644 /usr/lib/libncurses++.a</userinput></screen>

<para>Move the libraries to the <filename>/lib</filename> directory,
where they're expected to reside:</para>

<screen><userinput>mv /usr/lib/libncurses.so.5* /lib</userinput></screen>

<para>Since the libraries have been moved to
<filename>/lib</filename>, a few symlinks are currently pointing
towards non-existing files. Recreate those symlinks:</para>

<screen><userinput>ln -sf ../../lib/libncurses.so.5 /usr/lib/libncurses.so
ln -sf libncurses.so /usr/lib/libcurses.so</userinput></screen>
</sect2>

</sect1>


<sect1 id="ch06-vim">
<title>Installing Vim-6.2</title>
<?dbhtml filename="vim.html"?>

<screen>Estimated build time:           0.4 SBU
Estimated required disk space:  34 MB</screen>

<sect2>
<title>Alternatives to Vim</title>

<para>If you prefer another editor -- like Emacs, Joe, or Nano -- to Vim,
have a look at <ulink url="http://www.linuxfromscratch.org/blfs/view/stable/postlfs/editors.html"/> for
suggested installation instructions.</para>

</sect2>

<sect2><title>Contents of Vim</title>

<!-- <para>(Last checked against version &vim-contversion;.)</para> -->

<para>The Vim package contains a configurable text editor built to
enable efficient text editing.</para>

<para><emphasis>Installed programs</emphasis>: efm_filter.pl, efm_perl.pl, ex
(link to vim), less.sh, mve.awk, pltags.pl, ref, rview (link to vim), rvim
(link to vim), shtags.pl, tcltags, vi (link to vim), view (link to vim), vim,
vim132, vim2html.pl, vimdiff (link to vim), vimm, vimspell.sh, vimtutor
and xxd</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Vim Installation Dependencies</title>

<!-- <para>(Last checked against version &vim-depversion;.)</para> -->

<para>Vim depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Ncurses, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Vim</title>

<para>First change the default locations of the <filename>vimrc</filename> and
<filename>gvimrc</filename> files to <filename class="directory">/etc</filename>.</para>

<screen><userinput>echo '#define SYS_VIMRC_FILE "/etc/vimrc"' &gt;&gt; src/feature.h
echo '#define SYS_GVIMRC_FILE "/etc/gvimrc"' &gt;&gt; src/feature.h</userinput></screen>

<para>Now prepare Vim for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which performs a number of
checks to ensure it will function correctly. However, the Vim test suite will
output a whole lot of seemingly garbage characters to screen which can
sometimes wreak havoc with the running terminal. Accordingly, the running of
the test suite here is optional. Should you choose to run the Vim test suite,
the following command will do so:</para>

<screen><userinput>make test</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>When called as <userinput>vi</userinput>, <userinput>vim</userinput>
will run in old-fashioned vi-mode. To allow this, create a symlink:</para>

<screen><userinput>ln -s vim /usr/bin/vi</userinput></screen>

<para>If you are going to install the X Window system on your LFS system, you
may want to re-compile Vim after having installed X. Vim comes with a nice GUI
version of the editor that requires X and a few other libraries to be
installed. For more information read the Vim documentation.</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2><title>Configuring Vim</title>

<para>By default, <userinput>vim</userinput> runs in vi-compatible mode. Some
people might like this, but we prefer to run <userinput>vim</userinput> in its
own mode (else we wouldn't have included it in this book, but the original
<userinput>vi</userinput>). Create a default vim configuration file by running
the following:</para>

<screen><userinput>cat &gt; /etc/vimrc &lt;&lt; "EOF"</userinput>
" Begin /etc/vimrc

set nocompatible
set backspace=2
syntax on

" End /etc/vimrc
<userinput>EOF</userinput></screen>

<para>The <userinput>set nocompatible</userinput> will make
<userinput>vim</userinput> behave in a more useful way than the default
vi-compatible manner. The <userinput>set backspace=2</userinput> allows
backspacing over line breaks, autoindent and the start of insert. And the
<userinput>syntax on</userinput> switches on <userinput>vim</userinput>'s
semantic colouring.</para>

</sect2>



</sect1>


<sect1 id="ch06-m4">
<title>Installing M4-1.4</title>
<?dbhtml filename="m4.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  3.0 MB</screen>

<sect2><title>Contents of M4</title>

<!-- <para>(Last checked against version &m4-contversion;.)</para> -->

<para>M4 is a macro processor. It copies input to output, expanding
macros as it goes. Macros are either built-in or user-defined and can
take any number of arguments. Besides just doing macro expansion, m4
has built-in functions for including named files, running Unix
commands, doing integer arithmetic, manipulating text in various ways,
recursion, etc. The m4 program can be used either as a front-end to a
compiler or as a macro processor in its own right.</para>

<para><emphasis>Installed program</emphasis>: m4</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>M4 Installation Dependencies</title>

<!-- <para>(Last checked against version &m4-depversion;.)</para> -->

<para>M4 depends on: Bash, Binutils, Coreutils, Diffutils, GCC,
Gettext, Glibc, Grep, Make, Perl, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of M4</title>

<para>Prepare M4 for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-bison">
<title>Installing Bison-1.875</title>
<?dbhtml filename="bison.html"?>

<screen>Estimated build time:           0.6 SBU
Estimated required disk space:  10.6 MB</screen>

<sect2><title>Contents of Bison</title>

<!-- <para>(Last checked against version &bison-contversion;.)</para> -->

<para>Bison is a parser generator, a replacement for yacc. Bison
generates a program that analyzes the structure of a text file.</para>

<para><emphasis>Installed programs</emphasis>: bison and yacc</para>

<para><emphasis>Installed library</emphasis>: liby.a</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Bison Installation Dependencies</title>

<!-- <para>(Last checked against version &bison-depversion;.)</para> -->

<para>Bison depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Gettext, Glibc, Grep, M4, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Bison</title>

<para>First fix a minor compilation problem that Bison has with some packages,
the patch is backported from CVS:</para>

<screen><userinput>patch -Np1 -i ../bison-1.875-attribute.patch</userinput></screen>

<para>Now prepare Bison for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so (and takes a long time):</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-less">
<title>Installing Less-381</title>
<?dbhtml filename="less.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  3.4 MB</screen>

<sect2><title>Contents of Less</title>

<!-- <para>(Last checked against version &less-contversion;.)</para> -->

<para>Less is a file pager, or text viewer. It displays the contents
of a file, or stream, and has the ability to scroll. Less has a few
features not included in the <userinput>more</userinput> pager,
such as the ability to scroll backwards.</para>

<para><emphasis>Installed programs</emphasis>: less, lessecho and lesskey</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Less Installation Dependencies</title>

<!-- <para>(Last checked against version &less-depversion;.)</para> -->

<para>Less depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Ncurses, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Less</title>

<para>Prepare Less for compilation:</para>

<screen><userinput>./configure --prefix=/usr --bindir=/bin --sysconfdir=/etc</userinput></screen>

<para>The meaning of the configure option:</para>

<itemizedlist>
<listitem><para><userinput>--sysconfdir=/etc</userinput>: This option tells the
programs created by the package to look in <filename>/etc</filename> for their
configuration files.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-groff">
<title>Installing Groff-1.19</title>
<?dbhtml filename="groff.html"?>

<screen>Estimated build time:           0.5 SBU
Estimated required disk space:  43 MB</screen>

<sect2><title>Contents of Groff</title>

<!-- <para>(Last checked against version &groff-contversion;.)</para> -->

<para>The Groff package includes several text processing programs
for text formatting. Groff translates standard text and special
commands into formatted output, such as what you see in a manual
page.</para>

<para><emphasis>Installed programs</emphasis>: addftinfo, afmtodit, eqn,
eqn2graph, geqn (link to eqn), grn, grodvi, groff, groffer, grog, grolbp,
grolj4, grops, grotty, gtbl (link to tbl), hpftodit, indxbib, lkbib,
lookbib, mmroff, neqn, nroff, pfbtops, pic, pic2graph, post-grohtml,
pre-grohtml, refer, soelim, tbl, tfmtodit, troff and zsoelim (link to
soelim)</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Groff Installation Dependencies</title>

<!-- <para>(Last checked against version &groff-depversion;.)</para> -->

<para>Groff depends on: Bash, Binutils, Coreutils, Diffutils,
Gawk, GCC, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Groff</title>

<para>Groff expects the environment variable PAGE to contain the default paper
size. For those in the United States, the command below is appropriate.  If you
live elsewhere, you may want to change <emphasis>PAGE=letter</emphasis> to
<emphasis>PAGE=A4</emphasis>.</para>

<para>Prepare Groff for compilation:</para>

<screen><userinput>PAGE=letter ./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

<para>Some documentation programs, such as <userinput>xman</userinput>,
will not work properly without the following symlinks:</para>

<screen><userinput>ln -s soelim /usr/bin/zsoelim
ln -s eqn /usr/bin/geqn
ln -s tbl /usr/bin/gtbl</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-sed">
<title>Installing Sed-4.0.8</title>
<?dbhtml filename="sed.html"?>

<screen>Estimated build time:           0.2 SBU
Estimated required disk space:  5.2 MB</screen>

<sect2><title>Contents of Sed</title>

<!-- <para>(Last checked against version &sed-contversion;.)</para> -->

<para>sed is a stream editor. A stream editor is used to perform basic text
transformations on an input stream (a file or input from a
pipeline).</para>

<para><emphasis>Installed program</emphasis>: sed</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Sed Installation Dependencies</title>

<!-- <para>(Last checked against version &sed-depversion;.)</para> -->

<para>Sed depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Texinfo.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Sed</title>

<para>Prepare Sed for compilation:</para>

<screen><userinput>./configure --prefix=/usr --bindir=/bin</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-flex">
<title>Installing Flex-2.5.4a</title>
<?dbhtml filename="flex.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  3.4 MB</screen>

<sect2><title>Contents of Flex</title>

<!-- <para>(Last checked against version &flex-contversion;.)</para> -->

<para>The Flex package is used to generate programs which recognize
patterns in text.</para>

<para><emphasis>Installed programs</emphasis>: flex, flex++ (link to flex)
and lex</para>

<para><emphasis>Installed library</emphasis>: libfl.a</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Flex Installation Dependencies</title>

<!-- <para>(Last checked against version &flex-depversion;.)</para> -->

<para>Flex depends on: Bash, Binutils, Bison, Coreutils, Diffutils,
GCC, Gettext, Glibc, Grep, M4, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Flex</title>

<para>Prepare Flex for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make bigcheck</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>There are some packages that expect to find the Lex library in
<filename>/usr/lib</filename>. Create a symlink to account for this:</para>

<screen><userinput>ln -s libfl.a /usr/lib/libl.a</userinput></screen>

<para>A few programs don't know about <userinput>flex</userinput> yet and try
to run its predecessor <userinput>lex</userinput>. To support those programs,
create a shell script named <filename>lex</filename> that calls
<userinput>flex</userinput> in Lex emulation mode:</para>

<screen><userinput>cat &gt; /usr/bin/lex &lt;&lt; "EOF"</userinput>
#!/bin/sh
# Begin /usr/bin/lex

exec /usr/bin/flex -l "$@"

# End /usr/bin/lex
<userinput>EOF
chmod 755 /usr/bin/lex</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-gettext">
<title>Installing Gettext-0.13.1</title>
<?dbhtml filename="gettext.html"?>

<screen>Estimated build time:           6.9 SBU
Estimated required disk space:  55 MB</screen>

<sect2><title>Contents of Gettext</title>

<!-- <para>(Last checked against version &gettext-contversion;.)</para> -->

<para>The Gettext package is used for internationalization and
localization. Programs can be compiled with Native Language Support
(NLS) which enable them to output messages in the user's native
language.</para>

<para><emphasis>Installed programs</emphasis>: autopoint, config.charset,
config.rpath, envsubst, gettext, gettextize, hostname, msgattrib, msgcat, msgcmp,
msgcomm, msgconv, msgen, msgexec, msgfilter, msgfmt, msggrep, msginit,
msgmerge, msgunfmt, msguniq, ngettext, project-id, team-address, trigger,
urlget, user-email and xgettext</para>

<para><emphasis>Installed libraries</emphasis>: libasprintf[a,so],
libgettextlib[a,so], libgettextpo[a,so] and libgettextsrc[a,so]</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Gettext Installation Dependencies</title>

<!-- <para>(Last checked against version &gettext-depversion;.)</para> -->

<para>Gettext depends on: Bash, Binutils, Bison, Coreutils,
Diffutils, Gawk, GCC, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Gettext</title>

<para>Prepare Gettext for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which performs a number of
checks to ensure it will function correctly. It's worth noting that Gettext
does not play a critical role in the overall operation of an LFS system. In
addition, the Gettext test suite runs for quite a long period of time.
Accordingly, the running of the test suite here is not crucial. Should you
choose to run the Gettext test suite, the following command will do
so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-net-tools">
<title>Installing Net-tools-1.60</title>
<?dbhtml filename="net-tools.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  9.4 MB</screen>

<sect2><title>Contents of Net-tools</title>

<!-- <para>(Last checked against version &net-tools-contversion;.)</para> -->

<para>The Net-tools package contains a collection of programs
which form the base of Linux networking.</para>

<para><emphasis>Installed programs</emphasis>: arp, dnsdomainname (link to
hostname), domainname (link to hostname), hostname, ifconfig, nameif, netstat,
nisdomainname (link to hostname), plipconfig, rarp, route, slattach and
ypdomainname (link to hostname)</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Net-tools Installation Dependencies</title>

<!-- <para>(Last checked against version &net-tools-depversion;.)</para> -->

<para>Net-tools depends on: Bash, Binutils, Coreutils, GCC,
Glibc, Make.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Net-tools</title>

<para>If you don't know what to answer to all the questions asked during the
<userinput>make config</userinput> phase below, then just accept the defaults.
This will be just fine in the majority of cases. What you're asked here is a
bunch of questions about which network protocols you've enabled in your
kernel. The default answers will enable the tools from this package to work
with the most common protocols: TCP, PPP, and several others. You still need
to actually enable these protocols in the kernel -- what you do here is merely
telling the package to include support for those protocols in its programs,
but it's up to the kernel to make the protocols available.</para>

<para>First fix a small syntax problem in the sources of the mii-tool
program:</para>

<screen><userinput>patch -Np1 -i ../net-tools-1.60-miitool-gcc33-1.patch</userinput></screen>

<para>Now prepare Net-tools for compilation with:</para>

<screen><userinput>make config</userinput></screen>

<para>If you intend to accept the default settings, you may skip the
questions generated by <emphasis>make config</emphasis> by running
<userinput>yes "" | make config</userinput> instead.</para>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make update</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-inetutils">
<title>Installing Inetutils-1.4.2</title>
<?dbhtml filename="inetutils.html"?>

<screen>Estimated build time:           0.2 SBU
Estimated required disk space:  11 MB</screen>

<sect2><title>Contents of Inetutils</title>

<!-- <para>(Last checked against version &inetutils-contversion;.)</para> -->

<para>The Inetutils package contains network clients and servers.</para>

<para><emphasis>Installed programs</emphasis>: ftp, ping, rcp, rlogin, rsh,
talk, telnet and tftp</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Inetutils Installation Dependencies</title>

<!-- <para>(Last checked against version &inetutils-depversion;.)</para> -->

<para>Inetutils depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Glibc, Grep, Make, Ncurses, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Inetutils</title>

<para>We are not going to install all the programs that come with Inetutils.
However, the Inetutils build system will insist on installing all the man
pages anyway. The following patch will correct this situation:</para>

<screen><userinput>patch -Np1 -i ../inetutils-1.4.2-no_server_man_pages-1.patch</userinput></screen>

<para>Now prepare Inetutils for compilation:</para>

<screen><userinput>./configure --prefix=/usr --disable-syslogd \
    --libexecdir=/usr/sbin --disable-logger \
    --sysconfdir=/etc --localstatedir=/var \
    --disable-whois --disable-servers</userinput></screen>

<para>The meaning of the configure options:</para>

<itemizedlist>
<listitem><para><userinput>--disable-syslogd</userinput>: This option
prevents inetutils from installing the System Log Daemon, which is
installed with the Sysklogd package.</para></listitem>

<listitem><para><userinput>--disable-logger</userinput>: This option
prevents inetutils from installing the logger program, which is used by
scripts to pass messages to the System Log Daemon. We do not install it
because Util-linux installs a better version later.</para></listitem>

<listitem><para><userinput>--disable-whois</userinput>: This option disables
the building of the inetutils whois client, which is woefully out of date.
Instructions for a better whois client are in the BLFS book.</para></listitem>

<listitem><para><userinput>--disable-servers</userinput>: This disables the
installation of the various network servers included as part of the Inetutils
package. These servers are deemed not appropriate in a basic LFS system. Some
are insecure by nature and are only considered safe on trusted networks. More
information can be found at
<ulink url="http://www.linuxfromscratch.org/blfs/view/stable/basicnet/inetutils.html"/>. Note that better
replacements are available for many of these servers.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>Install it:</para>

<screen><userinput>make install</userinput></screen>

<para>And move the <userinput>ping</userinput> program to its proper place:</para>

<screen><userinput>mv /usr/bin/ping /bin</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-perl">
<title>Installing Perl-5.8.2</title>
<?dbhtml filename="perl.html"?>

<screen>Estimated build time:           2.9 SBU
Estimated required disk space:  143 MB</screen>

<sect2><title>Contents of Perl</title>

<!-- <para>(Last checked against version &perl-contversion;.)</para> -->

<para>The Perl package contains perl, the Practical Extraction
and Report Language. Perl combines some of the best features of C,
sed, awk and sh into one powerful language.</para>

<para><emphasis>Installed programs</emphasis>: a2p, c2ph, dprofpp, enc2xs,
find2perl, h2ph, h2xs, libnetcfg, perl, perl5.8.2 (link to perl),
perlbug, perlcc, perldoc, perlivp, piconv, pl2pm, pod2html, pod2latex, pod2man,
pod2text, pod2usage, podchecker, podselect, psed (link to s2p), pstruct (link
to c2ph), s2p, splain and xsubpp</para> 

<para><emphasis>Installed libraries</emphasis>: (too many to name)</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Perl Installation Dependencies</title>

<!-- <para>(Last checked against version &perl-depversion;.)</para> -->

<para>Perl depends on: Bash, Binutils, Coreutils, Diffutils,
Gawk, GCC, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Perl</title>

<para>Prepare Perl for compilation:</para>

<screen><userinput>./configure.gnu --prefix=/usr -Dpager="/bin/less -isR"</userinput></screen>

<para>If you want more control over the way Perl sets itself up to be
built, you can run the interactive <userinput>Configure</userinput> script
instead and modify the way Perl is built. If you think you can live with the
(sensible) defaults Perl auto-detects, then just use the command listed
above.</para>

<para>The meaning of the configure option:</para>

<itemizedlist>
<listitem><para><userinput>-Dpager="/bin/less -isR"</userinput>: This corrects
an error in the perldoc code with the invocation of the less
program.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, you first
have to create a basic <filename>/etc/hosts</filename> file, needed by a
couple of tests to resolve the name <emphasis>localhost</emphasis>:</para>

<screen><userinput>echo "127.0.0.1 localhost $(hostname)" &gt; /etc/hosts</userinput></screen>

<para>Now run the tests, if you wish:</para>

<screen><userinput>make test</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-texinfo">
<title>Installing Texinfo-4.6</title>
<?dbhtml filename="texinfo.html"?>

<screen>Estimated build time:           0.2 SBU
Estimated required disk space:  17 MB</screen>

<sect2><title>Contents of Texinfo</title>

<!-- <para>(Last checked against version &texinfo-contversion;.)</para> -->

<para>The Texinfo package contains programs used for reading,
writing and converting Info documents, which provide system
documentation.</para>

<para><emphasis>Installed programs</emphasis>: info, infokey, install-info,
makeinfo, texi2dvi and texindex</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Texinfo Installation Dependencies</title>

<!-- <para>(Last checked against version &texinfo-depversion;.)</para> -->

<para>Texinfo depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Ncurses, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Texinfo</title>

<para>Prepare Texinfo for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>Install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>And optionally install the components belonging in a TeX installation:</para>

<screen><userinput>make TEXMF=/usr/share/texmf install-tex</userinput></screen>

<para>The meaning of the make parameter:</para>

<itemizedlist>
<listitem><para><userinput>TEXMF=/usr/share/texmf</userinput>: The TEXMF
makefile variable holds the location of the root of your TeX tree if, for
example, you plan to install a TeX package later on.</para></listitem>
</itemizedlist>

<para>The Info documentation system uses a plain text file to hold its list of
menu entries. The file is located at <filename>/usr/share/info/dir</filename>.
Unfortunately, due to occasional problems in the Makefiles of various packages,
it can sometimes get out of step with the Info manuals actually installed on the
system. If ever you need to recreate the
<filename>/usr/share/info/dir</filename> file, the following optional commands
will accomplish the task:</para>

<screen><userinput>cd /usr/share/info
rm dir
for f in *
do install-info $f dir 2&gt;/dev/null
done</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-autoconf">
<title>Installing Autoconf-2.59</title>
<?dbhtml filename="autoconf.html"?>

<screen>Estimated build time:           2.9 SBU
Estimated required disk space:  7.7 MB</screen>

<sect2><title>Contents of Autoconf</title>

<!-- <para>(Last checked against version &autoconf-contversion;.)</para> -->

<para>Autoconf produces shell scripts which automatically configure source
code.</para>

<para><emphasis>Installed programs</emphasis>: autoconf, autoheader, autom4te,
autoreconf, autoscan, autoupdate and ifnames</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Autoconf Installation Dependencies</title>

<!-- <para>(Last checked against version &autoconf-depversion;.)</para> -->

<para>Autoconf depends on: Bash, Coreutils, Diffutils, Grep,
M4, Make, Perl, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>
<sect2>
<title>Installation of Autoconf</title>

<para>Prepare Autoconf for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which performs a number of
checks to ensure it will function correctly. It's worth noting that Autoconf
does not play a critical role in the overall operation of an LFS system. In
addition, the Autoconf test suite runs for quite a long period of time.
Accordingly, the running of the test suite here is not crucial. Should you
choose to run the Autoconf test suite, the following command will do
so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-automake">
<title>Installing Automake-1.8</title>
<?dbhtml filename="automake.html"?>

<screen>Estimated build time:           5.3 SBU
Estimated required disk space:  6.8 MB</screen>

<sect2><title>Contents of Automake</title>

<!-- <para>(Last checked against version &automake-contversion;.)</para> -->

<para>Automake generates Makefile.in files, intended for use with Autoconf.</para>

<para><emphasis>Installed programs</emphasis>: acinstall, aclocal,
aclocal-1.8, automake, automake-1.8, compile, config.guess, config.sub,
depcomp, elisp-comp, install-sh, mdate-sh, missing, mkinstalldirs, py-compile,
symlink-tree, ylwrap</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Automake Installation Dependencies</title>

<!-- <para>(Last checked against version &automake-depversion;.)</para> -->

<para>Automake depends on: Autoconf, Bash, Coreutils,
Diffutils, Grep, M4, Make, Perl, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Automake</title>

<para>Prepare Automake for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which performs a number of 
checks to ensure it will function correctly. It's worth noting that Automake
does not play a critical role in the overall operation of an LFS system. In 
addition, the Automake test suite runs for quite a long period of time. 
Accordingly, the running of the test suite here is not crucial. Should you 
choose to run the Automake test suite, the following command will do 
so:</para>

<screen><userinput>make check</userinput></screen>

<para>Install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-bash">
<title>Installing Bash-2.05b</title>
<?dbhtml filename="bash.html"?>

<screen>Estimated build time:           1.2 SBU
Estimated required disk space:  27 MB</screen>

<sect2><title>Contents of Bash</title>

<!-- <para>(Last checked against version &bash-contversion;.)</para> -->

<para>bash is the Bourne-Again SHell, which is a widely used command
interpreter on Unix systems. The bash program reads from standard
input (the keyboard). A user types something and the program will evaluate
what he has typed and do something with it, like running a
program.</para>

<para><emphasis>Installed programs</emphasis>: bash, sh (link to bash) and
bashbug</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Bash Installation Dependencies</title>

<!-- <para>(Last checked against version &bash-depversion;.)</para> -->

<para>Bash depends on: Binutils, Coreutils, Diffutils, Gawk,
GCC, Glibc, Grep, Make, Ncurses, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Bash</title>

<para>Bash has a number of bugs in it that cause it to not behave the 
way it is expected at times. Fix this behaviour with the following
patch:</para>

<screen><userinput>patch -Np1 -i ../bash-2.05b-2.patch</userinput></screen>

<para>Prepare Bash for compilation:</para>

<screen><userinput>./configure --prefix=/usr --bindir=/bin</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make tests</userinput></screen>

<para>Install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>And reload the newly compiled <userinput>bash</userinput> program:</para>

<screen><userinput>exec /bin/bash --login +h</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-file">
<title>Installing File-4.06</title>
<?dbhtml filename="file.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  6.3 MB</screen>

<sect2><title>Contents of File</title>

<!-- <para>(Last checked against version &file-contversion;.)</para> -->

<para>File is a utility used to determine file types.</para>

<para><emphasis>Installed program</emphasis>: file</para>

<para><emphasis>Installed library</emphasis>: libmagic.[a,so]</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>File Installation Dependencies</title>

<!-- <para>(Last checked against version &file-depversion;.)</para> -->

<para>File depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Sed, Zlib.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of File</title>

<para>Prepare File for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen> 

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-libtool">
<title>Installing Libtool-1.5</title>
<?dbhtml filename="libtool.html"?>

<screen>Estimated build time:           1.5 SBU
Estimated required disk space:  20 MB</screen>

<sect2><title>Contents of Libtool</title>

<!-- <para>(Last checked against version &libtool-contversion;.)</para> -->

<para>GNU libtool is a generic library support script. Libtool hides
  the complexity of using shared libraries behind a consistent,
  portable interface.</para>

<para><emphasis>Installed programs</emphasis>: libtool and libtoolize</para>

<para><emphasis>Installed libraries</emphasis>: libltdl.[a,so].</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Libtool Installation Dependencies</title>

<!-- <para>(Last checked against version &libtool-depversion;.)</para> -->

<para>Libtool depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Libtool</title>

<para>Prepare Libtool for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-bzip2">
<title>Installing Bzip2-1.0.2</title>
<?dbhtml filename="bzip2.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  3.0 MB</screen>

<sect2><title>Contents of Bzip2</title>

<!-- <para>(Last checked against version &bzip2-contversion;.)</para> -->

<para>Bzip2 is a block-sorting file compressor which generally achieves a
better compression than the traditional <userinput>gzip</userinput>
does.</para>

<para><emphasis>Installed programs</emphasis>: bunzip2 (link to bzip2), bzcat
(link to bzip2), bzcmp, bzdiff, bzegrep, bzfgrep, bzgrep, bzip2, bzip2recover,
bzless and bzmore</para>

<para><emphasis>Installed libraries</emphasis>: libbz2.a, libbz2.so (link to
libbz2.so.1.0), libbz2.so.1.0 (link to libbz2.so.1.0.2) and
libbz2.so.1.0.2</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Bzip2 Installation Dependencies</title>

<!-- <para>(Last checked against version &bzip2-depversion;.)</para> -->

<para>Bzip2 depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Make.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Bzip2</title>

<para>Prepare Bzip2 for compilation with:</para>

<screen><userinput>make -f Makefile-libbz2_so
make clean</userinput></screen>

<para>The <emphasis>-f</emphasis> flag will cause Bzip2 to be built
using a different <filename>Makefile</filename> file, in this case the
<filename>Makefile-libbz2_so</filename> file, which creates a dynamic
<filename>libbz2.so</filename> library and links the Bzip2 utilities
against it.</para>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>Install it:</para>

<screen><userinput>make install</userinput></screen>

<para>And install the shared <userinput>bzip2</userinput> binary into the
<filename class="directory">/bin</filename> directory, then make some
necessary symbolic links, and clean up:</para>

<screen><userinput>cp bzip2-shared /bin/bzip2
cp -a libbz2.so* /lib
ln -s ../../lib/libbz2.so.1.0 /usr/lib/libbz2.so
rm /usr/bin/{bunzip2,bzcat,bzip2}
mv /usr/bin/{bzip2recover,bzless,bzmore} /bin
ln -s bzip2 /bin/bunzip2
ln -s bzip2 /bin/bzcat</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-diffutils">
<title>Installing Diffutils-2.8.1</title>
<?dbhtml filename="diffutils.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  7.5 MB</screen>

<sect2><title>Contents of Diffutils</title>

<!-- <para>(Last checked against version &diffutils-contversion;.)</para> -->

<para>The programs from this package show you the differences between two
files or directories. It's most common use is to create software
patches.</para>

<para><emphasis>Installed programs</emphasis>: cmp, diff, diff3 and sdiff</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Diffutils Installation Dependencies</title>

<!-- <para>(Last checked against version &diffutils-depversion;.)</para> -->

<para>Diffutils depends on: Bash, Binutils, Coreutils, Diffutils, GCC,
Gettext, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Diffutils</title>

<para>Prepare Diffutils for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-ed">
<title>Installing Ed-0.2</title>
<?dbhtml filename="ed.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  3.1 MB</screen>

<sect2><title>Contents of Ed</title>

<!-- <para>(Last checked against version &ed-contversion;.)</para> -->

<para>GNU ed is an 8-bit clean, POSIX-compliant line editor.</para>

<para><emphasis>Installed programs</emphasis>: ed and red (link to ed)</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Ed Installation Dependencies</title>

<!-- <para>(Last checked against version &ed-depversion;.)</para> -->

<para>Ed depends on: Bash, Binutils, Coreutils, Diffutils, GCC,
Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Ed</title>

<note><para>Ed isn't something which many people use. It's installed here
because it can be used by the patch program if you encounter an ed-based patch
file. This happens rarely because diff-based patches are preferred these
days.</para></note>

<para>Ed normally uses the mktemp function to create temporary files in
<filename class="directory">/tmp</filename>, but this function contains a
vulnerability (see the section on Temporary Files in <ulink url="http://en.tldp.org/HOWTO/Secure-Programs-HOWTO/avoid-race.html"/>). The
following patch makes Ed use mkstemp instead, which is the recommended way to
create temporary files.</para>

<para>Apply the patch:</para>

<screen><userinput>patch -Np1 -i ../ed-0.2-mkstemp.patch</userinput></screen>

<para>Now prepare Ed for compilation:</para>

<screen><userinput>./configure --prefix=/usr --exec-prefix=""</userinput></screen>

<para>The meaning of the configure option:</para>

<itemizedlist>
<listitem><para><userinput>--exec-prefix=""</userinput>: This forces the
programs to be installed into the <filename>/bin</filename> directory. Having
the programs available there is useful in the event of the
<filename>/usr</filename> partition being unavailable.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>Install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-kbd">
<title>Installing Kbd-1.08</title>
<?dbhtml filename="kbd.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  12 MB</screen>

<sect2><title>Contents of Kbd</title>

<!-- <para>(Last checked against version &kbd-contversion;.)</para> -->

<para>Kbd contains keytable files and keyboard utilities.</para>

<para><emphasis>Installed programs</emphasis>: chvt, deallocvt, dumpkeys,
fgconsole, getkeycodes, getunimap, kbd_mode, kbdrate, loadkeys, loadunimap,
mapscrn, openvt, psfaddtable (link to psfxtable), psfgettable (link to
psfxtable), psfstriptable (link to psfxtable), psfxtable, resizecons,
setfont, setkeycodes, setleds, setlogcons, setmetamode, setvesablank,
showconsolefont, showkey, unicode_start and unicode_stop</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Kbd Installation Dependencies</title>

<!-- <para>(Last checked against version &kbd-depversion;.)</para> -->

<para>Kbd depends on: Bash, Binutils, Bison, Coreutils,
Diffutils, Flex, GCC, Gettext, Glibc, Grep, Gzip, M4, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Kbd</title>

<para>By default some of Kbd's utilities (<userinput>setlogcons</userinput>,
<userinput>setvesablank</userinput> and <userinput>getunimap</userinput>) are
not installed. First enable the compilation of these utilities:</para>

<screen><userinput>patch -Np1 -i ../kbd-1.08-more-programs-3.patch</userinput></screen>

<para>Now prepare Kbd for compilation:</para>

<screen><userinput>./configure</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

<sect2><title>Configuring your keyboard</title>

<para>Few things are more annoying than using Linux while a wrong keymap
for your keyboard is loaded. If you have a standard US keyboard, however, you
can skip this section, as the US keymap is the default as long as you don't
change it.</para>

<para>To change the default keymap, create the
<filename class="symlink">/usr/share/kbd/keymaps/defkeymap.map.gz</filename>
symlink by running the following command:</para>

<screen><userinput>ln -s path/to/keymap /usr/share/kbd/keymaps/defkeymap.map.gz</userinput></screen>

<para>Of course, replace <filename>path/to/keymap</filename> with the path and
name of your keyboard's map file. For example, if you have a Dutch keyboard,
you would use <filename>i386/qwerty/nl.map.gz</filename>.</para>

<para>Another way to set your keyboard's layout is to compile the keymap
into the kernel. This ensures that your keyboard will always work as expected,
even when you boot into maintenance mode (by passing `init=/bin/sh' to the
kernel), as then the bootscript that normally sets up your keymap isn't run.</para>

<para>Run the following command to patch the current default keymap into the
kernel source. You will have to repeat this command whenever you unpack a
new kernel:</para>

<screen><userinput>loadkeys -m /usr/share/kbd/keymaps/defkeymap.map.gz &gt; \
    /usr/src/linux-2.4.23/drivers/char/defkeymap.c</userinput></screen>

</sect2>



</sect1>


<sect1 id="ch06-e2fsprogs">
<title>Installing E2fsprogs-1.34</title>
<?dbhtml filename="e2fsprogs.html"?>

<screen>Estimated build time:           0.6 SBU
Estimated required disk space:  48.4 MB</screen>

<sect2><title>Contents of E2fsprogs</title>

<!-- <para>(Last checked against version &e2fsprogs-contversion;.)</para> -->

<para>E2fsprogs provides the filesystem utilities for use with the
 ext2 filesystem. It also supports the ext3 filesystem with journaling
 support.</para>

<para><emphasis>Installed programs</emphasis>: badblocks, blkid, chattr,
compile_et, debugfs, dumpe2fs, e2fsck, e2image, e2label, findfs, fsck,
fsck.ext2, fsck.ext3, logsave, lsattr, mk_cmds, mke2fs, mkfs.ext2, mkfs.ext3,
mklost+found, resize2fs, tune2fs and uuidgen.</para>

<para><emphasis>Installed libraries</emphasis>: libblkid.[a,so],
libcom_err.[a,so], libe2p.[a,so], libext2fs.[a,so], libss.[a,so] and
libuuid.[a,so]</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>E2fsprogs Installation Dependencies</title>

<!-- <para>(Last checked against version &e2fsprogs-depversion;.)</para> -->

<para>E2fsprogs depends on: Bash, Binutils, Coreutils,
Diffutils, Gawk, GCC, Gettext, Glibc, Grep, Make, Sed, Texinfo.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of E2fsprogs</title>

<para>It is recommended to build E2fsprogs outside of the
source tree:</para>

<screen><userinput>mkdir ../e2fsprogs-build
cd ../e2fsprogs-build</userinput></screen>

<para>Prepare E2fsprogs for compilation:</para>

<screen><userinput>../e2fsprogs-1.34/configure --prefix=/usr --with-root-prefix="" \
    --enable-elf-shlibs</userinput></screen>

<para>The meaning of the configure options:</para>

<itemizedlist>
<listitem><para><userinput>--with-root-prefix=""</userinput>: Certain
programs (such as the e2fsck program) are considered essential programs.
When, for example, <filename class="directory">/usr</filename> isn't
mounted, these essential programs have to be available. They belong in
directories like <filename class="directory">/lib</filename> and
<filename class="directory">/sbin</filename>. If this option isn't passed
to E2fsprogs's configure, the programs are placed in the
<filename class="directory">/usr</filename> directory, which is not what we
want.</para></listitem>

<listitem><para><userinput>--enable-elf-shlibs</userinput>: This creates
the shared libraries which some programs in this package make use
of.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>Install most of the package:</para>

<screen><userinput>make install</userinput></screen>

<para>And install also the shared libraries:</para>

<screen><userinput>make install-libs</userinput></screen>

</sect2>


</sect1>


<sect1 id="ch06-grep">
<title>Installing Grep-2.5.1</title>
<?dbhtml filename="grep.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  5.8 MB</screen>

<sect2><title>Contents of Grep</title>

<!-- <para>(Last checked against version &grep-contversion;.)</para> -->

<para>Grep is a program used to print lines from a file matching a
specified pattern.</para>

<para><emphasis>Installed programs</emphasis>: egrep (link to grep), fgrep
(link to grep) and grep</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Grep Installation Dependencies</title>

<!-- <para>(Last checked against version &grep-depversion;.)</para> -->

<para>Grep depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Make, Sed, Texinfo.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Grep</title>

<para>Prepare Grep for compilation:</para>

<screen><userinput>./configure --prefix=/usr --bindir=/bin \
    --with-included-regex</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-grub">
<title>Installing Grub-0.93</title>
<?dbhtml filename="grub.html"?>

<screen>Estimated build time:           0.2 SBU
Estimated required disk space:  10 MB</screen>

<sect2><title>Contents of Grub</title>

<!-- <para>(Last checked against version &grub-contversion;.)</para> -->

<para>The Grub package contains a bootloader.</para>

<para><emphasis>Installed programs</emphasis>: grub, grub-install,
grub-md5-crypt, grub-terminfo and mbchk</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Grub Installation Dependencies</title>

<!-- <para>(Last checked against version &grub-depversion;.)</para> -->

<para>Grub depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Ncurses, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Grub</title>

<para>This package is known to behave badly when you have changed its default
optimization flags (including the -march and -mcpu options). Therefore, if you
have defined any environment variables that override default optimizations,
such as CFLAGS and CXXFLAGS, we recommend unsetting them when building
Grub.</para>

<para>First fix a compilation problem with GCC-3.3.2:</para>

<screen><userinput>sed -i 's/2 long/2/' stage2/fsys_reiserfs.c</userinput></screen>

<para>Now prepare Grub for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install
mkdir /boot/grub
cp /usr/share/grub/i386-pc/stage{1,2} /boot/grub</userinput></screen>

<para>Replace <filename class="directory">i386-pc</filename> with whatever
directory is appropriate for your hardware.</para>

<para>The <filename class="directory">i386-pc</filename> directory also
contains a number of <filename>*stage1_5</filename> files, different ones
for different filesystems. Have a look at the ones available and copy the
appropriate ones to the <filename class="directory">/boot/grub</filename>
directory. Most people will copy the <filename>e2fs_stage1_5</filename>
and/or <filename>reiserfs_stage1_5</filename> files.</para>

</sect2>

</sect1>


<sect1 id="ch06-gzip">
<title>Installing Gzip-1.3.5</title>
<?dbhtml filename="gzip.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  2.6 MB</screen>

<sect2><title>Contents of Gzip</title>

<!-- <para>(Last checked against version &gzip-contversion;.)</para> -->

<para>The Gzip package contains programs to compress and decompress files
using the Lempel-Ziv coding (LZ77).</para>

<para><emphasis>Installed programs</emphasis>: gunzip (link to gzip), gzexe,
gzip, uncompress (link to gunzip), zcat (link to gzip), zcmp, zdiff,
zegrep, zfgrep, zforce, zgrep, zless, zmore and znew</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Gzip Installation Dependencies</title>

<!-- <para>(Last checked against version &gzip-depversion;.)</para> -->

<para>Gzip depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Gzip</title>

<para>Prepare Gzip for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>The <userinput>gzexe</userinput> script has the location of the
<userinput>gzip</userinput> binary hard-wired into it. Because we later change
the location of the binary, the following command assures that the new
location gets placed into the script:</para>

<screen><userinput>cp gzexe.in{,.backup}
sed 's%"BINDIR"%/bin%' gzexe.in.backup &gt; gzexe.in</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>Install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>And move the programs to the <filename class="directory">/bin</filename> directory:</para>

<screen><userinput>mv /usr/bin/gzip /bin
rm /usr/bin/{gunzip,zcat}
ln -s gzip /bin/gunzip
ln -s gzip /bin/zcat
ln -s gunzip /bin/uncompress</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-man">
<title>Installing Man-1.5m2</title>
<?dbhtml filename="man.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  1.9MB</screen>

<sect2><title>Contents of Man</title>

<!-- <para>(Last checked against version &man-contversion;.)</para> -->

<para>Man is a man pager.</para>

<para><emphasis>Installed programs</emphasis>: apropos, makewhatis, man,
man2dvi, man2html and whatis</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Man Installation Dependencies</title>

<!-- <para>(Last checked against version &man-depversion;.)</para> -->

<para>Man depends on: Bash, Binutils, Coreutils, Gawk, GCC,
Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Man</title>

<para>We'll make three adjustments to the sources of Man.</para>

<para>The first is a patch which allows Man to work better with recent releases
of Groff. In particular, man pages will now display using the full terminal
width instead of being limited to 80 characters:</para>

<screen><userinput>patch -Np1 -i ../man-1.5m2-80cols.patch</userinput></screen>

<para>The second is a sed substitution to add the <emphasis>-R</emphasis>
switch to the <emphasis>PAGER</emphasis> variable so that escape sequences are
properly handled by Less:</para>

<screen><userinput>sed -i 's/-is/&amp;R/' configure</userinput></screen>

<para>The third is also a sed substitution to comment out the "MANPATH
/usr/man" line in the <filename>man.conf</filename> file to prevent redundant
results when using programs such as <userinput>whatis</userinput>:</para>

<screen><userinput>sed -i 's%MANPATH./usr/man%#&amp;%' src/man.conf.in</userinput></screen>
 
<para>Now prepare Man for compilation:</para>

<screen><userinput>./configure -default -confdir=/etc</userinput></screen>

<para>The meaning of the configure options:</para>

<itemizedlist>
<listitem><para><userinput>-default</userinput>: This tells the configure script
to select a sensible set of default options. For example: only English man
pages, no message catalogs, man not suid, handle compressed man pages, compress
cat pages, create cat pages whenever the appropriate directory exists, follow
FHS by putting cat pages under /var/cache/man provided that that directory
exists.</para></listitem>

<listitem><para><userinput>-confdir=/etc</userinput>: This tells the
<userinput>man</userinput> program to look for the <filename>man.conf</filename>
configuration file in the <filename>/etc</filename> directory.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

<note><para>If you wish to disable SGR escape sequences, you should
edit the man.conf file and add the <userinput>-c</userinput> argument
to nroff.</para></note>

<para>You may want to also take a look at the BLFS page at
<ulink url="http://www.linuxfromscratch.org/blfs/view/cvs/postlfs/compressdoc.html"/> which deals with
formatting and compression issues for man pages.</para>

</sect2>

</sect1>


<sect1 id="ch06-make">
<title>Installing Make-3.80</title>
<?dbhtml filename="make.html"?>

<screen>Estimated build time:           0.2 SBU
Estimated required disk space:  8.8 MB</screen>

<sect2><title>Contents of Make</title>

<!-- <para>(Last checked against version &make-contversion;.)</para> -->

<para>Make determines, automatically, which pieces of a large program need
to be recompiled and issues the commands to recompile them.</para>

<para><emphasis>Installed program</emphasis>: make</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Make Installation Dependencies</title>

<!-- <para>(Last checked against version &make-depversion;.)</para> -->

<para>Make depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Gettext, Glibc, Grep, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Make</title>

<para>Prepare Make for compilation:</para>

<screen><userinput>./configure --prefix=/usr</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-modutils">
<title>Installing Modutils-2.4.26</title>
<?dbhtml filename="modutils.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  2.9 MB</screen>

<sect2><title>Contents of Modutils</title>

<!-- <para>(Last checked against version &modutils-contversion;.)</para> -->

<para>The Modutils package contains programs that you can use to work with
kernel modules.</para>

<para><emphasis>Installed programs</emphasis>: depmod, genksyms, insmod,
insmod_ksymoops_clean, kallsyms (link to insmod), kernelversion, ksyms
(link to insmod), lsmod (link to insmod), modinfo, modprobe (link to insmod)
and rmmod (link to insmod)</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Modutils Installation Dependencies</title>

<!-- <para>(Last checked against version &modutils-depversion;.)</para> -->

<para>Modutils depends on: Bash, Binutils, Bison, Coreutils,
Diffutils, Flex, GCC, Glibc, Grep, M4, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Modutils</title>

<para>Prepare Modutils for compilation:</para>

<screen><userinput>./configure</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-patch">
<title>Installing Patch-2.5.4</title>
<?dbhtml filename="patch.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  1.9 MB</screen>

<sect2><title>Contents of Patch</title>

<!-- <para>(Last checked against version &patch-contversion;.)</para> -->

<para>The patch program modifies a file according to a patch file. A patch
file usually is a list, created by the diff program, that contains
instructions on how an original file needs to be modified.</para>

<para><emphasis>Installed program</emphasis>: patch</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Patch Installation Dependencies</title>

<!-- <para>(Last checked against version &patch-depversion;.)</para> -->

<para>Patch depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Patch</title>

<para>Prepare Patch for compilation:</para>

<screen><userinput>CPPFLAGS=-D_GNU_SOURCE ./configure --prefix=/usr</userinput></screen>

<para>Again, the preprocessor flag <userinput>-D_GNU_SOURCE</userinput> is only
needed on the PowerPC platform. On other architectures you can leave it out.</para>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-procinfo">
<title>Installing Procinfo-18</title>
<?dbhtml filename="procinfo.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  0.2 MB</screen>

<sect2><title>Contents of Procinfo</title>

<!-- <para>(Last checked against version &procinfo-contversion;.)</para> -->

<para>The procinfo program gathers system data, such as memory
usage and IRQ numbers, from the <filename>/proc</filename>
directory and formats this data in a meaningful way.</para>

<para><emphasis>Installed programs</emphasis>: lsdev, procinfo and
socklist</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Procinfo Installation Dependencies</title>

<!-- <para>(Last checked against version &procinfo-depversion;.)</para> -->

<para>Procinfo depends on: Binutils, GCC, Glibc, Make, Ncurses.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Procinfo</title>

<para>Compile Procinfo:</para>

<screen><userinput>make LDLIBS=-lncurses</userinput></screen>

<para>The meaning of the make parameter:</para>
<itemizedlist>
<listitem><para><userinput>LDLIBS=-lncurses</userinput>: This tells Procinfo
to use the <filename>libncurses</filename> library instead of  the
long-obsolete <filename>libtermcap</filename>.</para></listitem>
</itemizedlist>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-procps">
<title>Installing Procps-3.1.14</title>
<?dbhtml filename="procps.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  6.2 MB</screen>

<sect2><title>Contents of Procps</title>

<!-- <para>(Last checked against version &procps-contversion;.)</para> -->

<para>The Procps package provides programs to monitor and
halt system processes. Procps gathers information about
processes via the <filename>/proc</filename> directory.</para>

<para><emphasis>Installed programs</emphasis>: free, kill, pgrep, pkill,
pmap, ps, skill, snice, sysctl, tload, top, uptime, vmstat, w and watch</para>

<para><emphasis>Installed library</emphasis>: libproc.so</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Procps Installation Dependencies</title>

<!-- <para>(Last checked against version &procps-depversion;.)</para> -->

<para>Procps depends on: Bash, Binutils, Coreutils, GCC, Glibc,
Make, Ncurses.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Procps</title>

<para>Compile Procps:</para>

<screen><userinput>make</userinput></screen>

<para>Install it:</para>

<screen><userinput>make install</userinput></screen>

<para>And remove a spurious library link:</para>

<screen><userinput>rm /lib/libproc.so</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-psmisc">
<title>Installing Psmisc-21.4</title>
<?dbhtml filename="psmisc.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  2.2 MB</screen>

<sect2><title>Contents of Psmisc</title>

<!-- <para>(Last checked against version &psmisc-contversion;.)</para> -->

<para>The Psmisc package contains three programs which help
manage the <filename>/proc</filename> directory.</para>

<para><emphasis>Installed programs</emphasis>: fuser, killall, pstree and
pstree.x11 (link to pstree)</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Psmisc Installation Dependencies</title>

<!-- <para>(Last checked against version &psmisc-depversion;.)</para> -->

<para>Psmisc depends on: Bash, Binutils, Coreutils, Diffutils,
GCC, Gettext, Glibc, Grep, Make, Ncurses, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Psmisc</title>

<para>Prepare Psmisc for compilation:</para>

<screen><userinput>./configure --prefix=/usr --exec-prefix=/</userinput></screen>

<para>The meaning of the configure option:</para>

<itemizedlist>
<listitem><para><userinput>--exec-prefix=/</userinput>: This causes the
binaries to be installed in <filename>/bin</filename> and not in
<filename>/usr/bin</filename>. As the Psmisc programs are often used in
bootscripts, they should be available also when the <filename>/usr</filename>
filesystem isn't mounted.</para></listitem>
</itemizedlist>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

<para>There is no reason for the <filename>pstree</filename> and
<filename>pstree.x11</filename> programs to reside in
<filename class="directory">/bin</filename>. We therefore move them to
<filename class="directory">/usr/bin</filename>. Also, there is no need
for <filename>pstree.x11</filename> to exist as a separate program. We
therefore make it a symbolic link to <filename>pstree</filename>:</para>

<screen><userinput>mv /bin/pstree* /usr/bin
ln -sf pstree /usr/bin/pstree.x11</userinput></screen>

<para>By default Psmisc's <userinput>pidof</userinput> program isn't installed.
Generally, this isn't a problem because we later install the Sysvinit package,
which provides a better <userinput>pidof</userinput> program. But if you're not
going to use Sysvinit, you should complete the installation of Psmisc by
creating the following symlink:</para>

<screen><userinput>ln -s killall /bin/pidof</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-shadow">
<title>Installing Shadow-4.0.3</title>
<?dbhtml filename="shadow.html"?>

<screen>Estimated build time:           0.4 SBU
Estimated required disk space:  11 MB</screen>

<sect2><title>Contents of Shadow</title>

<!-- <para>(Last checked against version &shadow-contversion;.)</para> -->

<para>The Shadow package was created to strengthen the security
of system passwords.</para>

<para><emphasis>Installed programs</emphasis>: chage, chfn, chpasswd, chsh,
dpasswd, expiry, faillog, gpasswd, groupadd, groupdel, groupmod, groups, grpck,
grpconv, grpunconv, lastlog, login, logoutd, mkpasswd, newgrp, newusers,
passwd, pwck, pwconv, pwunconv, sg (link to newgrp), useradd, userdel, usermod,
vigr (link to vipw) and vipw</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Shadow Installation Dependencies</title>

<!-- <para>(Last checked against version &shadow-depversion;.)</para> -->

<para>Shadow depends on: Bash, Binutils, Bison, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Shadow</title>

<para>The <userinput>login</userinput>, <userinput>getty</userinput> and
<userinput>init</userinput> programs (and some others) maintain a number
of logfiles to record who are and who were logged in to the system.  These
programs, however, don't create these logfiles when they don't exist, so if
you want this logging to occur you will have to create the files yourself.
The Shadow package needs to detect these files in their proper place, so we
create them now, with their proper permissions:</para>

<screen><userinput>touch /var/run/utmp /var/log/{btmp,lastlog,wtmp}
chmod 644 /var/run/utmp /var/log/{btmp,lastlog,wtmp}</userinput></screen>

<para>The <filename>/var/run/utmp</filename> file lists the users that are
currently logged in, the <filename>/var/log/wtmp</filename> file who
<emphasis>were</emphasis> logged in and when.
The <filename>/var/log/lastlog</filename> file shows for each user when he
or she last logged in, and the <filename>/var/log/btmp</filename> lists the
bad login attempts.</para>

<para>Shadow hard-wires the path to the <userinput>passwd</userinput> binary
within the binary itself, but does this the wrong way. If a
<userinput>passwd</userinput> binary is not present before installing Shadow,
the package incorrectly assumes it is going to be located at
<filename>/bin/passwd</filename>, but then installs it in
<filename>/usr/bin/passwd</filename>. This will lead to errors about not finding
<filename>/bin/passwd</filename>. To work around this bug, create a dummy
<filename>passwd</filename> file, so that it gets hard-wired properly:</para>

<screen><userinput>touch /usr/bin/passwd</userinput></screen>

<para>The current Shadow suite has a problem that causes the
<userinput>newgrp</userinput> command to fail.  The following patch (also
appearing in Shadow's CVS code) fixes this problem:</para>

<screen><userinput>patch -Np1 -i ../shadow-4.0.3-newgrp-fix.patch</userinput></screen>

<para>Now prepare Shadow for compilation:</para>

<screen><userinput>./configure --prefix=/usr --libdir=/usr/lib --enable-shared</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

<para>Shadow uses two files to configure authentication settings for the
system. Install these two config files:</para>

<screen><userinput>cp etc/{limits,login.access} /etc</userinput></screen>

<para>We want to change the password method to enable MD5 passwords which are
theoretically more secure than the default "crypt" method and also allow
password lengths greater than 8 characters. We also need to change the old
<filename class="directory">/var/spool/mail</filename> location for user
mailboxes to the current location at
<filename class="directory">/var/mail</filename>. We do this by changing the
relevant configuration file while copying it to its destination:</para>

<screen><userinput>sed -e 's%/var/spool/mail%/var/mail%' \
    -e 's%#MD5_CRYPT_ENAB.no%MD5_CRYPT_ENAB yes%' \
    etc/login.defs.linux &gt; /etc/login.defs</userinput></screen>

<note><para>Be extra careful when typing all of the above. It is probably safer
to cut-and-paste it rather than try and type it all in.</para></note>

<para>According to the man page of <userinput>vipw</userinput>, a
<userinput>vigr</userinput> program should exist too. Since the installation
procedure doesn't create this program, create a symlink manually:</para>

<screen><userinput>ln -s vipw /usr/sbin/vigr</userinput></screen>

<para>As the <filename>/bin/vipw</filename> symlink is redundant (and even
pointing to a non-existent file), remove it:</para>

<screen><userinput>rm /bin/vipw</userinput></screen>

<para>Now move the <userinput>sg</userinput> program to its proper place:</para>

<screen><userinput>mv /bin/sg /usr/bin</userinput></screen>

<para>And move Shadow's dynamic libraries to a more appropriate location:</para>

<screen><userinput>mv /usr/lib/lib{shadow,misc}.so.0* /lib</userinput></screen>

<para>As some packages expect to find the just-moved libraries in
<filename>/usr/lib</filename>, create the following symlinks:</para>

<screen><userinput>ln -sf ../../lib/libshadow.so.0 /usr/lib/libshadow.so
ln -sf ../../lib/libmisc.so.0 /usr/lib/libmisc.so</userinput></screen>

<para>The -D option of the <filename>useradd</filename> program requires this
directory for it to work properly:</para>

<screen><userinput>mkdir /etc/default</userinput></screen>

<para>Coreutils has already installed a <userinput>groups</userinput> program
in <filename>/usr/bin</filename>. If you wish, you can remove the one
installed by Shadow:</para>

<screen><userinput>rm /bin/groups</userinput></screen>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2><title>Configuring Shadow</title>

<para>This package contains utilities to modify users' passwords, add
or delete users and groups, and the like. We're not going to explain what
'password shadowing' means. A full explanation can be found in the
<filename>doc/HOWTO</filename>
file within the unpacked Shadow source tree. There's one 
thing to keep in mind if you decide to use Shadow support: programs that
need to verify passwords (for example xdm, ftp daemons, pop3 daemons) need
to be 'shadow-compliant', that is they need to be able to work with 
shadowed passwords.</para>

<para>To enable shadowed passwords, run the following command:</para>

<screen><userinput>/usr/sbin/pwconv</userinput></screen>

<para>And to enable shadowed group passwords, run the following
command:</para>

<screen><userinput>/usr/sbin/grpconv</userinput></screen>

<para>Under normal circumstances, you won't have created any passwords yet.
However, if returning to this section to enable shadowing, you should reset any
current user passwords with the <userinput>passwd</userinput> command or any
group passwords with the <userinput>gpasswd</userinput> command.</para>
</sect2>


<sect2>
<title>Setting the root password</title>

<para>Choose a password for user root and set it by running the following
command:</para>

<screen><userinput>passwd root</userinput></screen>

</sect2>



</sect1>


<sect1 id="ch06-sysklogd">
<title>Installing Sysklogd-1.4.1</title>
<?dbhtml filename="sysklogd.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  0.5 MB</screen>

<sect2><title>Contents of Sysklogd</title>

<!-- <para>(Last checked against version &sysklogd-contversion;.)</para> -->

<para>The Sysklogd package contains programs for recording
system log messages, such as those reported by the kernel.</para>

<para><emphasis>Installed programs</emphasis>: klogd and syslogd</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Sysklogd Installation Dependencies</title>

<!-- <para>(Last checked against version &sysklogd-depversion;.)</para> -->

<para>Sysklogd depends on: Binutils, Coreutils, GCC, Glibc, Make.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Sysklogd</title>

<para>Compile Sysklogd:</para>

<screen><userinput>make</userinput></screen>

<para>And install it:</para>

<screen><userinput>make install</userinput></screen>

</sect2>
<sect2><title> </title><para> </para></sect2>

<sect2><title>Configuring Sysklogd</title>

<para>Create a new file <filename>/etc/syslog.conf</filename> by running the
following:</para>

<screen><userinput>cat &gt; /etc/syslog.conf &lt;&lt; "EOF"</userinput>
# Begin /etc/syslog.conf

auth,authpriv.* -/var/log/auth.log
*.*;auth,authpriv.none -/var/log/sys.log
daemon.* -/var/log/daemon.log
kern.* -/var/log/kern.log
mail.* -/var/log/mail.log
user.* -/var/log/user.log
*.emerg *

# End /etc/syslog.conf
<userinput>EOF</userinput></screen>

</sect2>


</sect1>


<sect1 id="ch06-sysvinit">
<title>Installing Sysvinit-2.85</title>
<?dbhtml filename="sysvinit.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  0.9 MB</screen>

<sect2><title>Contents of Sysvinit</title>

<!-- <para>(Last checked against version &sysvinit-contversion;.)</para> -->

<para>The Sysvinit package contains programs to control the
startup, running and shutdown of all other programs.</para>

<para><emphasis>Installed programs</emphasis>: halt, init, killall5, last,
lastb (link to last), mesg, pidof (link to killall5), poweroff (link to halt),
reboot (link to halt), runlevel, shutdown, sulogin, telinit (link to init),
utmpdump and wall</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Sysvinit Installation Dependencies</title>

<!-- <para>(Last checked against version &sysvinit-depversion;.)</para> -->

<para>Sysvinit depends on: Binutils, Coreutils, GCC, Glibc, Make.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Sysvinit</title>

<para>When run levels are changed (for example, when halting the system),
init sends the TERM and KILL signals to the processes which it started.
Init prints "Sending processes the TERM signal" to the screen. This seems
to imply that init is sending these signals to all the currently running
processes. To avoid this confusion, the init.c file can be modified, so
that the sentence reads "Sending processes started by init the TERM
signal".</para>

<para>Edit the halt message:</para>

<screen><userinput>cp src/init.c{,.backup}
sed 's/Sending processes/&amp; started by init/g' \
    src/init.c.backup &gt; src/init.c</userinput></screen>

<para>Compile Sysvinit:</para>

<screen><userinput>make -C src</userinput></screen>

<para>And install it:</para>

<screen><userinput>make -C src install</userinput></screen>

</sect2>
<sect2><title> </title><para> </para></sect2>

<sect2><title>Configuring Sysvinit</title>

<para>Create a new file <filename>/etc/inittab</filename> by running the
following:</para>

<screen><userinput>cat &gt; /etc/inittab &lt;&lt; "EOF"</userinput>
# Begin /etc/inittab

id:3:initdefault:

si::sysinit:/etc/rc.d/init.d/rc sysinit

l0:0:wait:/etc/rc.d/init.d/rc 0
l1:S1:wait:/etc/rc.d/init.d/rc 1
l2:2:wait:/etc/rc.d/init.d/rc 2
l3:3:wait:/etc/rc.d/init.d/rc 3
l4:4:wait:/etc/rc.d/init.d/rc 4
l5:5:wait:/etc/rc.d/init.d/rc 5
l6:6:wait:/etc/rc.d/init.d/rc 6

ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now

su:S016:once:/sbin/sulogin

1:2345:respawn:/sbin/agetty tty1 9600
2:2345:respawn:/sbin/agetty tty2 9600
3:2345:respawn:/sbin/agetty tty3 9600
4:2345:respawn:/sbin/agetty tty4 9600
5:2345:respawn:/sbin/agetty tty5 9600
6:2345:respawn:/sbin/agetty tty6 9600

# End /etc/inittab
<userinput>EOF</userinput></screen>

</sect2>


</sect1>


<sect1 id="ch06-tar">
<title>Installing Tar-1.13.25</title>
<?dbhtml filename="tar.html"?>

<screen>Estimated build time:           0.2 SBU
Estimated required disk space:  10 MB</screen>

<sect2><title>Contents of Tar</title>

<!-- <para>(Last checked against version &tar-contversion;.)</para> -->

<para>Tar is an archiving program designed to store and extract
files from an archive file known as a tar file.</para>

<para><emphasis>Installed programs</emphasis>: rmt and tar</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Tar Installation Dependencies</title>

<!-- <para>(Last checked against version &tar-depversion;.)</para> -->

<para>Tar depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Sed.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of Tar</title>

<para>Prepare Tar for compilation:</para>

<screen><userinput>./configure --prefix=/usr --bindir=/bin \
    --libexecdir=/usr/sbin</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<para>This package has a test suite available which can perform a number of
checks to ensure it built correctly.  Should you choose to run it, the 
following command will do so:</para>

<screen><userinput>make check</userinput></screen>

<para>And install the package:</para>

<screen><userinput>make install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-util-linux">
<title>Installing Util-linux-2.12</title>
<?dbhtml filename="util-linux.html"?>

<screen>Estimated build time:           0.2 SBU
Estimated required disk space:  16 MB</screen>

<sect2><title>Contents of Util-linux</title>

<!-- <para>(Last checked against version &util-linux-contversion;.)</para> -->

<para>The Util-linux package contains a number of miscellaneous
utility programs. Some of the more prominent utilities are used
to mount, unmount, format, partition and manage disk drives,
open tty ports and fetch kernel messages.</para>

<para><emphasis>Installed programs</emphasis>: agetty, arch, blockdev, cal,
cfdisk, chkdupexe, col, colcrt, colrm, column, ctrlaltdel, cytune, ddate,
dmesg, elvtune, fdformat, fdisk, fsck.cramfs, fsck.minix, getopt, hexdump,
hwclock, ipcrm, ipcs, isosize, line, logger, look, losetup, mcookie, mkfs,
mkfs.bfs, mkfs.cramfs, mkfs.minix, mkswap, more, mount, namei, parse.bash,
parse.tcsh, pg, pivot_root, ramsize (link to rdev), raw, rdev, readprofile,
rename, renice, rev, rootflags (link to rdev), script, setfdprm, setsid,
setterm, sfdisk, swapoff (link to swapon), swapon, test.bash, test.tcsh,
tunelp, ul, umount, vidmode (link to rdev), whereis and write</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Util-linux Installation Dependencies</title>

<!-- <para>(Last checked against version &util-linux-depversion;.)</para> -->

<para>Util-linux depends on: Bash, Binutils, Coreutils,
Diffutils, GCC, Gettext, Glibc, Grep, Make, Ncurses, Sed, Zlib.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>FHS compliance notes</title>

<para>The FHS recommends that we use <filename>/var/lib/hwclock</filename>,
instead of the usual <filename>/etc</filename>, as the location for the
<filename>adjtime</filename> file. To make the <userinput>hwclock</userinput>
program FHS-compliant, run the following:</para>

<screen><userinput>cp hwclock/hwclock.c{,.backup}
sed 's%etc/adjtime%var/lib/hwclock/adjtime%' \
    hwclock/hwclock.c.backup &gt; hwclock/hwclock.c
mkdir -p /var/lib/hwclock</userinput></screen>

</sect2>

<sect2>
<title>Installation of Util-linux</title>

<para>Prepare Util-linux for compilation:</para>

<screen><userinput>./configure</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make HAVE_KILL=yes HAVE_SLN=yes</userinput></screen>

<para>The meaning of the make parameters:</para>

<itemizedlist>
<listitem><para><userinput>HAVE_KILL=yes</userinput>: This prevents the
<userinput>kill</userinput> program (already installed by Procps) from being
built and installed again.</para></listitem>

<listitem><para><userinput>HAVE_SLN=yes</userinput>: This prevents the
<userinput>sln</userinput> program (a statically linked
<userinput>ln</userinput>, already installed by Glibc) from being built and
installed again.</para></listitem>
</itemizedlist>

<para>And install the package:</para>

<screen><userinput>make HAVE_KILL=yes HAVE_SLN=yes install</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-gcc-2953">
<title>Installing GCC-2.95.3</title>
<?dbhtml filename="gcc-2953.html"?>

<screen>Estimated build time:           1.5 SBU
Estimated required disk space:  130 MB</screen>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of GCC</title>

<para>This package is known to behave badly when you have changed its
default optimization flags (including the -march and -mcpu options).
Therefore, if you have defined any environment variables that override
default optimizations, such as CFLAGS and CXXFLAGS, we recommend unsetting
or modifying them when building GCC.</para>

<para>This is an older release of GCC which we are going to install for the
purpose of compiling the Linux kernel in <xref linkend="chapter08"/>. This
version is recommended
by the kernel developers when you need absolute stability. Later versions of
GCC have not received as much testing for Linux kernel compilation. Using a
later version is likely to work, however, we recommend adhering to the kernel
developer's advice and using the version here to compile your kernel.</para>

<note><para>We don't install the C++ compiler or libraries here. However, there
may be reasons why you would want to install them. More information can be found
at <ulink url="http://www.linuxfromscratch.org/blfs/view/stable/general/gcc2.html"/>.</para></note>

<para>We'll install this older release of GCC into the non-standard prefix of
<filename class="directory">/opt</filename> so as to avoid interfering with
the system GCC already installed in <filename class="directory">/usr</filename>
 .</para>

<para>Apply the patches and make a small adjustment:</para>

<screen><userinput>patch -Np1 -i ../gcc-2.95.3-2.patch
patch -Np1 -i ../gcc-2.95.3-no-fixinc.patch
patch -Np1 -i ../gcc-2.95.3-returntype-fix.patch
echo timestamp &gt; gcc/cstamp-h.in</userinput></screen>

<para>The GCC documentation recommends building GCC outside of the source
directory in a dedicated build directory:</para>

<screen><userinput>mkdir ../gcc-2-build
cd ../gcc-2-build</userinput></screen>

<para>Compile and install the compiler:</para>

<screen><userinput>../gcc-2.95.3/configure --prefix=/opt/gcc-2.95.3 \
    --enable-shared --enable-languages=c \
    --enable-threads=posix
make bootstrap
make install</userinput></screen>

</sect2>

</sect1>




<sect1 id="ch06-revisedchroot">
<title>Revised chroot command</title>
<?dbhtml filename="revisedchroot.html"?>

<para>From now on when you exit the chroot environment and wish to re-enter
it, you should run the following modified chroot command:</para>

<screen><userinput>chroot $LFS /usr/bin/env -i \
    HOME=/root TERM=$TERM PS1='\u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin \
    /bin/bash --login</userinput></screen>

<para>The reason being there is no longer any need to use programs from the
<filename class="directory">/tools</filename> directory. However, we don't
want to remove the <filename class="directory">/tools</filename> directory
just yet. There is still some use for it towards the end of the book.</para>

</sect1>


<sect1 id="ch06-lfs-bootscripts">
<title>Installing LFS-Bootscripts-1.12</title>
<?dbhtml filename="bootscripts.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  0.3 MB</screen>

<sect2><title>Contents of LFS-bootscripts</title>

<!-- <para>(Last checked against version &bootscripts-contversion;.)</para> -->

<para>The LFS-Bootscripts package contains SysV init style shell
scripts. These scripts do various tasks such as check filesystem
integrity during boot, load keymaps, set up networks and halt
processes at shutdown.</para>

<para><emphasis>Installed scripts</emphasis>: checkfs, cleanfs, functions,
halt, ifdown, ifup, loadkeys, localnet, mountfs, mountproc, network, rc,
reboot, sendsignals, setclock, swap, sysklogd and template</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>LFS-Bootscripts Installation Dependencies</title>

<!-- <para>(Last checked against version &bootscripts-depversion;.)</para> -->

<para>LFS-Bootscripts depends on: Bash, Coreutils.</para>

</sect2>



<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of LFS-Bootscripts</title>

<para>We will be using SysV style init scripts. We have chosen this style
because it is widely used and we feel comfortable with it. If you would prefer
to try something else, Marc Heerdink has written a hint about BSD style init
scripts, to be found at <ulink url="http://www.linuxfromscratch.org/hints/downloads/files/bsd-init.txt"/>. And if you'd
like something more radical, search the LFS mailing lists for depinit.</para>

<para>If you decide to use BSD style, or some other style scripts, you can
skip the next chapter when you arrive at it and move on to
<xref linkend="chapter08"/>.</para>

<para>Install the boot scripts:</para>

<screen><userinput>cp -a rc.d sysconfig /etc</userinput></screen>

<para>Give <emphasis>root</emphasis> ownership of the scripts:</para>

<screen><userinput>chown -R root:root /etc/rc.d /etc/sysconfig</userinput></screen>

</sect2>

</sect1>


<sect1 id="ch06-aboutdebug">
<title>About debugging symbols</title>
<?dbhtml filename="aboutdebug.html"?>

<para>Most programs and libraries are, by default, compiled with debugging
symbols included (with gcc option -g).</para>

<para>When debugging a program or library that was compiled with debugging
information included, the debugger can give you not only memory addresses
but also the names of the routines and variables.</para>
 
<para>But the inclusion of these debugging symbols enlarges a program or
library significantly. To get an idea of the amount of space these symbols
occupy, have a look at the following:</para>

<itemizedlist>

<listitem><para>a bash binary 
with debugging symbols: 1200 KB</para></listitem>

<listitem><para>a bash binary
without debugging symbols: 480 KB</para></listitem>

<listitem><para>Glibc and GCC files (/lib and /usr/lib)
with debugging symbols: 87 MB</para></listitem>

<listitem><para>Glibc and GCC files
without debugging symbols: 16 MB</para></listitem>

</itemizedlist>

<para>Sizes may vary a little, depending on which compiler was used and
which C library. But when comparing programs with and without debugging
symbols, the difference will generally be a factor between 2 and 5.</para>

<para>As most people will probably never use a debugger on their system
software, a lot of disk space can be regained by removing these symbols .</para>

<para>To remove debugging symbols from a binary (which must be an a.out
or ELF binary), run <userinput>strip --strip-debug filename</userinput>.
Wildcards can be used to treat multiple files (use something like
<userinput>strip --strip-debug $LFS/tools/bin/*</userinput>).</para>

<para>For your convenience, <xref linkend="chapter09"/> includes one simple
command to strip all debugging symbols from all programs and libraries on your
system. Additional information on optimization can be found in the hint at
<ulink url="http://www.linuxfromscratch.org/hints/downloads/files/optimization.txt"/>.</para>

</sect1>



</chapter>
