<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3CR2//EN" "http://www.docbook.org/xml/4.3CR2/docbookx.dtd">
<sect1 id="ch06-kernel-headers">
<title>Installing Linux-2.4.23 headers</title>
<?dbhtml filename="kernel.html"?>

<screen>Estimated build time:           0.1 SBU
Estimated required disk space:  186 MB</screen>

<xi:include xmlns:xi="http://www.w3.org/2003/XInclude" href="../appendixa/kernel-contents.xml"/>


<xi:include xmlns:xi="http://www.w3.org/2003/XInclude" href="../appendixa/kernel-deps.xml"/>



<sect2>
<title>Installation of the kernel headers</title>

<para>We won't be compiling a new kernel yet -- we'll do that when we have
finished the installation of all the packages. But as some packages need the
kernel header files, we're going to unpack the kernel archive now, set it up
and copy the header files so they can be found by these packages.</para>

<para>It is important to note that the files in the kernel source directory
are not owned by <emphasis>root</emphasis>. Whenever you unpack a package as
user <emphasis>root</emphasis> (like we do here inside chroot), the files end
up having the user and group IDs of whatever they were on the packager's
computer. This is usually not a
problem for any other package you install because you remove the source
tree after the installation. But the Linux kernel source tree is often kept
around for a long time, so there's a chance that whatever user ID the packager
used will be assigned to somebody on your machine and then that person would
have write access to the kernel source.</para>

<para>In light of this, you might want to run <userinput>chown -R 0:0</userinput>
on the <filename>linux-2.4.23</filename> directory
to ensure all files are owned by user <emphasis>root</emphasis>.</para>

<para>Prepare for header installation:</para>

<screen><userinput>make mrproper</userinput></screen>

<para>This ensures that the kernel tree is absolutely clean. The kernel team
recommends that this command be issued prior to <emphasis>each</emphasis> kernel
compilation. You shouldn't rely on the source tree being clean after
untarring.</para>

<para>Create the <filename>include/linux/version.h</filename> file:</para>

<screen><userinput>make include/linux/version.h</userinput></screen>

<para>Create the platform-specific <filename>include/asm</filename>
symlink:</para>

<screen><userinput>make symlinks</userinput></screen>

<para>Install the platform specific-header files:</para>

<screen><userinput>cp -HR include/asm /usr/include
cp -R include/asm-generic /usr/include</userinput></screen>

<para>Install the cross-platform kernel header files:</para>

<screen><userinput>cp -R include/linux /usr/include</userinput></screen>

<para>There are a few kernel header files which make use of the
<filename>autoconf.h</filename> header file. Since we do not yet configure the
kernel, we need to create this file ourselves in order to avoid compilation
failures. Create an empty <filename>autoconf.h</filename> file:</para>

<screen><userinput>touch /usr/include/linux/autoconf.h</userinput></screen>

</sect2>

<sect2>
<title>Why we copy the kernel headers and don't symlink them</title>

<para>In the past it was common practice to symlink the
<filename class="directory">/usr/include/{linux,asm}</filename> directories
to <filename class="directory">/usr/src/linux/include/{linux,asm}</filename>.
This was a <emphasis>bad</emphasis> practice, as the following extract from a
post by Linus Torvalds to the Linux Kernel Mailing List points out:</para>

<screen>I would suggest that people who compile new kernels should: 

 - not have a single symbolic link in sight (except the one that the 
   kernel build itself sets up, namely the "linux/include/asm" symlink 
   that is only used for the internal kernel compile itself) 

And yes, this is what I do. My /usr/src/linux still has the old 2.2.13 
header files, even though I haven't run a 2.2.13 kernel in a _loong_ 
time. But those headers were what Glibc was compiled against, so those 
headers are what matches the library object files. 

And this is actually what has been the suggested environment for at 
least the last five years. I don't know why the symlink business keeps 
on living on, like a bad zombie. Pretty much every distribution still 
has that broken symlink, and people still remember that the linux 
sources should go into "/usr/src/linux" even though that hasn't been 
true in a _loong_ time.</screen>

<para>The essential part is where Linus states that the header files should be
<emphasis>the ones which Glibc was compiled against</emphasis>. These are
the headers that should be used when you later compile other packages, as they
are the ones that match the object-code library files. By copying the headers,
we ensure that they remain available if later you upgrade your kernel.</para>

<para>Note, by the way, that it is perfectly all right to have the kernel sources
in <filename class="directory">/usr/src/linux</filename>, as long as you don't
have the <filename class="directory">/usr/include/{linux,asm}</filename>
symlinks.</para>

</sect2>


</sect1>
