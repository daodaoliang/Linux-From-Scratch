<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3CR2//EN" "http://www.oasis-open.org/docbook/xml/4.3CR2/docbookx.dtd">
<chapter id="chapter08" xreflabel="Chapter 8">
<?dbhtml dir="chapter08"?>
<title>Making the LFS system bootable</title>
<?dbhtml filename="chapter08.html"?>

<sect1 id="ch08-introduction">
<title>Introduction</title>
<?dbhtml filename="introduction.html"?>

<para>This chapter will make LFS bootable. This chapter deals with creating a
new fstab file, building a
new kernel for the new LFS system and installing the Grub bootloader
so that the LFS system can be selected for booting at startup.</para>

</sect1>


<sect1 id="ch08-fstab">
<title>Creating the /etc/fstab file</title>
<?dbhtml filename="fstab.html"?>

<para>The <filename>/etc/fstab</filename> file is used by some programs to
determine where partitions are to be mounted by default, which file systems
must be checked and in which order. Create a new file systems table like
this:</para>

<screen><userinput>cat &gt; /etc/fstab &lt;&lt; "EOF"</userinput>
# Begin /etc/fstab

# filesystem  mount-point  fs-type  options         dump  fsck-order

/dev/xxx      /            fff      defaults        1     1
/dev/yyy      swap         swap     pri=1           0     0
proc          /proc        proc     defaults        0     0
devpts        /dev/pts     devpts   gid=4,mode=620  0     0
shm           /dev/shm     tmpfs    defaults        0     0

# End /etc/fstab
<userinput>EOF</userinput></screen>

<para>Of course, replace <filename>xxx</filename>, <filename>yyy</filename>
and <filename>fff</filename> with the values appropriate for your system --
for example <filename>hda2</filename>, <filename>hda5</filename> and
<filename>reiserfs</filename>. For all the details on the six fields in this
table, see <userinput>man 5 fstab</userinput>.</para>

<para>When using a reiserfs partition, the <emphasis>1 1</emphasis> at the
end of the line should be replaced with <emphasis>0 0</emphasis>, as such a
partition does not need to be dumped or checked</para>

<para>The <filename>/dev/shm</filename> mount point for tmpfs is included to
allow enabling POSIX shared memory. Your kernel must have the required support
built into it for this to work -- more about this in the next section. Please
note that currently very little software actually uses POSIX shared memory.
Therefore you can consider the <filename>/dev/shm</filename> mount point
optional. For more information, see
<filename>Documentation/filesystems/tmpfs.txt</filename> in the kernel source
tree.</para>

<para>There are other lines which you may consider adding to your
<filename>fstab</filename> file. One example is a line to use if you intend to
use USB devices:</para>

<screen>usbfs       /proc/bus/usb  usbfs    defaults    0     0</screen>

<para>This option will of course only work if you have the relevant support
compiled into your kernel.</para>

</sect1>


<sect1 id="ch08-kernel">
<title>Installing Linux-2.4.23</title>
<?dbhtml filename="kernel.html"?>

<screen>Estimated build time:           All default options: 4.20 SBU
Estimated required disk space:  All default options: 181 MB</screen>

<sect2><title>Contents of Linux</title>

<!-- <para>(Last checked against version &kernel-contversion;.)</para> -->

<para>The Linux kernel is at the core of every Linux system. It's what makes
Linux tick. When a computer is turned on and boots a Linux system, the
very first piece of Linux software that gets loaded is the kernel. The
kernel initializes the system's hardware components: serial ports, parallel
ports, sound cards, network cards, IDE controllers, SCSI controllers and a
lot more. In a nutshell the kernel makes the hardware available so that the
software can run.</para>

<para><emphasis>Installed files</emphasis>: the kernel and the kernel
headers</para>

</sect2>

<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Linux Installation Dependencies</title>

<!-- <para>(Last checked against version &kernel-depversion;.)</para> -->

<para>Linux depends on: Bash, Binutils, Coreutils, Findutils,
GCC, Glibc, Grep, Gzip, Make, Modutils, Perl, Sed.</para>

</sect2>


<sect2><title> </title><para> </para></sect2>

<sect2>
<title>Installation of the kernel</title>

<para>Building the kernel involves a few steps: configuration,
compilation, and installation. If you don't like the way this
book configures the kernel, view the <filename>README</filename>
file in the kernel source tree for alternative methods.</para>

<para>Prepare for compilation by running the following command:</para>

<screen><userinput>make mrproper</userinput></screen>

<para>This ensures that the kernel tree is absolutely clean. The kernel
team recommends that this command be issued prior to
<emphasis>each</emphasis> kernel compilation. You shouldn't rely
on the source tree being clean after untarring.</para>

<para>Configure the kernel via a menu-driven interface:</para>

<screen><userinput>make menuconfig</userinput></screen>

<para><userinput>make oldconfig</userinput> may be more appropriate
in some situations. See the <filename>README</filename> file for
more information.</para>

<para>If you wish, you may skip kernel configuration by simply copying the
kernel config file, <filename>.config</filename>, from your host system
(assuming it is available) to the unpacked
<filename class="directory">linux-2.4.23</filename> directory.
However, we don't recommend this option. You're much better off exploring all
the configuration menus and creating your own kernel configuration from
scratch.</para>

<para>For POSIX shared memory support, ensure that the kernel config option
"Virtual memory file system support" is enabled. It resides within the "File
systems" menu and is normally enabled by default.</para>

<para>Verify dependencies and create dependency information files:</para>

<screen><userinput>make CC=/opt/gcc-2.95.3/bin/gcc dep</userinput></screen>

<para>Compile the kernel image:</para>

<screen><userinput>make CC=/opt/gcc-2.95.3/bin/gcc bzImage</userinput></screen>

<para>Compile the drivers which have been configured as modules:</para>

<screen><userinput>make CC=/opt/gcc-2.95.3/bin/gcc modules</userinput></screen>

<para>If you intend to use kernel modules, you will need an
<filename>/etc/modules.conf</filename> file. Information pertaining
to modules and to kernel configuration in general may be found in the
kernel documentation, which is found in the
<filename>linux-2.4.23/Documentation</filename> directory. The
modules.conf man page and the kernel HOWTO at
<ulink url="http://www.tldp.org/HOWTO/Kernel-HOWTO.html"/> may also be of
interest to you.</para>

<para>Install the modules:</para>

<screen><userinput>make CC=/opt/gcc-2.95.3/bin/gcc modules_install</userinput></screen>

<para>As nothing is complete without documentation, build the manual pages
that come with the kernel:</para>

<screen><userinput>make mandocs</userinput></screen>

<para>And install these pages:</para>

<screen><userinput>cp -a Documentation/man /usr/share/man/man9</userinput></screen>

<para>Kernel compilation has finished, but some of the files created
still reside in the source tree. To complete the installation, two
files need to be copied to the <filename>/boot</filename>
directory.</para>

<para>The path to the kernel file may vary depending on the platform
you're using. Issue the following command to install the kernel:</para>

<screen><userinput>cp arch/i386/boot/bzImage /boot/lfskernel</userinput></screen>

<para><filename>System.map</filename> is a symbol file for the kernel.
It maps the function entrypoints of every function in the kernel API,
as well as the addresses of the kernel data structures for the running
kernel. Issue the following command to install the map file:</para>

<screen><userinput>cp System.map /boot</userinput></screen>

</sect2>


</sect1>

<sect1 id="ch08-grub">
<title>Making the LFS system bootable</title>
<?dbhtml filename="grub.html"?>

<para>Your shiny new LFS system is almost complete. One of the last things to
do is ensure you can boot it. The instructions below apply only to computers
of IA-32 architecture, i.e. mainstream PC's. Information on "boot loading" for
other architectures should be available in the usual resource specific
locations for those architectures.</para>

<para>Boot loading can be a complex area. First, a few cautionary words. You
really should be familiar with your current boot loader and any other
operating systems present on your hard drive(s) that you might wish to keep
bootable. Please make sure that you have an emergency boot disk ready, so that
you can rescue your computer if, by any chance, your computer becomes unusable
(unbootable).</para>

<para>Earlier, we compiled and installed the Grub boot loader software in
preparation for this step. The procedure involves writing some special Grub
files to specific locations on the hard drive. Before we get to that, we
highly recommend that you create a Grub boot floppy diskette just in case.
Insert a blank floppy diskette and run the following commands:</para>

<screen><userinput>dd if=/boot/grub/stage1 of=/dev/fd0 bs=512 count=1
dd if=/boot/grub/stage2 of=/dev/fd0 bs=512 seek=1</userinput></screen>

<para>Remove the diskette and store it somewhere safe. Now we'll run the
<userinput>grub</userinput> shell:</para>

<screen><userinput>grub</userinput></screen>

<para>Grub uses its own naming structure for drives and partitions, in the form
of (hdn,m), where <emphasis>n</emphasis> is the hard drive number, and
<emphasis>m</emphasis> the partition number, both starting from zero. This
means, for instance, that partition <filename>hda1</filename> is (hd0,0) to
Grub, and <filename>hdb2</filename> is (hd1,1). In contrast to Linux, Grub
doesn't consider CD-ROM drives to be hard drives, so if you have a CD on
<filename>hdb</filename>, for example, and a second hard drive on
<filename>hdc</filename>, that second hard drive would still be (hd1).</para>

<para>Using the above information, determine the appropriate designator for
your root partition. For the following example, we'll assume your root
partition is <filename>hda4</filename>.</para>

<para>First, tell Grub where to search for its <filename>stage{1,2}</filename>
files -- you can use Tab everywhere to make Grub show the alternatives:</para>

<screen><userinput>root (hd0,3)</userinput></screen>

<!-- HACK - Force some whitespace to appease tidy -->
<literallayout/>

<warning><para>The following command will overwrite your current boot loader.
Don't run the command if this is not what you want. For example, you may be
using a third party boot manager to manage your MBR (Master Boot Record). In
this scenario, it would probably make more sense to install Grub into the
"boot sector" of the LFS partition, in which case the command would become:
<userinput>setup (hd0,3)</userinput>.</para></warning>

<!-- HACK - Force some whitespace to appease tidy -->
<literallayout/>

<para>Then tell it to install itself into the MBR (Master Boot Record) of
<filename>hda</filename>:</para>

<screen><userinput>setup (hd0)</userinput></screen>

<para>If all is well, Grub will have reported finding its files in
<filename>/boot/grub</filename>. That's all there is to it:</para>

<screen><userinput>quit</userinput></screen>

<para>Now we need to create a "menu list" file, defining Grub's boot
menu:</para>

<screen><userinput>cat &gt; /boot/grub/menu.lst &lt;&lt; "EOF"</userinput>
# Begin /boot/grub/menu.lst

# By default boot the first menu entry.
default 0

# Allow 30 seconds before booting the default.
timeout 30

# Use prettier colors.
color green/black light-green/black

# The first entry is for LFS.
title LFS 5.1
root (hd0,3)
kernel /boot/lfskernel root=/dev/hda4 ro
<userinput>EOF</userinput></screen>

<para>You may want to add an entry for your host distribution.  It might look
like this:</para>

<screen><userinput>cat &gt;&gt; /boot/grub/menu.lst &lt;&lt; "EOF"</userinput>
title Red Hat
root (hd0,2)
kernel /boot/kernel-2.4.20 root=/dev/hda3 ro
initrd /boot/initrd-2.4.20
<userinput>EOF</userinput></screen>

<para>Also, if you happen to dual-boot Windows, the following entry should
allow booting it:</para>

<screen><userinput>cat &gt;&gt; /boot/grub/menu.lst &lt;&lt; "EOF"</userinput>
title Windows
rootnoverify (hd0,0)
chainloader +1
<userinput>EOF</userinput></screen>

<para>If <userinput>info grub</userinput> doesn't tell you all you want to
know, you can find more information regarding Grub on its website, located at:
<ulink url="http://www.gnu.org/software/grub"/>.</para>

</sect1>



</chapter>
